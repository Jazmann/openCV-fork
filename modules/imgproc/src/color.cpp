/*M///////////////////////////////////////////////////////////////////////////////////////
//
//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
//
//  By downloading, copying, installing or using the software you agree to this license.
//  If you do not agree to this license, do not download, install,
//  copy or use the software.
//
//
//                           License Agreement
//                For Open Source Computer Vision Library
//
// Copyright (C) 2000-2008, Intel Corporation, all rights reserved.
// Copyright (C) 2009-2010, Willow Garage Inc., all rights reserved.
// Third party copyrights are property of their respective owners.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//   * Redistribution's of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//   * Redistribution's in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//   * The name of the copyright holders may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
// This software is provided by the copyright holders and contributors "as is" and
// any express or implied warranties, including, but not limited to, the implied
// warranties of merchantability and fitness for a particular purpose are disclaimed.
// In no event shall the Intel Corporation or contributors be liable for any direct,
// indirect, incidental, special, exemplary, or consequential damages
// (including, but not limited to, procurement of substitute goods or services;
// loss of use, data, or profits; or business interruption) however caused
// and on any theory of liability, whether in contract, strict liability,
// or tort (including negligence or otherwise) arising in any way out of
// the use of this software, even if advised of the possibility of such damage.
//
//M*/

/********************************* COPYRIGHT NOTICE *******************************\
  The function for RGB to Lab conversion is based on the MATLAB script
  RGB2Lab.m translated by Mark Ruzon from C code by Yossi Rubner, 23 September 1997.
  See the page [http://vision.stanford.edu/~ruzon/software/rgblab.html]
\**********************************************************************************/

/********************************* COPYRIGHT NOTICE *******************************\
  Original code for Bayer->BGR/RGB conversion is provided by Dirk Schaefer
  from MD-Mathematische Dienste GmbH. Below is the copyright notice:

    IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
    By downloading, copying, installing or using the software you agree
    to this license. If you do not agree to this license, do not download,
    install, copy or use the software.

    Contributors License Agreement:

      Copyright (c) 2002,
      MD-Mathematische Dienste GmbH
      Im Defdahl 5-10
      44141 Dortmund
      Germany
      www.md-it.de

    Redistribution and use in source and binary forms,
    with or without modification, are permitted provided
    that the following conditions are met:

    Redistributions of source code must retain
    the above copyright notice, this list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    The name of Contributor may not be used to endorse or promote products
    derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.
\**********************************************************************************/

#include "precomp.hpp"
#include "opencl_kernels.hpp"
#include <limits>

#include <iostream>
#include <fstream>
#include <inttypes.h>

#define  CV_DESCALE(x,n)     (((x) + (1 << ((n)-1))) >> (n))

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
#define MAX_IPP8u   255
#define MAX_IPP16u  65535
#define MAX_IPP32f  1.0
static IppStatus sts = ippInit();
#endif

namespace cv
{
    
#include <cmath>
    
    double adjustTheta(double theta, int nBits)
    {
        std::vector<double> halfErrorTheta;
        switch (nBits) {
            case 1:
                halfErrorTheta = {};
                break;
            case 2:
                halfErrorTheta = {0.,0.10886183494346285,0.10886183494346287,0.41473694065483596,0.5235987755982988};
                break;
            case 3:
                halfErrorTheta = {0.,0.04974211481989622,0.24039088244617904,0.2832078931521198,0.4738566607784026,0.5235987755982988};
                break;
            case 4:
                halfErrorTheta = {0.,0.02382875155918041,0.1191873023378467,0.1191873023378467,0.4044114732604521,0.4044114732604521,0.4997700240391184};
                break;
            case 5:
                halfErrorTheta = {0.,0.01167063791933511,0.05679488716658566,0.1044178009296215,0.1545182674211429,0.1545182674211429,0.3690805081771559,0.3690805081771559,0.4191809746686773,0.4668038884317132,0.5119281376789637};
                break;
            case 6:
                halfErrorTheta = {0.,0.0057765174418745,0.02772167522691876,0.03392014437529911,0.05679446852810379,0.0802939605338449,0.104417573788231,0.1291612930085838,0.1722932693638452,0.2165510027160033,0.2165510027160033,0.234638487404298,0.234638487404298,0.2527437737231354,0.2708550018751634,0.2889602881940008,0.2889602881940008,0.3070477728822954,0.3070477728822955,0.3513055062344535,0.394437482589715,0.4191812018100679,0.443304815064454,0.466804307070195,0.4896786312229997,0.49587710037138,0.5178222581564244};
                break;
            case 7:
                halfErrorTheta = {0.,0.002873826466825116,0.01369513420353454,0.01667236271308153,0.02772164604250074,0.04208598593288929,0.0535218498208757,0.06511305351829584,0.06846598524564325,0.0802938944017795,0.0922778712885465,0.1044175146479055,0.1167122289795317,0.1253932727181939,0.1379103799281862,0.1505789772074858,0.1594118816488859,0.1722932290353949,0.1812029944119282,0.2032685061008143,0.2122571930128846,0.2212539001530706,0.2302571800673693,0.2933415955309295,0.3023448754452281,0.3113415825854142,0.3203302694974845,0.3423957811863706,0.3513055465629039,0.3641868939494129,0.373019798390813,0.3856883956701126,0.398205502880105,0.4068865466187671,0.4191812609503933,0.4313209043097523,0.4433048811965193,0.4551327903526555,0.458485722080003,0.4700769257774231,0.4815127896654095,0.4958771295557981,0.5069264128852174,0.5099036413947643,0.5207249491314737};
                break;
            case 8:
                halfErrorTheta = \
                {0.00000000000000000, 0.00143333876912940, 0.00680655577671449, 0.00826548590429161, 0.01369513229128979, 0.01518002945927459, 0.02066655537455433, 0.02772163860627415, 0.03330392719204050, 0.03486118185290951, 0.04050139198163311, 0.04618026731815111, 0.04778449621550018, 0.05352184290195053, 0.05929802636112587, 0.06511305296608510, 0.06678531510543312, 0.07265941521887802, 0.07857245359132500, 0.08452440108912110, 0.09051521715432270, 0.09654484953010100, 0.10261323398534630, 0.10872029403922980, 0.11486594068656380, 0.11919189585083160, 0.12539327023419590, 0.13163280816950200, 0.13791037265977150, 0.14229220516408960, 0.14862403111471370, 0.15302665087926920, 0.15941187779660950, 0.16383444104060330, 0.17027214928485320, 0.17471377946325260, 0.18120299004370360, 0.18566277836845370, 0.19667945891604620, 0.20115908066396540, 0.20564114051500680, 0.21675463190626600, 0.22125389857727100, 0.22575480834540010, 0.23025717965910670, 0.23476083060767500, 0.25954053841060580, 0.25954053841060580, 0.26405823718769300, 0.26405823718769300, 0.28883794499062380, 0.29334159593919210, 0.29784396725289870, 0.30234487702102790, 0.30684414369203280, 0.31795763508329200, 0.32243969493433340, 0.32691931668225260, 0.33793599722984520, 0.34239578555459520, 0.34888499613504620, 0.35332662631344560, 0.35976433455769550, 0.36418689780168930, 0.37057212471902960, 0.37497474448358510, 0.38130657043420920, 0.38568840293852740, 0.39196596742879680, 0.39820550536410290, 0.40440687974746720, 0.40873283491173500, 0.41487848155906900, 0.42098554161295250, 0.42705392606819790, 0.43308355844397610, 0.43907437450917770, 0.44502632200697380, 0.45093936037942080, 0.45681346049286570, 0.45848572263221370, 0.46430074923717300, 0.47007693269634820, 0.47581427938279860, 0.47741850828014770, 0.48309738361666570, 0.48873759374538940, 0.49029484840625830, 0.49587713699202470, 0.50293222022374450, 0.50841874613902420, 0.50990364330700900, 0.51533328969400710, 0.51679221982158430, 0.52216543682916940};
                break;
            case 9:
                halfErrorTheta = {0.00000000000000000, 0.00071577997321824, 0.00339307731987538, 0.00411522285456063, 0.00680655565453776, 0.00753511362169751, 0.01024053928365972, 0.01097555660186494, 0.01369513180875054, 0.01717043611022878, 0.02066655430347579, 0.02342415858621057, 0.02418358769367586, 0.02695553154874192, 0.03050797282085921, 0.03330392696155429, 0.03408158103092601, 0.03689200149749664, 0.03971206761448917, 0.04050139054563711, 0.04333599367311161, 0.04618026713280451, 0.04698137784295898, 0.04984025540942691, 0.05270882494420094, 0.05640507811630505, 0.05929802550607503, 0.06220068380172555, 0.06511305282667595, 0.06594813751103614, 0.06887526180898652, 0.07181210895592816, 0.07475867656483786, 0.07771496155673846, 0.08068096015220650, 0.08365666786284940, 0.08664207948276390, 0.08963718907996130, 0.09264198998779470, 0.09565647479635800, 0.09868063534389590, 0.10171446270820790, 0.10475794719806590, 0.10781107834464600, 0.11087384489298070, 0.11394623479344770, 0.11702823519329730, 0.11919189574243780, 0.12228780420457260, 0.12539326960684560, 0.12850827609165980, 0.13068606462438960, 0.13381480350825650, 0.13695302185542060, 0.13914039926851530, 0.14229220467546640, 0.14545342196064920, 0.14765015102451680, 0.15082480034755600, 0.15302665075122870, 0.15621462203433230, 0.15842148795322540, 0.16162266742321480, 0.16383444098248230, 0.16704871116365630, 0.16926528245354950, 0.17249252216258810, 0.17471377925485770, 0.17795386359795540, 0.18017969256339650, 0.18240633236127230, 0.18566277786304500, 0.18789382194216970, 0.19339811482521740, 0.19563412951905110, 0.19787080699873740, 0.20115908019656780, 0.20339981665811530, 0.20564114037841360, 0.21119006723344540, 0.21343578318962250, 0.21568198745237330, 0.21792865750889670, 0.22575480811693340, 0.22800582250997790, 0.23025717955596020, 0.23250885650587240, 0.23476083059110230, 0.24487871578431460, 0.24713445705970210, 0.24939034759778680, 0.25164636445056100, 0.25390248466227400, 0.25615868527083790, 0.25615868527083790, 0.25841494330924150, 0.25841494330924150, 0.26067123580695640, 0.26292753979134240, 0.26518383228905730, 0.26518383228905740, 0.26744009032746090, 0.26744009032746100, 0.26969629093602480, 0.27195241114773780, 0.27420842800051210, 0.27646431853859670, 0.27872005981398420, 0.28883794500719650, 0.29108991909242640, 0.29334159604233850, 0.29559295308832090, 0.29784396748136550, 0.30567011808940210, 0.30791678814592550, 0.31016299240867630, 0.31240870836485340, 0.31795763521988520, 0.32019895894018350, 0.32243969540173100, 0.32572796859956140, 0.32796464607924770, 0.33020066077308140, 0.33570495365612900, 0.33793599773525380, 0.34119244323702650, 0.34341908303490230, 0.34564491200034340, 0.34888499634344110, 0.35110625343571070, 0.35433349314474940, 0.35655006443464250, 0.35976433461581650, 0.36197610817508390, 0.36517728764507340, 0.36738415356396650, 0.37057212484707010, 0.37277397525074290, 0.37594862457378200, 0.37814535363764960, 0.38130657092283240, 0.38445837632978350, 0.38664575374287820, 0.38978397209004230, 0.39291271097390920, 0.39509049950663900, 0.39820550599145310, 0.40131097139372610, 0.40440687985586110, 0.40657054040500140, 0.40965254080485110, 0.41272493070531810, 0.41578769725365290, 0.41884082840023290, 0.42188431289009100, 0.42491814025440280, 0.42794230080194080, 0.43095678561050410, 0.43396158651833750, 0.43695669611553500, 0.43994210773544950, 0.44291781544609230, 0.44588381404156040, 0.44884009903346090, 0.45178666664237070, 0.45472351378931230, 0.45765063808726270, 0.45848572277162290, 0.46139809179657330, 0.46430075009222380, 0.46719369748199380, 0.47088995065409790, 0.47375852018887180, 0.47661739775533980, 0.47741850846549440, 0.48026278192518730, 0.48309738505266170, 0.48388670798380970, 0.48670677410080220, 0.48951719456737280, 0.49029484863674450, 0.49309080277743960, 0.49664324404955690, 0.49941518790462300, 0.50017461701208820, 0.50293222129482300, 0.50642833948807000, 0.50990364378954820, 0.51262321899643390, 0.51335823631463910, 0.51606366197660140, 0.51679221994376100, 0.51948355274373810, 0.52020569827842340, 0.52288299562508060};
                break;
            case 10:
                halfErrorTheta = {0.00000000000000000, 0.00035766815964608, 0.00169399507395622, 0.00205325059694357, 0.00339307731215763, 0.00375392605104368, 0.00509725981016070, 0.00545970762104688, 0.00680655562385242, 0.00717060836601174, 0.00852097776800647, 0.00888664130355516, 0.01024053921504691, 0.01196525289368502, 0.01369513168755380, 0.01543018843388925, 0.01679709522015542, 0.01717043592211482, 0.01854090243494370, 0.02028991995465231, 0.02204416041683565, 0.02342415855656669, 0.02380363640593820, 0.02518721764845824, 0.02695553141141215, 0.02834510109433867, 0.02872911226318760, 0.03012228114441219, 0.03190474709218208, 0.03330392690365910, 0.03509530580310030, 0.03650050917050534, 0.03830082842940712, 0.03971206758603877, 0.04010648249023000, 0.04152135415060489, 0.04293864092782067, 0.04333599347565627, 0.04475692126874177, 0.04618026708624509, 0.04800756718457208, 0.04943698304056855, 0.05086881994670618, 0.05127332837336731, 0.05270882483459081, 0.05414674477702098, 0.05599582755197834, 0.05743984045409897, 0.05888627915787037, 0.06033514371397546, 0.06074814062048955, 0.06220068368220550, 0.06365565443389314, 0.06511305279165337, 0.06699141962966753, 0.06845493428719807, 0.06992087785754774, 0.07138925007636736, 0.07286005063648094, 0.07433327918762033, 0.07475867640202036, 0.07623560446889789, 0.07771496143976115, 0.07919674682026454, 0.08068096007175040, 0.08216760061098530, 0.08365666780989270, 0.08514816099528370, 0.08664207944858800, 0.08813842240559030, 0.08963718905615810, 0.09113837854397600, 0.09264198996627230, 0.09414802237355720, 0.09565647476934840, 0.09716734610990510, 0.09868063530396120, 0.10019634121245090, 0.10171446264824820, 0.10323499837589300, 0.10475794711132640, 0.10628330752162330, 0.10781107822472440, 0.10934125778917000, 0.11041746859775440, 0.11195115158773690, 0.11348723746268650, 0.11502572460793700, 0.11656661135825550, 0.11919189571520190, 0.12073865433924710, 0.12228780411426780, 0.12383934313624800, 0.12492489407241010, 0.12647988559162440, 0.12803725911901850, 0.13068606458954410, 0.13224924790709540, 0.13381480339179630, 0.13490626276111300, 0.13647523018679950, 0.13804656166195690, 0.13914039923864270, 0.14071512411703890, 0.14338839062028070, 0.14496884531614820, 0.14606633531239830, 0.14765015095724620, 0.15033609502751950, 0.15192559174176380, 0.15302665071905330, 0.15461947433814480, 0.15572179086462110, 0.15731792724039910, 0.15842148793787500, 0.16002092269103400, 0.16112571405357640, 0.16272843257346260, 0.16383444096787670, 0.16544042841231810, 0.16654764007864520, 0.16815688137381400, 0.16926528242584350, 0.17087776226615430, 0.17198733869195910, 0.17471377920248790, 0.17582473233213310, 0.17744457392647780, 0.17855666767142610, 0.18129291241123460, 0.18240633234929060, 0.18403343568655770, 0.18514796081255110, 0.18626267677221570, 0.18789382188148600, 0.18900962181498960, 0.19176075289907550, 0.19287779697997970, 0.19399501335910500, 0.19563412946030200, 0.19675238675676060, 0.19787080698901050, 0.20063329049370450, 0.20175288331829030, 0.20287262687951980, 0.20452040645002810, 0.20564114034408590, 0.20676201547878300, 0.20953547499080620, 0.21065744986034680, 0.21177955361472000, 0.21290178345011450, 0.21568198741344780, 0.21680526563827560, 0.21792865749431340, 0.21905216016302530, 0.22183891705318740, 0.22296341625895040, 0.22408801373878180, 0.22521270666066510, 0.22633749219112070, 0.22913145958986030, 0.23025717953003770, 0.23138297944589550, 0.23250885649195830, 0.23363480782156970, 0.23476083058693740, 0.23588692193917650, 0.23981635850450110, 0.24094335763002830, 0.24207040974540990, 0.24319751199092670, 0.24432466150609260, 0.24545185542969860, 0.24657909089985610, 0.24770636505404300, 0.24883367502914520, 0.24996101796150090, 0.25108839098694690, 0.27251038461135190, 0.27363775763679800, 0.27476510056915360, 0.27589241054425580, 0.27701968469844270, 0.27814692016860020, 0.27927411409220610, 0.28040126360737220, 0.28152836585288890, 0.28265541796827040, 0.28378241709379770, 0.28771185365912230, 0.28883794501136140, 0.28996396777672910, 0.29108991910634050, 0.29221579615240330, 0.29334159606826100, 0.29446731600843850, 0.29726128340717800, 0.29838606893763370, 0.29951076185951700, 0.30063535933934850, 0.30175985854511150, 0.30454661543527350, 0.30567011810398550, 0.30679350996002320, 0.30791678818485100, 0.31069699214818420, 0.31181922198357880, 0.31294132573795200, 0.31406330060749260, 0.31683676011951580, 0.31795763525421290, 0.31907836914827070, 0.32072614871877900, 0.32184589228000850, 0.32296548510459430, 0.32572796860928830, 0.32684638884153820, 0.32796464613799680, 0.32960376223919370, 0.33072097861831910, 0.33183802269922330, 0.33458915378330920, 0.33570495371681290, 0.33733609882608300, 0.33845081478574770, 0.33956533991174110, 0.34119244324900830, 0.34230586318706420, 0.34504210792687270, 0.34615420167182100, 0.34777404326616570, 0.34888499639581090, 0.35161143690633970, 0.35272101333214460, 0.35433349317245530, 0.35544189422448480, 0.35705113551965360, 0.35815834718598070, 0.35976433463042210, 0.36087034302483620, 0.36247306154472230, 0.36357785290726470, 0.36517728766042380, 0.36628084835789960, 0.36787698473367770, 0.36897930126015400, 0.37057212487924550, 0.37167318385653500, 0.37326268057077930, 0.37594862464105260, 0.37753244028590060, 0.37862993028215060, 0.38021038497801810, 0.38288365148125990, 0.38445837635965620, 0.38555221393634190, 0.38712354541149930, 0.38869251283718590, 0.38978397220650240, 0.39134952769120340, 0.39291271100875470, 0.39556151647928030, 0.39711889000667440, 0.39867388152588870, 0.39975943246205080, 0.40131097148403100, 0.40286012125905180, 0.40440687988309700, 0.40703216424004330, 0.40857305099036180, 0.41011153813561230, 0.41164762401056190, 0.41318130700054440, 0.41425751780912880, 0.41578769737357430, 0.41731546807667550, 0.41884082848697240, 0.42036377722240580, 0.42188431295005060, 0.42340243438584790, 0.42491814029433770, 0.42643142948839370, 0.42794230082895050, 0.42945075322474150, 0.43095678563202650, 0.43246039705432290, 0.43396158654214080, 0.43546035319270850, 0.43695669614971080, 0.43845061460301510, 0.43994210778840610, 0.44143117498731360, 0.44291781552654840, 0.44440202877803430, 0.44588381415853760, 0.44736317112940100, 0.44884009919627840, 0.44926549641067850, 0.45073872496181790, 0.45220952552193140, 0.45367789774075100, 0.45514384131110080, 0.45660735596863130, 0.45848572280664540, 0.45994312116440570, 0.46139809191609330, 0.46285063497780920, 0.46326363188432330, 0.46471249644042840, 0.46615893514419980, 0.46760294804632050, 0.46945203082127790, 0.47088995076370800, 0.47232544722493150, 0.47272995565159260, 0.47416179255773030, 0.47559120841372670, 0.47741850851205370, 0.47884185432955700, 0.48026278212264260, 0.48066013467047810, 0.48207742144769390, 0.48349229310806880, 0.48388670801226010, 0.48529794716889170, 0.48709826642779350, 0.48850346979519850, 0.49029484869463970, 0.49169402850611680, 0.49347649445388660, 0.49486966333511120, 0.49525367450396010, 0.49664324418688660, 0.49841155794984060, 0.49979513919236060, 0.50017461704173220, 0.50155461518146320, 0.50330885564364640, 0.50505787316335520, 0.50642833967618390, 0.50680168037814340, 0.50816858716440960, 0.50990364391074510, 0.51163352270461380, 0.51335823638325190, 0.51471213429474360, 0.51507779783029240, 0.51642816723228710, 0.51679221997444640, 0.51813906797725200, 0.51850151578813810, 0.51984484954725520, 0.52020569828614120, 0.52154552500135520, 0.52190478052434260, 0.52324110743865270};
                break;
            case 11:
                halfErrorTheta = {0.00000000000000000, 0.00017877868883908, 0.00084636246134217, 0.00102553748812617, 0.00169399507347139, 0.00187356716937290, 0.00254289947705907, 0.00272286937345577, 0.00339307731022396, 0.00357344573874076, 0.00424453020873429, 0.00442529790120068, 0.00509725980582302, 0.00527842749428839, 0.00595126773225978, 0.00613283614894859, 0.00680655561616321, 0.00766312508311747, 0.00852097775602970, 0.00938011525511387, 0.01024053919785394, 0.01110225119897189, 0.01178097336129656, 0.01196525287035745, 0.01264485999931122, 0.01282954582104674, 0.01351003878961852, 0.01437651133531842, 0.01524427923654843, 0.01592714151286523, 0.01611334409041828, 0.01679709521481638, 0.01698370749097857, 0.01766834832124280, 0.01854090241992039, 0.01941475909541575, 0.02010177866567914, 0.02028991992907587, 0.02097783215304502, 0.02185519221853889, 0.02254459561483949, 0.02273386043357147, 0.02342415854913843, 0.02430503203312683, 0.02518721762795011, 0.02587990661279309, 0.02676430345468881, 0.02765001633769393, 0.02834510108699640, 0.02923303113456929, 0.02992961571594816, 0.03012228112155420, 0.03081976644617625, 0.03171123945296067, 0.03241022738618163, 0.03330392688915084, 0.03400441901687121, 0.03419895251182357, 0.03490034846458760, 0.03579760633198945, 0.03650050916121513, 0.03740000267846529, 0.03810441390774282, 0.03900614645102357, 0.03971206757890927, 0.04061604249503597, 0.04132347499475658, 0.04222969560072871, 0.04293864091987181, 0.04384711050244713, 0.04455757006265974, 0.04526863388183736, 0.04546829187789948, 0.04618026707457737, 0.04689284687702312, 0.04709324434740409, 0.04780673654938069, 0.04852083369183297, 0.04943698302236578, 0.05015259883456242, 0.05086881994483754, 0.05107101096959367, 0.05178814675395783, 0.05250588814099192, 0.05342748183844483, 0.05414674476449596, 0.05486661360679258, 0.05579139411459453, 0.05651278600382224, 0.05723478409636968, 0.05816275655740776, 0.05888627914497700, 0.05961040819609019, 0.06033514371327849, 0.06054157764636157, 0.06126723257986256, 0.06199349420992593, 0.06272036253067284, 0.06365565441486187, 0.06438405015505914, 0.06511305278287633, 0.06584266228132030, 0.06678208375745721, 0.06751322210502336, 0.06824496748347338, 0.06897731986452884, 0.06971027921725501, 0.06992087783529959, 0.07065476038580597, 0.07138925006188965, 0.07212434682381459, 0.07286005062915162, 0.07359636143276970, 0.07433327918682551, 0.07454591138299977, 0.07528375381387507, 0.07602220331020654, 0.07676125981515551, 0.07750092326913823, 0.07824119360981299, 0.07898207077207275, 0.07972355468803909, 0.08046564528705370, 0.08068096005158690, 0.08142397695036840, 0.08216760059454550, 0.08291183090420720, 0.08365666779662070, 0.08440211118622800, 0.08514816098463340, 0.08589481710059540, 0.08664207944002280, 0.08738994790595940, 0.08813842239858350, 0.08888750281519080, 0.08963718905019250, 0.09038748099510690, 0.09113837853854460, 0.09188988156620740, 0.09264198996087840, 0.09339470360240830, 0.09414802236771390, 0.09490194613076560, 0.09565647476257910, 0.09641160813121070, 0.09716734610174400, 0.09792368853628580, 0.09868063529395260, 0.09943818623086780, 0.10019634120015000, 0.10095510005190600, 0.10171446263322080, 0.10247442878815110, 0.10323499835771610, 0.10377085143419420, 0.10453230150185940, 0.10529435430579300, 0.10605700967579080, 0.10682026743857980, 0.10758412741780190, 0.10834858943400840, 0.10911365330465150, 0.10965152867477260, 0.11041746859439140, 0.11118400962703540, 0.11195115157873030, 0.11271889425236650, 0.11348723744768850, 0.11402656793234940, 0.11479578360025370, 0.11556559900119450, 0.11633601392334260, 0.11710702815168580, 0.11787864146802620, 0.11841941366260320, 0.11919189570837570, 0.11996497600570240, 0.12073865432465720, 0.12128031824813620, 0.12205486265918630, 0.12283000422428600, 0.12360574270169400, 0.12414829220562580, 0.12492489406746710, 0.12570209194269020, 0.12647988557764640, 0.12702331441602510, 0.12780196865705290, 0.12858121772733210, 0.12936106136121820, 0.12990536319028760, 0.13068606458081060, 0.13146735957270080, 0.13201226573099440, 0.13279441626629840, 0.13357715941759220, 0.13412266631042880, 0.13490626275445900, 0.13569045080586770, 0.13623655480208040, 0.13702159385797860, 0.13780722348932060, 0.13835392092124620, 0.13914039923115540, 0.13992746706115330, 0.14047475422463140, 0.14126266836949230, 0.14259904410994500, 0.14338839060930370, 0.14393659105321710, 0.14472677981551690, 0.14551755512733460, 0.14606633530813410, 0.14685795041991990, 0.14740705379862300, 0.14819950702227510, 0.14954222160904100, 0.15033609501566300, 0.15088609083240780, 0.15168079810034840, 0.15223111132211370, 0.15302665071098870, 0.15437364944046330, 0.15572179085920350, 0.15651956922509720, 0.15707107151520380, 0.15786967582089820, 0.15842148793402750, 0.15922091637225010, 0.15977303661881460, 0.16057328736783510, 0.16112571405029130, 0.16192678527391730, 0.16247951668678200, 0.16328140653435310, 0.16383444096421590, 0.16463714757060060, 0.16519048329614250, 0.16599400478173170, 0.16654764007374090, 0.16790590766583270, 0.16926528241889900, 0.16981956864058360, 0.17062576065709130, 0.17118034042699440, 0.17198733868224970, 0.17254221023716700, 0.17390517434284660, 0.17446039023564830, 0.17526922899352000, 0.17582473232963640, 0.17663437041643180, 0.17719015940677460, 0.17855666766435480, 0.17911279211609110, 0.17992425327748550, 0.18048065898182840, 0.18103711515241880, 0.18184959754133720, 0.18240633234628730, 0.18377661553220290, 0.18433367566422100, 0.18514796080359120, 0.18570529510338700, 0.18626267677150000, 0.18707797085683930, 0.18763562403778220, 0.18819332343370560, 0.18900962180755840, 0.18956759004820760, 0.19094290131593930, 0.19150118077774440, 0.19205950413580090, 0.19287779697265570, 0.19343638380008500, 0.19399501335845990, 0.19481429629921950, 0.19537318661988530, 0.19593211850228700, 0.19731157667311970, 0.19787080698657230, 0.19925154132745010, 0.19981106616242170, 0.20037062986297120, 0.20175288331312660, 0.20231273642778690, 0.20287262687942600, 0.20369624565454340, 0.20425638423735500, 0.20481655897120320, 0.20620156042436970, 0.20676201547469910, 0.20732250513765020, 0.20870898344015800, 0.20926974824398350, 0.20983054611679170, 0.21039137670876480, 0.21177955361000080, 0.21234065294468790, 0.21290178344894180, 0.21429140248524720, 0.21485279650553150, 0.21541422014079710, 0.21597567303945710, 0.21736694753341170, 0.21792865749065800, 0.21849039515104610, 0.21905216016210070, 0.22044506605697700, 0.22100708163799280, 0.22156912300391970, 0.22213118980143040, 0.22269328167709980, 0.22408801373424020, 0.22465034844304370, 0.22521270665819780, 0.22577508802547320, 0.22633749219055140, 0.22829665515482970, 0.22885931559718400, 0.22942199690463850, 0.22998469872203710, 0.23054742069414610, 0.23250885648847060, 0.23307182304645560, 0.23363480781937190, 0.23419781045120980, 0.23476083058589340, 0.23532386786727840, 0.23588692193915570, 0.23785099410267070, 0.23841427783275570, 0.23897757640559460, 0.23954088946428690, 0.24010421665187530, 0.24066755761134950, 0.24123091198564640, 0.24179427941765200, 0.24432466150389490, 0.24488825309377450, 0.24545185542803810, 0.24601546814892980, 0.24657909089865360, 0.24714272331937590, 0.24770636505322500, 0.24827001574229420, 0.24883367502864350, 0.24939734255429800, 0.24996101796125280, 0.25052470089147360, 0.25108839098689500, 0.25700612839262100, 0.25757003409106410, 0.25813394247931840, 0.25869785319876340, 0.25926176589076930, 0.25982568019669910, 0.26038959575790890, 0.26038959575790900, 0.26095351221575130, 0.26151742921157430, 0.26151742921157440, 0.26208134638672440, 0.26208134638672450, 0.26264526338254750, 0.26320917984038990, 0.26320917984038990, 0.26377309540159970, 0.26433700970752950, 0.26490092239953540, 0.26546483311898040, 0.26602874150723470, 0.26659264720567770, 0.27251038461140380, 0.27307407470682520, 0.27363775763704610, 0.27420143304400090, 0.27476510056965530, 0.27532875985600460, 0.27589241054507370, 0.27645605227892300, 0.27701968469964520, 0.27758330744936900, 0.27814692017026070, 0.27871052250452430, 0.27927411409440400, 0.28180449618064690, 0.28236786361265240, 0.28293121798694930, 0.28349455894642350, 0.28405788613401200, 0.28462119919270420, 0.28518449776554310, 0.28574778149562800, 0.28771185365914310, 0.28827490773102040, 0.28883794501240540, 0.28940096514708900, 0.28996396777892700, 0.29052695255184310, 0.29108991910982830, 0.29305135490415280, 0.29361407687626170, 0.29417677869366030, 0.29473946000111480, 0.29530212044346910, 0.29726128340774740, 0.29782368757282550, 0.29838606894010100, 0.29894842715525500, 0.29951076186405860, 0.30090549392119900, 0.30146758579686840, 0.30202965259437910, 0.30259169396030610, 0.30315370954132180, 0.30454661543619810, 0.30510838044725260, 0.30567011810764080, 0.30623182806488720, 0.30762310255884180, 0.30818455545750170, 0.30874597909276730, 0.30930737311305160, 0.31069699214935700, 0.31125812265361100, 0.31181922198829800, 0.31320739888953400, 0.31376822948150710, 0.31432902735431530, 0.31488979215814080, 0.31627627046064870, 0.31683676012359970, 0.31739721517392900, 0.31878221662709570, 0.31934239136094390, 0.31990252994375540, 0.32072614871887280, 0.32128603917051190, 0.32184589228517220, 0.32322814573532760, 0.32378770943587720, 0.32434723427084880, 0.32572796861172650, 0.32628719892517920, 0.32766665709601180, 0.32822558897841360, 0.32878447929907930, 0.32960376223983890, 0.33016239179821390, 0.33072097862564310, 0.33153927146249800, 0.33209759482055450, 0.33265587428235950, 0.33403118555009130, 0.33458915379074040, 0.33540545216459310, 0.33596315156051660, 0.33652080474145960, 0.33733609882679880, 0.33789348049491190, 0.33845081479470760, 0.33926509993407780, 0.33982216006609590, 0.34119244325201150, 0.34174917805696170, 0.34256166044588000, 0.34311811661647040, 0.34367452232081330, 0.34448598348220760, 0.34504210793394390, 0.34640861619152420, 0.34696440518186700, 0.34777404326866250, 0.34832954660477880, 0.34913838536265050, 0.34969360125545230, 0.35105656536113190, 0.35161143691604910, 0.35241843517130440, 0.35297301494120750, 0.35377920695771530, 0.35433349317939980, 0.35569286793246620, 0.35705113552455800, 0.35760477081656700, 0.35840829230215630, 0.35896162802769820, 0.35976433463408290, 0.36031736906394580, 0.36111925891151670, 0.36167199032438160, 0.36247306154800750, 0.36302548823046370, 0.36382573897948420, 0.36437785922604870, 0.36517728766427130, 0.36572909977740060, 0.36652770408309500, 0.36707920637320160, 0.36787698473909530, 0.36922512615783550, 0.37057212488731020, 0.37136766427618520, 0.37191797749795040, 0.37271268476589100, 0.37326268058263580, 0.37405655398925770, 0.37539926857602370, 0.37619172179967570, 0.37674082517837890, 0.37753244029016470, 0.37808122047096430, 0.37887199578278180, 0.37966218454508170, 0.38021038498899510, 0.38099973148835390, 0.38233610722880650, 0.38312402137366740, 0.38367130853714550, 0.38445837636714340, 0.38524485467705260, 0.38579155210897820, 0.38657718174032020, 0.38736222079621840, 0.38790832479243110, 0.38869251284383970, 0.38947610928787000, 0.39002161618070660, 0.39080435933200040, 0.39158650986730440, 0.39213141602559800, 0.39291271101748820, 0.39369341240801120, 0.39423771423708060, 0.39501755787096670, 0.39579680694124590, 0.39657546118227370, 0.39711889002065240, 0.39789668365560860, 0.39867388153083170, 0.39945048339267300, 0.39999303289660480, 0.40076877137401280, 0.40154391293911250, 0.40231845735016250, 0.40286012127364160, 0.40363379959259650, 0.40440687988992300, 0.40517936193569570, 0.40572013413027260, 0.40649174744661300, 0.40726276167495620, 0.40803317659710420, 0.40880299199804510, 0.40957220766594950, 0.41011153815061030, 0.41087988134593230, 0.41164762401956860, 0.41241476597126350, 0.41318130700390740, 0.41394724692352630, 0.41448512229364730, 0.41525018616429050, 0.41601464818049680, 0.41677850815971910, 0.41754176592250790, 0.41830442129250590, 0.41906647409643940, 0.41982792416410460, 0.42036377724058280, 0.42112434681014770, 0.42188431296507800, 0.42264367554639270, 0.42340243439814880, 0.42416058936743100, 0.42491814030434630, 0.42567508706201310, 0.42643142949655490, 0.42718716746708820, 0.42794230083571970, 0.42869682946753320, 0.42945075323058500, 0.43020407199589050, 0.43095678563742050, 0.43170889403209150, 0.43246039705975430, 0.43321129460319190, 0.43396158654810630, 0.43471127278310810, 0.43546035319971540, 0.43620882769233940, 0.43695669615827610, 0.43770395849770340, 0.43845061461366540, 0.43919666441207090, 0.43994210780167820, 0.44068694469409170, 0.44143117500375330, 0.44217479864793040, 0.44291781554671190, 0.44313313031124510, 0.44387522091025970, 0.44461670482622610, 0.44535758198848590, 0.44609785232916060, 0.44683751578314330, 0.44757657228809230, 0.44831502178442370, 0.44905286421529910, 0.44926549641147330, 0.45000241416552910, 0.45073872496914720, 0.45147442877448420, 0.45220952553640910, 0.45294401521249290, 0.45367789776299920, 0.45388849638104380, 0.45462145573377000, 0.45535380811482550, 0.45608555349327540, 0.45681669184084160, 0.45775611331697860, 0.45848572281542250, 0.45921472544323970, 0.45994312118343700, 0.46087841306762600, 0.46160528138837280, 0.46233154301843630, 0.46305719795193720, 0.46326363188502040, 0.46398836740220860, 0.46471249645332180, 0.46543601904089100, 0.46636399150192910, 0.46708598959447660, 0.46780738148370430, 0.46873216199150620, 0.46945203083380290, 0.47017129375985400, 0.47109288745730690, 0.47181062884434100, 0.47252776462870520, 0.47272995565346130, 0.47344617676373640, 0.47416179257593300, 0.47507794190646580, 0.47579203904891820, 0.47650553125089470, 0.47670592872127570, 0.47741850852372150, 0.47813048372039940, 0.47833014171646150, 0.47904120553563900, 0.47975166509585170, 0.48066013467842700, 0.48136907999757010, 0.48227530060354220, 0.48298273310326290, 0.48388670801938960, 0.48459262914727520, 0.48549436169055600, 0.48619877291983360, 0.48709826643708370, 0.48780116926630940, 0.48869842713371120, 0.48939982308647520, 0.48959435658142760, 0.49029484870914800, 0.49118854821211710, 0.49188753614533820, 0.49277900915212260, 0.49347649447674460, 0.49366915988235070, 0.49436574446372960, 0.49525367451130240, 0.49594875926060490, 0.49683447214361000, 0.49771886898550570, 0.49841155797034870, 0.49929374356517200, 0.50017461704916040, 0.50086491516472730, 0.50105417998345930, 0.50174358337975990, 0.50262094344525380, 0.50330885566922290, 0.50349699693261960, 0.50418401650288300, 0.50505787317837840, 0.50593042727705610, 0.50661506810732030, 0.50680168038348240, 0.50748543150788050, 0.50767163408543360, 0.50835449636175040, 0.50922226426298050, 0.51008873680868030, 0.51076922977725200, 0.51095391559898760, 0.51163352272794140, 0.51181780223700230, 0.51249652439932700, 0.51335823640044480, 0.51421866034318500, 0.51507779784226920, 0.51593565051518130, 0.51679221998213570, 0.51746593944935030, 0.51764750786603910, 0.51832034810401040, 0.51850151579247590, 0.51917347769709810, 0.51935424538956450, 0.52002532985955800, 0.52020569828807480, 0.52087590622484300, 0.52105587612123970, 0.52172520842892580, 0.52190478052482750, 0.52257323811017270, 0.52275241313695670, 0.52341999690945970};
                break;
            case 12:
                halfErrorTheta = {0.00000000000000000, 0.00008937550489077, 0.00042302256443217, 0.00051249709098617, 0.00084636246131187, 0.00093593610089470, 0.00127001989592537, 0.00135969273990465, 0.00169399507335003, 0.00178376721314947, 0.00211828819870551, 0.00220815972572625, 0.00254289947678649, 0.00263287048245384, 0.00296782911228296, 0.00305789968803802, 0.00339307730973990, 0.00348324754704049, 0.00381864427356204, 0.00390891426387521, 0.00424453020797945, 0.00433490004278519, 0.00467073531706491, 0.00509725980473728, 0.00552410387478279, 0.00595126773078339, 0.00637875157616824, 0.00680655561423885, 0.00723468004809456, 0.00766312508068624, 0.00800064667840211, 0.00809189091479713, 0.00842963279137580, 0.00852097775303258, 0.00885894001934585, 0.00895038579784260, 0.00928856856456471, 0.00971851862913010, 0.01014879041495634, 0.01057938412379553, 0.01101029995721043, 0.01134951409740631, 0.01144153811659267, 0.01178097336068110, 0.01187309880315786, 0.01221275526054209, 0.01264485999784453, 0.01307728777325176, 0.01351003878724349, 0.01385050808852426, 0.01394311324011399, 0.01428380424223951, 0.01437651133197951, 0.01471742414323487, 0.01515136799124314, 0.01558563598580352, 0.01592714151265857, 0.01602022832626320, 0.01636195603687545, 0.01645514521178583, 0.01679709521347985, 0.01723255924123604, 0.01766834831872204, 0.01801089221666670, 0.01810446264430679, 0.01844722920417895, 0.01888389174431306, 0.01932088003483995, 0.01966424139631655, 0.01975819427332626, 0.02010177866450840, 0.02053964218357615, 0.02097783215047419, 0.02132201223970452, 0.02141634876194321, 0.02176075224554111, 0.02219981919722724, 0.02254459561453874, 0.02263921329087232, 0.02298421335991081, 0.02342415854727911, 0.02376953191767739, 0.02386443137210923, 0.02421002864981796, 0.02465085331819060, 0.02509200611761340, 0.02543820122210921, 0.02587990661117552, 0.02632194062293076, 0.02666873416716010, 0.02711132151087797, 0.02755423796694919, 0.02790163055862821, 0.02834510108515869, 0.02869286841518465, 0.02878890121170069, 0.02913689345326497, 0.02958124838487591, 0.02992961571545250, 0.03002593340212165, 0.03037452589066185, 0.03081976644366422, 0.03116873436837981, 0.03161453089305710, 0.03196387445416333, 0.03206065827770630, 0.03241022738471262, 0.03285691146509777, 0.03320685654980235, 0.03365409775746523, 0.03400441901624847, 0.03445221778097112, 0.03480291540869523, 0.03490034846170602, 0.03525127215848881, 0.03569996111087202, 0.03605126150957657, 0.03650050915888975, 0.03685218645046067, 0.03730199322017674, 0.03765404759400187, 0.03810441390578236, 0.03845684554968246, 0.03890777182335399, 0.03926058092357788, 0.03935903162274787, 0.03971206757712490, 0.04006525431833466, 0.04016388803761156, 0.04051730176788695, 0.04087086633314924, 0.04096968330459357, 0.04132347499296140, 0.04167741756374454, 0.04213058784618536, 0.04248490860234223, 0.04293864091788214, 0.04329334003764293, 0.04374763479484240, 0.04410271245480597, 0.04455757006029407, 0.04491302643541639, 0.04526863388180992, 0.04536844729388505, 0.04572428255747298, 0.04608026893572239, 0.04618026707165670, 0.04653648139535290, 0.04689284687634937, 0.04734962351979808, 0.04770636827275677, 0.04816370949788535, 0.04852083369033801, 0.04887810912808831, 0.04897873989300185, 0.04933624369078496, 0.04969389877387630, 0.05015259883207358, 0.05051063372386706, 0.05086881994436984, 0.05132831453056874, 0.05168688075953543, 0.05204559835899034, 0.05214694174270804, 0.05250588813927327, 0.05286498594331467, 0.05332584262676818, 0.05368532079200117, 0.05404495040372113, 0.05450660344263884, 0.05486661360546014, 0.05522677525212751, 0.05568922529514930, 0.05604976767911253, 0.05641046158261888, 0.05687370927179046, 0.05723478409504742, 0.05759601047186870, 0.05806005644258012, 0.05842166391783888, 0.05878342297900164, 0.05924826785992420, 0.05961040819441097, 0.05997270014544540, 0.06033514371310405, 0.06043834455848341, 0.06080101795390377, 0.06116384299480759, 0.06152681968074827, 0.06199349420753136, 0.06235685253273401, 0.06272036252966046, 0.06308402419717419, 0.06355172974676215, 0.06391577324175747, 0.06427996843176594, 0.06464431531495162, 0.06474847560619308, 0.06511305278067923, 0.06547778167285228, 0.06584266228034465, 0.06620769460062127, 0.06667746485993997, 0.06704287936393437, 0.06740844560055188, 0.06777416356655266, 0.06814003325853300, 0.06824496748085961, 0.06861106779846994, 0.06897731986298037, 0.06934372367043927, 0.06971027921673187, 0.07007698649757375, 0.07018234840498085, 0.07054928648316877, 0.07091637631481440, 0.07128361789508336, 0.07165101121897570, 0.07201855628132048, 0.07212434682110485, 0.07249212284654677, 0.07286005062731691, 0.07322813015769039, 0.07359636143177195, 0.07396474444349536, 0.07433327918662656, 0.07443957869089253, 0.07480834457790085, 0.07517726221074863, 0.07554633158264066, 0.07591555268660882, 0.07628492551551264, 0.07665445006204280, 0.07702412631871720, 0.07713101567466767, 0.07750092326677973, 0.07787098258059951, 0.07824119360807391, 0.07861155634097861, 0.07898207077091700, 0.07935273688931571, 0.07972355468743059, 0.08009452415634230, 0.08046564528695660, 0.08057328587641710, 0.08094463855713200, 0.08131614290740120, 0.08168779891755290, 0.08205960657774060, 0.08243156587794130, 0.08280367680795420, 0.08317593935740490, 0.08354835351574120, 0.08392091927223490, 0.08429363661597880, 0.08466650553589050, 0.08503952602070850, 0.08541269805899210, 0.08552141325620990, 0.08589481709820700, 0.08626837249610620, 0.08664207943787890, 0.08701593791131470, 0.08738994790402700, 0.08776410940344830, 0.08813842239682950, 0.08851288687124370, 0.08888750281358330, 0.08926227021055850, 0.08963718904869940, 0.09001225931435680, 0.09038748099369630, 0.09076285407270420, 0.09113837853718510, 0.09151405437275990, 0.09188988156486790, 0.09226586009876660, 0.09264198995952820, 0.09301827113204280, 0.09339470360101690, 0.09377128735097310, 0.09414802236625110, 0.09452490863100380, 0.09490194612920190, 0.09527913484462880, 0.09565647476088470, 0.09603396586138470, 0.09641160812935660, 0.09678940154784360, 0.09716734609970120, 0.09754544176760160, 0.09792368853402570, 0.09819062811929490, 0.09830208638127090, 0.09856909592083430, 0.09894771474335040, 0.09932648456863950, 0.09970540537830770, 0.10008447715377320, 0.10046369987626760, 0.10084307352683200, 0.10122259808631900, 0.10160227353539310, 0.10198209985452800, 0.10236207702400790, 0.10274220502392790, 0.10312248383419250, 0.10339035247872270, 0.10377085143388180, 0.10415150111493210, 0.10453230150107780, 0.10491325257133290, 0.10529435430451690, 0.10567560667925860, 0.10605700967399540, 0.10643856326697250, 0.10670700809091430, 0.10708878121709390, 0.10747070485262570, 0.10785277897504680, 0.10823500356170060, 0.10861737858973590, 0.10899990403610830, 0.10938257987757860, 0.10965152867460350, 0.11003442348294970, 0.11041746859354960, 0.11080066398244840, 0.11118400962549830, 0.11156750549835420, 0.11195115157647570, 0.11222053316561390, 0.11260439769691900, 0.11298841233717700, 0.11337257706112770, 0.11375689184331600, 0.11402656793232870, 0.11441110078613050, 0.11479578359941850, 0.11518061634600920, 0.11556559899952460, 0.11595073153338680, 0.11622076876467290, 0.11660611890690980, 0.11699161882776400, 0.11737726849992900, 0.11776306789589760, 0.11803339705472230, 0.11841941366183900, 0.11880557988856710, 0.11919189570666700, 0.11984898098565400, 0.12023566317349760, 0.12062249481760680, 0.12100947588880640, 0.12128031824787930, 0.12166751579365420, 0.12205486265790040, 0.12244235881070590, 0.12271342286185660, 0.12310113515260720, 0.12348899662134190, 0.12387700723740530, 0.12414829220549630, 0.12453651861846700, 0.12492489406622980, 0.12531341851738560, 0.12558492362117970, 0.12597366352378500, 0.12636255231527680, 0.12675158996350820, 0.12702331441566270, 0.12741256716545680, 0.12780196865550890, 0.12807384553767450, 0.12846346185998070, 0.12885322680462600, 0.12924314033816870, 0.12951523518110400, 0.12990536318935150, 0.13029563966659070, 0.13056788590126830, 0.13095837657835260, 0.13134901560308030, 0.13201226573046520, 0.13240326690269010, 0.13279441626446780, 0.13306702939467660, 0.13345839231061940, 0.13384990329131940, 0.13412266631011340, 0.13451439056220010, 0.13490626275279340, 0.13517917520603100, 0.13557126038288290, 0.13596349337053610, 0.13623655480179360, 0.13662900048822700, 0.13702159385629580, 0.13729480380686780, 0.13768760958388420, 0.13808056291190730, 0.13835392092081050, 0.13874708636558900, 0.13914039922928120, 0.13941390483324920, 0.13980742951914370, 0.14008101791741560, 0.14047475422387760, 0.14086863772040860, 0.14114237294371330, 0.14153646776243770, 0.14193070963528770, 0.14220459121441240, 0.14259904410871190, 0.14287300767286610, 0.14326767138316930, 0.14366248191250870, 0.14393659105289500, 0.14433161209366130, 0.14500103405511280, 0.14539641197957630, 0.14567074738739460, 0.14606633530706680, 0.14673654938435520, 0.14713249342629620, 0.14740705379827100, 0.14780320731299480, 0.14807784813424150, 0.14847421090922080, 0.14887071977468160, 0.14914550379809970, 0.14954222160769980, 0.14981708556135290, 0.15021401210019960, 0.15088609083160000, 0.15128337161955270, 0.15155845737991720, 0.15195594635987710, 0.15223111132176450, 0.15262880827556750, 0.15290405223235340, 0.15330195694093510, 0.15397539192888660, 0.15437364943881040, 0.15464911281092700, 0.15504757752740380, 0.15532311915715900, 0.15572179085784730, 0.15599741053628300, 0.15639628899793940, 0.15667198651559850, 0.15707107151407690, 0.15734684666100280, 0.15774613797125370, 0.15802199053699170, 0.15842148793306430, 0.15869741770666180, 0.15909712096169970, 0.15977303661795220, 0.16044923446121170, 0.16112571404946900, 0.16180247493931450, 0.16247951668594100, 0.16315683884313790, 0.16343330312335250, 0.16383444096329960, 0.16411098074588380, 0.16451232259742060, 0.16478893766696190, 0.16519048329509660, 0.16546717343568990, 0.16586892260452730, 0.16614568759977310, 0.16654764007251320, 0.16682447970552200, 0.16722663524445910, 0.16750354929784900, 0.16818289592027140, 0.16886251911491150, 0.16913959566520410, 0.16954241842249470, 0.16981956864034520, 0.17022259338235430, 0.17049981704825800, 0.17090304353242790, 0.17118034042639090, 0.17186113831080250, 0.17213852208907770, 0.17254221023615630, 0.17281966670261160, 0.17322355573572420, 0.17350108466874340, 0.17418277551886950, 0.17446039023554540, 0.17486473878299470, 0.17514242542258630, 0.17554697398973460, 0.17582473232901140, 0.17650731048156160, 0.17678515349672190, 0.17719015940559300, 0.17746807357304100, 0.17815126371996980, 0.17842926177362200, 0.17883472345960810, 0.17911279211554180, 0.17979659134492700, 0.18007474309394790, 0.18048065898062660, 0.18075888077932450, 0.18103711515237900, 0.18144328616140780, 0.18172159025665560, 0.18240633234553550, 0.18268471826634500, 0.18309134093276640, 0.18336979601910770, 0.18364826329339680, 0.18405513955377110, 0.18433367566380810, 0.18501935309718450, 0.18529796975691670, 0.18598398003697750, 0.18626267677132080, 0.18667025416539960, 0.18694901884273440, 0.18722779517552500, 0.18763562403676960, 0.18791446797966270, 0.18819332343366190, 0.18860140317821350, 0.18888032590860570, 0.18915926000550260, 0.18956759004728830, 0.18984659108605070, 0.19053418309720340, 0.19081326196414310, 0.19109235190763540, 0.19150118077683120, 0.19178033699069240, 0.19205950413575940, 0.19246858153071870, 0.19274781460918960, 0.19302705847327160, 0.19343638379909780, 0.19371569325881230, 0.19399501335829840, 0.19440458601789600, 0.19468397137443840, 0.19496336722467070, 0.19565264738665920, 0.19593211850193370, 0.19662171972178680, 0.19690126561536070, 0.19718082166660600, 0.19759118680186850, 0.19787080698596200, 0.19815043718087160, 0.19884074103049990, 0.19912044488002460, 0.19940015855003100, 0.19981106616149600, 0.20009084317556030, 0.20037062986272660, 0.20106163047475300, 0.20134148968774690, 0.20162135838287940, 0.20231273642713780, 0.20259267700785230, 0.20287262687940250, 0.20328436847875210, 0.20356438045145510, 0.20384440156681800, 0.20453646710635120, 0.20481655897069720, 0.20509665978578480, 0.20578909747853450, 0.20606926839809360, 0.20634944807614490, 0.20704225600065340, 0.20732250513716870, 0.20760276283959890, 0.20829593906839210, 0.20857626558179150, 0.20885660046820350, 0.20913694368394350, 0.20955014306781910, 0.20983054611623070, 0.21011095734443140, 0.21039137670868260, 0.21108534311520920, 0.21136582984122020, 0.21164632450968670, 0.21234065294395780, 0.21262121432202960, 0.21290178344864820, 0.21318236027996260, 0.21387710714089700, 0.21415774987785050, 0.21443840012522870, 0.21471905783912230, 0.21541422014022100, 0.21569494295379860, 0.21597567303926430, 0.21625641035265210, 0.21695198509757920, 0.21723278670272660, 0.21751359534081660, 0.21779441096782840, 0.21849039515047960, 0.21877127425937700, 0.21905216016186940, 0.21933305281388240, 0.22002944341845860, 0.22031039874055360, 0.22059136061650090, 0.22087232900217090, 0.22185015324528730, 0.22213118980104830, 0.22241223262634740, 0.22269328167699780, 0.22367164079428280, 0.22395275676252780, 0.22423387871550660, 0.22451500660897610, 0.22549389446946830, 0.22577508802509850, 0.22605628728017770, 0.22633749219040890, 0.22661870271148780, 0.22731690264475640, 0.22759817195882230, 0.22787944668658370, 0.22816072678369070, 0.22844201220578710, 0.22872330290851240, 0.22942199690414030, 0.22970334527139360, 0.22998469872173010, 0.23026605721074320, 0.23054742069402030, 0.23082878912714640, 0.23180939630837140, 0.23209082602651780, 0.23237226045212220, 0.23265369954072140, 0.23293514324784450, 0.23321659152901950, 0.23419781045080820, 0.23447931835262310, 0.23476083058563220, 0.23504234710531540, 0.23532386786714910, 0.23560539282660470, 0.23588692193915050, 0.23686879562352610, 0.23715038248942160, 0.23743197326505970, 0.23771356790586420, 0.23799516636725560, 0.23827676860465090, 0.23855837457346310, 0.23982255131395230, 0.24010421665159320, 0.24038588543220440, 0.24066755761115560, 0.24094923314381150, 0.24123091198553440, 0.24151259409168400, 0.24179427941761560, 0.24207596791868280, 0.24334100407590220, 0.24362274891318430, 0.24390449663654240, 0.24418624720128940, 0.24446800056273500, 0.24474975667618570, 0.24503151549694680, 0.24531327698031900, 0.24559504108160240, 0.24587680775609380, 0.24742454304430080, 0.24770636505302020, 0.24798818930054390, 0.24827001574213110, 0.24855184433303760, 0.24883367502851790, 0.24911550778382360, 0.24939734255420590, 0.24967917929491270, 0.24996101796119070, 0.25024285850828480, 0.25052470089143770, 0.25080654506589020, 0.25108839098688210, 0.25137023860965150, 0.25376487345421900, 0.25404677473715160, 0.25432867725228880, 0.25461058095483320, 0.25489248579998660, 0.25517439174294960, 0.25545629873892200, 0.25573820674310160, 0.25602011571068590, 0.25630202559687220, 0.25658393635685630, 0.25686584794583230, 0.25714776031899490, 0.25742967343153660, 0.25771158723865110, 0.25799350169552970, 0.25827541675736400, 0.25855733237934490, 0.25883924851666220, 0.25912116512450650, 0.25940308215806600, 0.25968499957253060, 0.25996691732308870, 0.26024883536492770, 0.26053075365323580, 0.26081267214320170, 0.26109459079001200, 0.26109459079001200, 0.26137650954885450, 0.26165842837491550, 0.26165842837491570, 0.26194034722338320, 0.26194034722338330, 0.26222226604944440, 0.26250418480828670, 0.26250418480828680, 0.26278610345509710, 0.26306802194506300, 0.26334994023337110, 0.26363185827521010, 0.26391377602576820, 0.26419569344023280, 0.26447761047379230, 0.26475952708163670, 0.26504144321895390, 0.26532335884093480, 0.26560527390276910, 0.26588718835964770, 0.26616910216676220, 0.26645101527930390, 0.26673292765246650, 0.26701483924144250, 0.26729675000142670, 0.26757865988761290, 0.26786056885519720, 0.26814247685937690, 0.26842438385534920, 0.26870628979831220, 0.26898819464346560, 0.26927009834601000, 0.26955200086114720, 0.26983390214407970, 0.27222853698864730, 0.27251038461141670, 0.27279223053240860, 0.27307407470686110, 0.27335591709001400, 0.27363775763710820, 0.27391959630338610, 0.27420143304409290, 0.27448326781447530, 0.27476510056978100, 0.27504693126526130, 0.27532875985616780, 0.27561058629775490, 0.27589241054527860, 0.27617423255399800, 0.27772196784220510, 0.27800373451669640, 0.27828549861797990, 0.27856726010135200, 0.27884901892211310, 0.27913077503556370, 0.27941252839700950, 0.27969427896175640, 0.27997602668511450, 0.28025777152239660, 0.28152280767961600, 0.28180449618068320, 0.28208618150661490, 0.28236786361276440, 0.28264954245448730, 0.28293121798714310, 0.28321289016609440, 0.28349455894670560, 0.28377622428434640, 0.28504040102483560, 0.28532200699364800, 0.28560360923104320, 0.28588520769243470, 0.28616680233323910, 0.28644839310887710, 0.28672997997477270, 0.28771185365914830, 0.28799338277169410, 0.28827490773114970, 0.28855642849298350, 0.28883794501266670, 0.28911945724567570, 0.28940096514749070, 0.29038218406927940, 0.29066363235045430, 0.29094507605757740, 0.29122651514617660, 0.29150794957178100, 0.29178937928992750, 0.29276998647115250, 0.29305135490427850, 0.29333271838755560, 0.29361407687656870, 0.29389543032690510, 0.29417677869415850, 0.29487547268978640, 0.29515676339251170, 0.29543804881460800, 0.29571932891171520, 0.29600060363947650, 0.29628187295354240, 0.29698007288681090, 0.29726128340788990, 0.29754248831812110, 0.29782368757320030, 0.29810488112883050, 0.29908376898932280, 0.29936489688279220, 0.29964601883577100, 0.29992713480401600, 0.30090549392130100, 0.30118654297195140, 0.30146758579725050, 0.30174862235301160, 0.30272644659612790, 0.30300741498179790, 0.30328837685774520, 0.30356933217984030, 0.30426572278441640, 0.30454661543642940, 0.30482750133892180, 0.30510838044781920, 0.30580436463047040, 0.30608518025748220, 0.30636598889557220, 0.30664679050071970, 0.30734236524564680, 0.30762310255903450, 0.30790383264450030, 0.30818455545807780, 0.30887971775917650, 0.30916037547307010, 0.30944102572044830, 0.30972166845740180, 0.31041641531833620, 0.31069699214965060, 0.31097756127626930, 0.31125812265434100, 0.31195245108861210, 0.31223294575707860, 0.31251343248308960, 0.31320739888961620, 0.31348781825386740, 0.31376822948206810, 0.31404863253047970, 0.31446183191435530, 0.31474217513009530, 0.31502251001650730, 0.31530283652990660, 0.31599601275870000, 0.31627627046113010, 0.31655651959764540, 0.31724932752215390, 0.31752950720020520, 0.31780967811976430, 0.31850211581251400, 0.31878221662760160, 0.31906230849194760, 0.31975437403148080, 0.32003439514684380, 0.32031440711954670, 0.32072614871889640, 0.32100609859044650, 0.32128603917116110, 0.32197741721541940, 0.32225728591055190, 0.32253714512354580, 0.32322814573557220, 0.32350793242273860, 0.32378770943680280, 0.32419861704826780, 0.32447833071827410, 0.32475803456779900, 0.32544833841742720, 0.32572796861233670, 0.32600758879643030, 0.32641795393169280, 0.32669750998293810, 0.32697705587651210, 0.32766665709636510, 0.32794612821163960, 0.32863540837362810, 0.32891480422386050, 0.32919418958040270, 0.32960376224000050, 0.32988308233948650, 0.33016239179920100, 0.33057171712502720, 0.33085096098910930, 0.33113019406758010, 0.33153927146253940, 0.33181843860760640, 0.33209759482146760, 0.33250642369066340, 0.33278551363415580, 0.33306459250109540, 0.33375218451224810, 0.33403118555101050, 0.33443951559279620, 0.33471844968969310, 0.33499737242008530, 0.33540545216463690, 0.33568430761863610, 0.33596315156152920, 0.33637098042277380, 0.33664975675556440, 0.33692852143289920, 0.33733609882697800, 0.33761479556132130, 0.33830080584138210, 0.33857942250111430, 0.33926509993449070, 0.33954363604452770, 0.33995051230490200, 0.34022897957919120, 0.34050743466553250, 0.34091405733195380, 0.34119244325276330, 0.34187718534164320, 0.34215548943689100, 0.34256166044591980, 0.34283989481897430, 0.34311811661767220, 0.34352403250435090, 0.34380218425337180, 0.34448598348275710, 0.34476405213869080, 0.34516951382467680, 0.34544751187832900, 0.34613070202525790, 0.34640861619270580, 0.34681362210157700, 0.34709146511673720, 0.34777404326928750, 0.34805180160856420, 0.34845635017571250, 0.34873403681530410, 0.34913838536275340, 0.34941600007942930, 0.35009769092955540, 0.35037521986257460, 0.35077910889568720, 0.35105656536214250, 0.35146025350922110, 0.35173763728749630, 0.35241843517190790, 0.35269573206587090, 0.35309895855004080, 0.35337618221594450, 0.35377920695795360, 0.35405635717580410, 0.35445917993309470, 0.35473625648338740, 0.35541587967802740, 0.35609522630044990, 0.35637214035383980, 0.35677429589277690, 0.35705113552578560, 0.35745308799852570, 0.35772985299377150, 0.35813160216260900, 0.35840829230320220, 0.35880983793133690, 0.35908645300087820, 0.35948779485241500, 0.35976433463499920, 0.36016547247494630, 0.36044193675516100, 0.36111925891235780, 0.36179630065898430, 0.36247306154882990, 0.36314954113708710, 0.36382573898034660, 0.36450165463659910, 0.36490135789163700, 0.36517728766523450, 0.36557678506130720, 0.36585263762704520, 0.36625192893729600, 0.36652770408422190, 0.36692678908270040, 0.36720248660035940, 0.36760136506201580, 0.36787698474045150, 0.36827565644113980, 0.36855119807089500, 0.36894966278737180, 0.36922512615948840, 0.36962338366941220, 0.37029681865736380, 0.37069472336594540, 0.37096996732273140, 0.37136766427653430, 0.37164282923842170, 0.37204031821838160, 0.37231540397874600, 0.37271268476669880, 0.37338476349809920, 0.37378169003694600, 0.37405655399059910, 0.37445327180019920, 0.37472805582361720, 0.37512456468907800, 0.37552092746405730, 0.37579556828530400, 0.37619172180002780, 0.37646628217200260, 0.37686222621394360, 0.37753244029123200, 0.37792802821090420, 0.37820236361872250, 0.37859774154318600, 0.37926716350463760, 0.37966218454540380, 0.37993629368579020, 0.38033110421512950, 0.38072576792543260, 0.38099973148958700, 0.38139418438388640, 0.38166806596301110, 0.38206230783586110, 0.38245640265458560, 0.38273013787789020, 0.38312402137442130, 0.38351775768088330, 0.38379134607915510, 0.38418487076504960, 0.38445837636901760, 0.38485168923270980, 0.38524485467748820, 0.38551821268639150, 0.38591116601441470, 0.38630397179143100, 0.38657718174200310, 0.38696977511007180, 0.38736222079650530, 0.38763528222776270, 0.38802751521541600, 0.38841960039226780, 0.38869251284550540, 0.38908438503609870, 0.38947610928818540, 0.38974887230697940, 0.39014038328767940, 0.39053174620362220, 0.39080435933383110, 0.39119550869560870, 0.39158650986783360, 0.39224975999521860, 0.39264039901994620, 0.39303088969703050, 0.39330313593170810, 0.39369341240894730, 0.39408354041719480, 0.39435563526013020, 0.39474554879367290, 0.39513531373831810, 0.39552493006062430, 0.39579680694279000, 0.39618620843284200, 0.39657546118263620, 0.39684718563479060, 0.39723622328302200, 0.39762511207451380, 0.39801385197711920, 0.39828535708091320, 0.39867388153206900, 0.39906225697983190, 0.39945048339280250, 0.39972176836089350, 0.40010977897695690, 0.40049764044569160, 0.40088535273644220, 0.40115641678759290, 0.40154391294039830, 0.40193125980464460, 0.40231845735041960, 0.40258929970949250, 0.40297628078069200, 0.40336311242480120, 0.40374979461264480, 0.40440687989163180, 0.40479319570973170, 0.40517936193645980, 0.40556537854357650, 0.40583570770240120, 0.40622150709836980, 0.40660715677053480, 0.40699265669138910, 0.40737800683362590, 0.40764804406491200, 0.40803317659877430, 0.40841815925228970, 0.40880299199888030, 0.40918767481216830, 0.40957220766597010, 0.40984188375498280, 0.41022619853717120, 0.41061036326112180, 0.41099437790137990, 0.41137824243268490, 0.41164762402182310, 0.41203127009994460, 0.41241476597280060, 0.41279811161585040, 0.41318130700474920, 0.41356435211534920, 0.41394724692369530, 0.41421619572072020, 0.41459887156219060, 0.41498139700856290, 0.41536377203659830, 0.41574599662325190, 0.41612807074567310, 0.41650999438120500, 0.41689176750738450, 0.41716021233132640, 0.41754176592430340, 0.41792316891904020, 0.41830442129378200, 0.41868552302696590, 0.41906647409722110, 0.41944727448336670, 0.41982792416441700, 0.42020842311957620, 0.42047629176410630, 0.42085657057437090, 0.42123669857429090, 0.42161667574377080, 0.42199650206290580, 0.42237617751197990, 0.42275570207146680, 0.42313507572203120, 0.42351429844452560, 0.42389337021999120, 0.42427229102965930, 0.42465106085494840, 0.42502967967746450, 0.42529668921702790, 0.42540814747900400, 0.42567508706427310, 0.42605333383069720, 0.42643142949859770, 0.42680937405045520, 0.42718716746894230, 0.42756480973691420, 0.42794230083741420, 0.42831964075367000, 0.42869682946909690, 0.42907386696729500, 0.42945075323204770, 0.42982748824732570, 0.43020407199728190, 0.43058050446625600, 0.43095678563877060, 0.43133291549953230, 0.43170889403343090, 0.43208472122553890, 0.43246039706111370, 0.43283592152559450, 0.43321129460460260, 0.43358651628394200, 0.43396158654959940, 0.43433650538774030, 0.43471127278471550, 0.43508588872705520, 0.43546035320146930, 0.43583466619485050, 0.43620882769427190, 0.43658283768698410, 0.43695669616042000, 0.43733040310219260, 0.43770395850009180, 0.43807736234208890, 0.43818607753930670, 0.43855924957759040, 0.43893227006240830, 0.43930513898232000, 0.43967785632606390, 0.44005042208255770, 0.44042283624089390, 0.44079509879034460, 0.44116720972035750, 0.44153916902055820, 0.44191097668074590, 0.44228263269089760, 0.44265413704116680, 0.44302548972188170, 0.44313313031134220, 0.44350425144195650, 0.44387522091086820, 0.44424603870898310, 0.44461670482738180, 0.44498721925732020, 0.44535758199022490, 0.44572779301769940, 0.44609785233151910, 0.44646775992363110, 0.44657464927958160, 0.44694432553625600, 0.44731385008278610, 0.44768322291169000, 0.44805244401565810, 0.44842151338755020, 0.44879043102039790, 0.44915919690740630, 0.44926549641167220, 0.44963403115480340, 0.45000241416652690, 0.45037064544060850, 0.45073872497098190, 0.45110665275175210, 0.45147442877719400, 0.45158021931697830, 0.45194776437932310, 0.45231515770321550, 0.45268239928348440, 0.45304948911513000, 0.45341642719331800, 0.45352178910072500, 0.45388849638156690, 0.45425505192785960, 0.45462145573531840, 0.45498770779982890, 0.45535380811743920, 0.45545874233976580, 0.45582461203174610, 0.45619032999774700, 0.45655589623436440, 0.45692131073835890, 0.45739108099767750, 0.45775611331795410, 0.45812099392544660, 0.45848572281761960, 0.45885029999210570, 0.45895446028334720, 0.45931880716653290, 0.45968300235654130, 0.46004704585153670, 0.46051475140112470, 0.46087841306863830, 0.46124192306556480, 0.46160528139076740, 0.46207195591755050, 0.46243493260349120, 0.46279775764439510, 0.46316043103981550, 0.46326363188519470, 0.46362607545285340, 0.46398836740388780, 0.46435050773837460, 0.46481535261929720, 0.46517711168046000, 0.46553871915571870, 0.46600276512643020, 0.46636399150325150, 0.46672506632650830, 0.46718831401567990, 0.46754900791918630, 0.46790955030314950, 0.46837200034617140, 0.46873216199283870, 0.46909217215566000, 0.46955382519457770, 0.46991345480629760, 0.47027293297153060, 0.47073378965498410, 0.47109288745902550, 0.47145183385559080, 0.47155317723930850, 0.47191189483876340, 0.47227046106773010, 0.47272995565392900, 0.47308814187443180, 0.47344617676622520, 0.47390487682442250, 0.47426253190751390, 0.47462003570529700, 0.47472066647021050, 0.47507794190796080, 0.47543506610041350, 0.47589240732554210, 0.47624915207850070, 0.47670592872194940, 0.47706229420294590, 0.47741850852664220, 0.47751850666257650, 0.47787449304082590, 0.47823032830441370, 0.47833014171648890, 0.47868574916288240, 0.47904120553800470, 0.47949606314349290, 0.47985114080345640, 0.48030543556065590, 0.48066013468041660, 0.48111386699595660, 0.48146818775211350, 0.48192135803455430, 0.48227530060533740, 0.48262909229370520, 0.48272790926514960, 0.48308147383041180, 0.48343488756068730, 0.48353352127996420, 0.48388670802117390, 0.48423974397555090, 0.48433819467472100, 0.48469100377494480, 0.48514193004861640, 0.48549436169251650, 0.48594472800429700, 0.48629678237812200, 0.48674658914783810, 0.48709826643940910, 0.48754751408872230, 0.48789881448742680, 0.48834750343981000, 0.48869842713659280, 0.48879586018960350, 0.48914655781732770, 0.48959435658205030, 0.48994467784083350, 0.49039191904849650, 0.49074186413320100, 0.49118854821358620, 0.49153811732059250, 0.49163490114413550, 0.49198424470524170, 0.49243004122991900, 0.49277900915463460, 0.49322424970763700, 0.49357284219617710, 0.49366915988284630, 0.49401752721342290, 0.49446188214503380, 0.49480987438659810, 0.49490590718311420, 0.49525367451314010, 0.49569714503967060, 0.49604453763134970, 0.49648745408742090, 0.49693004143113870, 0.49727683497536800, 0.49771886898712330, 0.49816057437618960, 0.49850676948068540, 0.49894792228010820, 0.49938874694848080, 0.49973434422618950, 0.49982924368062140, 0.50017461705101970, 0.50061456223838800, 0.50095956230742640, 0.50105417998376010, 0.50139895640107160, 0.50183802335275770, 0.50218242683635560, 0.50227676335859430, 0.50262094344782460, 0.50305913341472270, 0.50349699693379040, 0.50384058132497250, 0.50393453420198230, 0.50427789556345890, 0.50471488385398580, 0.50515154639411990, 0.50549431295399210, 0.50558788338163210, 0.50593042727957680, 0.50636621635706280, 0.50680168038481900, 0.50714363038651300, 0.50723681956142340, 0.50757854727203570, 0.50767163408564020, 0.50801313961249530, 0.50844740760705560, 0.50888135145506400, 0.50922226426631930, 0.50931497135605930, 0.50965566235818480, 0.50974826750977450, 0.51008873681105540, 0.51052148782504700, 0.51095391560045430, 0.51138602033775670, 0.51172567679514090, 0.51181780223761780, 0.51215723748170610, 0.51224926150089250, 0.51258847564108830, 0.51301939147450330, 0.51344998518334250, 0.51388025696916880, 0.51431020703373410, 0.51464838980045620, 0.51473983557895300, 0.51507779784526620, 0.51516914280692300, 0.51550688468350170, 0.51559812891989680, 0.51593565051761260, 0.51636409555020430, 0.51679221998406000, 0.51722002402213060, 0.51764750786751540, 0.51807467172351610, 0.51850151579356150, 0.51892804028123400, 0.51926387555551370, 0.51935424539031940, 0.51968986133442370, 0.51978013132473680, 0.52011552805125830, 0.52020569828855890, 0.52054087591026080, 0.52063094648601580, 0.52096590511584490, 0.52105587612151230, 0.52139061587257260, 0.52148048739959330, 0.52181500838514940, 0.52190478052494880, 0.52223908285839420, 0.52232875570237350, 0.52266283949740410, 0.52275241313698700, 0.52308627850731260, 0.52317575303386660, 0.52350940009340800};
                break;
            case 13:
                halfErrorTheta = {0.00000000000000000, 0.00004468429358170, 0.00021147162845303, 0.00025618066961732, 0.00042302256443021, 0.00046775636455978, 0.00063465283343478, 0.00067941140398604, 0.00084636246130420, 0.00089114581366779, 0.00105815147355149, 0.00110295961916736, 0.00127001989590827, 0.00131485284618322, 0.00148196775393750, 0.00152682552030645, 0.00169399507332038, 0.00173887766722084, 0.00190610187973283, 0.00195100931256242, 0.00211828819865819, 0.00216322048186692, 0.00233055405580329, 0.00237551120080951, 0.00254289947671788, 0.00258788149494918, 0.00275532448698061, 0.00280033138987262, 0.00296782911219042, 0.00301286091116738, 0.00318041337788395, 0.00322547008437761, 0.00339307730961858, 0.00360582093294803, 0.00381864427340943, 0.00403154735652185, 0.00424453020779105, 0.00445759285273501, 0.00467073531683769, 0.00488395762559455, 0.00509725980446707, 0.00531064187894834, 0.00552410387446234, 0.00569229635960239, 0.00573764581646984, 0.00590589322167485, 0.00595126773041167, 0.00611957006963031, 0.00616496964168793, 0.00633332692893090, 0.00637875157574600, 0.00654716382495918, 0.00676108078310145, 0.00697507782874810, 0.00718915498728183, 0.00740331228405366, 0.00761754974441412, 0.00783186739371638, 0.00800064667837713, 0.00804626525727929, 0.00821509960810420, 0.00826074336042982, 0.00842963279127854, 0.00847530172847660, 0.00864424625320940, 0.00885894001917272, 0.00907371411445384, 0.00928856856431194, 0.00950350339401322, 0.00967270545318263, 0.00971851862879351, 0.00988777585761544, 0.00993361429389223, 0.01010292670614042, 0.01014879041453418, 0.01031815802397605, 0.01053346983630758, 0.01074886216833652, 0.01096433504524505, 0.01113390539167444, 0.01117988849219122, 0.01134951409735347, 0.01139552253433831, 0.01156520341192539, 0.01161123719683042, 0.01178097336052695, 0.01199682396827312, 0.01221275526028398, 0.01242876726165749, 0.01259870647045245, 0.01264485999747664, 0.01281485455352549, 0.01286103349282545, 0.01303108340974703, 0.01324739306415805, 0.01346378354181101, 0.01368025486772666, 0.01385050808846501, 0.01389680706693595, 0.01406711570934464, 0.01428380424205740, 0.01450057371159194, 0.01471742414292740, 0.01488793629927098, 0.01493435556101467, 0.01510492319954212, 0.01532199112500002, 0.01553914010056776, 0.01575637015115758, 0.01592714151260683, 0.01597368130167319, 0.01614450820552668, 0.01636195603668422, 0.01657948503093937, 0.01675046027660387, 0.01679709521314530, 0.01696812604775898, 0.01701478660813984, 0.01718587304508411, 0.01740370129339428, 0.01762161081748065, 0.01779284574323720, 0.01783960164214822, 0.01801089221653701, 0.01822902002850792, 0.01844722920389233, 0.01861866838041244, 0.01866551976743665, 0.01883701463871738, 0.01905544232317281, 0.01927395145847911, 0.01944559504465677, 0.01949254206932806, 0.01966424139619367, 0.01988296926116135, 0.02010177866421530, 0.02027362681818455, 0.02032066962998792, 0.02049257357038220, 0.02071160192309174, 0.02093071190090980, 0.02110276478005671, 0.02114990352842608, 0.02132201223953529, 0.02154134138639553, 0.02171354328311427, 0.02176075224518836, 0.02193301000613060, 0.02215255847868946, 0.02237218872529337, 0.02254459561446361, 0.02259190077044090, 0.02276436356903100, 0.02298421335964216, 0.02315676945511993, 0.02320414501075724, 0.02337675704765958, 0.02359682653812594, 0.02376953191766651, 0.02381697795093008, 0.02398973930379211, 0.02421002864960428, 0.02443039997947867, 0.02460331072562787, 0.02482382008193178, 0.02504441148389285, 0.02521747170034052, 0.02526508495583395, 0.02543820122192069, 0.02565901285063997, 0.02583222261406561, 0.02587990661077115, 0.02605317245535622, 0.02627420446513626, 0.02644756385189879, 0.02649531866764232, 0.02666873416696785, 0.02688998671175788, 0.02706349579788668, 0.02728488674044027, 0.02750635997382256, 0.02768001883502019, 0.02790163055840321, 0.02807538307662515, 0.02812332463359301, 0.02829713334523250, 0.02851896600241918, 0.02869286841514035, 0.02874088107226806, 0.02891483970938248, 0.02913689345297938, 0.02931094583501479, 0.02935902966995950, 0.02953313830725561, 0.02975541328948961, 0.02992961571532848, 0.03015202951755507, 0.03032632575722932, 0.03037452589028727, 0.03054887843407652, 0.03077151371789389, 0.03094596011877399, 0.03116873436814806, 0.03134327465117945, 0.03139159128478772, 0.03156618792046634, 0.03178918389334057, 0.03196387445406185, 0.03218700953737068, 0.03236179404795178, 0.03241022738434543, 0.03258506829577676, 0.03280842534344426, 0.03298336024726142, 0.03320685654954691, 0.03338188547032361, 0.03343043571153055, 0.03360552108103403, 0.03378064404325591, 0.03382923958747544, 0.03400441901609270, 0.03422827692063231, 0.03440355043269965, 0.03462754778887060, 0.03480291540862690, 0.03485162813628389, 0.03502705226984522, 0.03520251402143637, 0.03525127215813368, 0.03542679044101504, 0.03565114992342592, 0.03582676237962162, 0.03605126150929077, 0.03622696816270014, 0.03645160699265706, 0.03662740786708083, 0.03685218645023227, 0.03702808156937516, 0.03707704822660812, 0.03725299995852284, 0.03742898934599252, 0.03747800157638671, 0.03765404759381899, 0.03783013127312382, 0.03787918910579418, 0.03805532943220100, 0.03828061089079635, 0.03845684554953319, 0.03868226700714304, 0.03885859602146974, 0.03908415753037450, 0.03926058092345061, 0.03948628253581118, 0.03966280033069519, 0.03988864209856200, 0.04006525431821751, 0.04029123629351819, 0.04046794296080453, 0.04069406519535216, 0.04087086633303053, 0.04109712887852269, 0.04127402450925518, 0.04150042741726744, 0.04167741756361292, 0.04190396088560876, 0.04208104557002415, 0.04230772935734051, 0.04248490860218595, 0.04266212558118593, 0.04271173290604636, 0.04288900673357623, 0.04306631830098865, 0.04311597160508322, 0.04329334003745100, 0.04347074621538344, 0.04352044552758664, 0.04369790858684447, 0.04387540939729914, 0.04410271245456646, 0.04428030791944829, 0.04450775171320395, 0.04468544185431325, 0.04491302643511870, 0.04509081127415225, 0.04526863388180305, 0.04531853669244913, 0.04549641625099826, 0.04567433358359279, 0.04572428255710537, 0.04590225685666019, 0.04608026893564021, 0.04630833316271744, 0.04648644000941915, 0.04671464524052269, 0.04689284687618089, 0.04707108630258535, 0.04712119316119836, 0.04729948960694067, 0.04747782384864648, 0.04770636827249115, 0.04788479735047412, 0.04811348294338927, 0.04829200687851794, 0.04847056862053240, 0.04852083368996365, 0.04869945250300214, 0.04887810912797962, 0.04910713429391730, 0.04928588582246608, 0.04946467516853629, 0.04951505232101975, 0.04969389877364331, 0.04987278304872397, 0.05010214805092799, 0.05028112727536397, 0.05046014432766977, 0.05051063372349879, 0.05068970791753353, 0.05086881994425290, 0.05109852504407081, 0.05127773206528845, 0.05145697692443274, 0.05168688075926720, 0.05186622063758259, 0.05204559835896512, 0.05209626609444637, 0.05227570101175179, 0.05245517377674950, 0.05268541811484751, 0.05286498594312237, 0.05304459162405838, 0.05327503492564409, 0.05345473569391225, 0.05363447431970667, 0.05368532079163188, 0.05386511666662718, 0.05404495040358073, 0.05422482200282285, 0.05427573460916852, 0.05445566347651717, 0.05463563021051419, 0.05481563481145718, 0.05486661360512644, 0.05504667549295171, 0.05522677525201544, 0.05540691288257672, 0.05545795791639907, 0.05563815285249204, 0.05581838566430402, 0.05604976767879207, 0.05623009569060363, 0.05641046158251172, 0.05659086535471474, 0.05664204302702437, 0.05682250414166528, 0.05700300314067711, 0.05718354002422532, 0.05723478409471678, 0.05741537833896158, 0.05759601047174315, 0.05777668049319795, 0.05782799101439260, 0.05800871841467123, 0.05818948370755116, 0.05837028689313323, 0.05842166391747464, 0.05860252449987570, 0.05878342297883483, 0.05896435935441982, 0.05919679672454104, 0.05937782841521802, 0.05955889800634093, 0.05974000549793786, 0.05979153521752686, 0.05997270014521482, 0.06015390297706102, 0.06033514371306036, 0.06038674010656957, 0.06056803829621540, 0.06074937439362538, 0.06093074839875980, 0.06116384299449102, 0.06134531238195644, 0.06152681968061087, 0.06170836489037361, 0.06194171706684751, 0.06212335768305586, 0.06230503621369826, 0.06248675265864824, 0.06253858857196062, 0.06272036252940731, 0.06290217440450336, 0.06308402419708985, 0.06326591190699984, 0.06331783434183457, 0.06349977958460801, 0.06368176274794500, 0.06386378383164742, 0.06409785187468684, 0.06427996843153667, 0.06446212291168290, 0.06464431531488120, 0.06487864136703463, 0.06506092926591950, 0.06524325509064552, 0.06542561884092272, 0.06560802051645633, 0.06566020301201902, 0.06584266228010073, 0.06602515947638077, 0.06620769460052616, 0.06639026765219689, 0.06644253699939205, 0.06662516766303272, 0.06680783625704050, 0.06699054278103961, 0.06717328723464461, 0.06740844560025510, 0.06759128561736157, 0.06777416356639483, 0.06795707944692548, 0.06814003325851179, 0.06819249627388362, 0.06837550773865075, 0.06855855713709098, 0.06874164446873081, 0.06892476973308442, 0.06910793292965436, 0.06916050279877166, 0.06934372367018148, 0.06952698247630142, 0.06971027921660101, 0.06989361389053967, 0.07007698649756743, 0.07012966333925395, 0.07031309364240901, 0.07049656188101833, 0.07068006805449785, 0.07086361216225173, 0.07104719420367235, 0.07109997813634404, 0.07128361789480620, 0.07146729558917633, 0.07165101121881392, 0.07183476478306645, 0.07201855628127135, 0.07225529665872350, 0.07243918383057721, 0.07262310893779982, 0.07280707197968500, 0.07299107295551430, 0.07317511186455872, 0.07341222682684103, 0.07359636143152221, 0.07378053397061470, 0.07396474444334690, 0.07414899284893278, 0.07433327918657678, 0.07451760345547420, 0.07457076891181527, 0.07475515096612568, 0.07493957095347128, 0.07512402887301146, 0.07530852472389493, 0.07549305850525920, 0.07567763021623113, 0.07591555268630616, 0.07610022013563831, 0.07628492551529719, 0.07646966882436592, 0.07665445006191240, 0.07683926922699852, 0.07702412631866955, 0.07720902133596594, 0.07726248174970197, 0.07744743460012380, 0.07763242537759525, 0.07781745408111735, 0.07800252070968141, 0.07818762526226747, 0.07837276773784556, 0.07855794813537615, 0.07874316645380681, 0.07879679459402624, 0.07898207077062808, 0.07916738486934792, 0.07935273688909621, 0.07953812682877683, 0.07972355468727834, 0.07990902046348208, 0.08009452415625520, 0.08028006576445700, 0.08046564528693230, 0.08070509879147050, 0.08089077411362250, 0.08107648734984440, 0.08126223849893740, 0.08144802755968900, 0.08163385453087840, 0.08181971941127200, 0.08200562219962580, 0.08219156289468530, 0.08237754149518400, 0.08256355799984360, 0.08274961240737890, 0.08280367680764440, 0.08298978913061940, 0.08317593935714350, 0.08336212748589070, 0.08354835351552550, 0.08373461744470270, 0.08392091927206280, 0.08410725899623800, 0.08429363661584840, 0.08448005212950300, 0.08466650553579950, 0.08485299683332460, 0.08503952602065490, 0.08522609309635360, 0.08541269805897380, 0.08546705142127350, 0.08559934090706070, 0.08565371433176580, 0.08584041512948840, 0.08602715381295800, 0.08621393038068030, 0.08640074483114970, 0.08658759716284880, 0.08677448737424890, 0.08696141546381150, 0.08714838142998510, 0.08733538527120870, 0.08752242698590910, 0.08770950657250230, 0.08789662402939090, 0.08808377935497030, 0.08827097254762130, 0.08845820360571420, 0.08864547252760890, 0.08883277931165470, 0.08902012395618590, 0.08920750645953020, 0.08939492681999990, 0.08958238503589890, 0.08976988110551860, 0.08995741502714050, 0.09014498679903040, 0.09033259641944920, 0.09052024388663970, 0.09070792919883960, 0.09089565235427010, 0.09108341335114480, 0.09127121218766230, 0.09145904886201520, 0.09164692337237810, 0.09183483571691770, 0.09202278589379080, 0.09221077390113990, 0.09239879973709690, 0.09258686339978270, 0.09277496488730650, 0.09296310419776540, 0.09315128132924630, 0.09333949627982280, 0.09352774904755930, 0.09371603963050750, 0.09390436802670830, 0.09409273423418850, 0.09428113825096610, 0.09446958007504750, 0.09465805970442650, 0.09484657713708560, 0.09503513237099430, 0.09522372540411520, 0.09541235623439320, 0.09560102485976610, 0.09578973127815870, 0.09597847548748310, 0.09616725748564140, 0.09635607727052400, 0.09654493484000860, 0.09673383019196170, 0.09692276332423830, 0.09711173423468130, 0.09730074292112420, 0.09748978938138520, 0.09767887361327330, 0.09786799561458530, 0.09805715538310550, 0.09819062811929350, 0.09824635291660810, 0.09837984314129470, 0.09856909592080080, 0.09875838645555350, 0.09894771474328290, 0.09913708078170860, 0.09932648456853630, 0.09951592610146160, 0.09970540537816710, 0.09989492239632460, 0.10008447715359360, 0.10027406964762250, 0.10046369987604710, 0.10065336783649180, 0.10084307352656930, 0.10103281694388000, 0.10116655725475320, 0.10135635580050970, 0.10154619206330300, 0.10173606604068950, 0.10192597773021550, 0.10211592712941300, 0.10230591423580570, 0.10249593904690180, 0.10268600156019990, 0.10287610177318590, 0.10306623968333350, 0.10325641528810600, 0.10339035247870080, 0.10358058311422320, 0.10377085143380360, 0.10396115743485890, 0.10415150111479610, 0.10434188247100950, 0.10453230150088240, 0.10472275820178560, 0.10491325257107620, 0.10510378460610210, 0.10523788332956670, 0.10542847031138340, 0.10561909494806120, 0.10580975723689980, 0.10600045717519100, 0.10619119476021390, 0.10638196998923410, 0.10657278285950580, 0.10670700809090810, 0.10689787583889720, 0.10708878121701660, 0.10727972422247640, 0.10747070485247590, 0.10766172310420020, 0.10785277897482310, 0.10804387246150700, 0.10817822384427340, 0.10836937213842410, 0.10856055803726650, 0.10875178153791960, 0.10894304263748740, 0.10913434133306380, 0.10932567762172970, 0.10946013764120650, 0.10965152867456130, 0.10984295728942190, 0.11003442348282400, 0.11022592725179250, 0.11041746859333890, 0.11060904750446260, 0.11074361588289270, 0.11093524947503460, 0.11112692062495430, 0.11131862932960630, 0.11151037558593450, 0.11170215939086780, 0.11189398074132510, 0.11202865719861880, 0.11222053316552660, 0.11241244666594210, 0.11260439769673770, 0.11279638625477430, 0.11298841233690070, 0.11312317955153520, 0.11331526019368290, 0.11350737834771990, 0.11369953401044790, 0.11389172717865770, 0.11402656793232360, 0.11421881561260950, 0.11441110078602410, 0.11460342344931280, 0.11479578359920960, 0.11498818123243440, 0.11512311236040900, 0.11531556444809470, 0.11550805400656960, 0.11570058103250880, 0.11589314552257530, 0.11602814986899820, 0.11622076876460170, 0.11641342511164010, 0.11660611890672900, 0.11679885014647600, 0.11693392756450630, 0.11712671316042600, 0.11731953618815400, 0.11751239664425120, 0.11770529452526560, 0.11784044486727060, 0.11803339705464750, 0.11822638665393970, 0.11841941366164790, 0.11861247807426230, 0.11874770119181390, 0.11894081986053730, 0.11913397592100940, 0.11932716936967540, 0.11965569594683890, 0.11984898098553840, 0.12004230339555000, 0.12023566317325920, 0.12037101459343530, 0.12056442853521510, 0.12075787983125990, 0.12095136847790690, 0.12108677547871100, 0.12128031824781490, 0.12147389835396740, 0.12166751579346180, 0.12186117056257620, 0.12199664979890030, 0.12219035863862650, 0.12238410479426330, 0.12257788826204500, 0.12271342286181990, 0.12290726035797280, 0.12310113515243730, 0.12329504724140090, 0.12343063710770460, 0.12362460318252420, 0.12381860653788740, 0.12401264716993550, 0.12414829220546400, 0.12434238678057690, 0.12453651861829660, 0.12473068771471750, 0.12486638782178510, 0.12506061081820340, 0.12525487105912210, 0.12544916854058780, 0.12558492362112910, 0.12577927495924870, 0.12597366352359180, 0.12630389926572480, 0.12649837886532580, 0.12669289567270300, 0.12682874382856820, 0.12702331441557200, 0.12721792219581540, 0.12741256716521880, 0.12754847002350160, 0.12774316872843210, 0.12793790460786140, 0.12807384553767330, 0.12826863511887620, 0.12846346185982880, 0.12865832575636870, 0.12879432121485970, 0.12898923876859540, 0.12918419346304440, 0.12932022686348070, 0.12951523518102490, 0.12971028062431780, 0.12990536318911740, 0.13004145094336550, 0.13023658708620200, 0.13043176033545540, 0.13056788590124970, 0.13076311269409350, 0.13095837657817550, 0.13128985729277780, 0.13148521176182350, 0.13168060330248010, 0.13181682072642170, 0.13201226573033280, 0.13220774779045890, 0.13234400283857740, 0.13253953832701700, 0.13273511085618650, 0.13287140347218210, 0.13306702939457680, 0.13326269234212530, 0.13339902246955510, 0.13359473877509360, 0.13379049209012060, 0.13412266631003450, 0.13431850994140010, 0.13465081184024700, 0.13484674573657520, 0.13517917520596130, 0.13537519931563670, 0.13557126038264190, 0.13570775624678820, 0.13590387051795880, 0.13623655480172170, 0.13643275918229700, 0.13676557070913510, 0.13696186514678660, 0.13729480380678290, 0.13749118824894290, 0.13762781641881700, 0.13782425393180080, 0.13802072832566100, 0.13815739349257490, 0.13835392092070160, 0.13855048521321770, 0.13868718731930230, 0.13888380460937900, 0.13908045874726540, 0.13921719773451110, 0.13941390483310550, 0.13974742457309290, 0.13994422142653200, 0.14008101791741120, 0.14027786766931560, 0.14047475422368890, 0.14061158744122800, 0.14080852685682570, 0.14100550305798110, 0.14114237294365620, 0.14133940196864830, 0.14167337425733800, 0.14187049283718470, 0.14200741987371800, 0.14220459121429290, 0.14240179929421340, 0.14253876284304140, 0.14273602364591560, 0.14287300767286500, 0.14307032117297310, 0.14326767138297740, 0.14340469182467930, 0.14360209469390330, 0.14393659105281440, 0.14413408323559440, 0.14427116040877120, 0.14446870518665050, 0.14466628662718800, 0.14480340005771020, 0.14500103405494370, 0.14513816779760460, 0.14533585432542740, 0.14553357748582480, 0.14567074738732410, 0.14586852303966870, 0.14600571318923250, 0.14620354130727090, 0.14640140602755610, 0.14653863223708430, 0.14673654938418020, 0.14687379577747580, 0.14707176532498170, 0.14740705379818290, 0.14760511227865060, 0.14774241475191860, 0.14794052556712370, 0.14807784813423530, 0.14827601125757320, 0.14847421090901310, 0.14861156929790260, 0.14880982121801840, 0.14894719963592670, 0.14914550379796730, 0.14948125859653010, 0.14967965145774740, 0.14981708556129120, 0.15001553059783390, 0.15015298463974600, 0.15035148182465910, 0.15068750508557360, 0.15088609083139770, 0.15102360032784240, 0.15122223815490090, 0.15135976749864300, 0.15155845737977470, 0.15169600654506310, 0.15189474845305170, 0.15223111132167720, 0.15242994161064580, 0.15256754593250840, 0.15276642818051210, 0.15290405223231650, 0.15310298641193230, 0.15324063016778240, 0.15343961625153380, 0.15377631764585340, 0.15397539192868450, 0.15411309054134290, 0.15431221665980010, 0.15444993488436420, 0.15464911281076520, 0.15478685062119330, 0.15498608032779910, 0.15512383769801770, 0.15532311915703320, 0.15546089606093810, 0.15566022924451130, 0.15599741053618910, 0.15619683165207420, 0.15633466297793590, 0.15653413574888430, 0.15667198651553220, 0.15687151091348850, 0.15700938109467170, 0.15720895709152230, 0.15734684666096010, 0.15754647422853470, 0.15768438315991530, 0.15788406226998830, 0.15802199053696840, 0.15822172116125750, 0.15835966873746390, 0.15855945084762870, 0.15869741770665400, 0.15889725127430140, 0.15903523738970990, 0.15923512238638630, 0.15957306412890890, 0.15991107644680440, 0.16024915928492260, 0.16058731258802480, 0.16092553630078510, 0.16126383036779060, 0.16160219473353900, 0.16194062934244440, 0.16227913413882880, 0.16261770906692990, 0.16295635407089680, 0.16329506909479110, 0.16343330312334710, 0.16363385408258830, 0.16377210699416130, 0.16397270897817540, 0.16411098074586450, 0.16431163372535130, 0.16444992432222540, 0.16465062826782870, 0.16478893766692520, 0.16498969254923360, 0.16512802072355840, 0.16532882651310280, 0.16546717343563250, 0.16566803010288680, 0.16580639574656610, 0.16600730326194870, 0.16614568759969190, 0.16648504893825520, 0.16682447970541380, 0.16696290500052350, 0.16716397984423780, 0.16730242373981970, 0.16750354929771080, 0.16764201176654620, 0.16784318800872850, 0.16798166902356760, 0.16818289592010000, 0.16832139545366290, 0.16866119099952310, 0.16900105560375160, 0.16913959566518600, 0.16934098920886530, 0.16947954769478470, 0.16968099175729370, 0.16981956864028560, 0.17002106319137910, 0.17015965844400020, 0.17049981704815410, 0.17063843416120780, 0.17084004439488350, 0.17097867981033110, 0.17118034042624000, 0.17131899411653600, 0.17152070508418740, 0.17165937702175580, 0.17199982846783780, 0.17213852208905450, 0.17234034839653990, 0.17247906019748620, 0.17268093674953470, 0.17281966670253380, 0.17316034154575160, 0.17329909304492910, 0.17350108466860850, 0.17363985425205970, 0.17384189601248500, 0.17398068365243130, 0.17432158118730940, 0.17446039023551970, 0.17466254679786920, 0.17480137383456120, 0.17514242542249640, 0.17528127376939180, 0.17548354494029900, 0.17562241120749750, 0.17582473232885500, 0.17596361648840720, 0.17630488955288980, 0.17644379488397670, 0.17664623034162890, 0.17678515349665710, 0.17712657974613970, 0.17726552397411760, 0.17746807357290340, 0.17760703555624700, 0.17794861462793050, 0.17808759758542240, 0.17829026112944400, 0.17842926177356360, 0.17877099330353320, 0.17891001482278580, 0.17911279211540440, 0.17925183125238410, 0.17959371487560940, 0.17973277478849160, 0.17993566563233230, 0.18007474309387800, 0.18041677844421510, 0.18055587658222030, 0.18075888077917000, 0.18089799639661330, 0.18103711515236910, 0.18124018310680510, 0.18137931930105120, 0.18172159025655740, 0.18186074696877720, 0.18206392795823570, 0.18220310203946640, 0.18234227921076140, 0.18254552376708160, 0.18268471826629600, 0.18302722388935400, 0.18316643874753300, 0.18336979601896540, 0.18350902813533300, 0.18364826329339000, 0.18385168394001180, 0.18399093631502200, 0.18433367566370470, 0.18447294823815120, 0.18481577099956670, 0.18495506371417540, 0.18515865993664490, 0.18529796975684580, 0.18543728255227500, 0.18564094188492430, 0.18578027174451540, 0.18612332693175520, 0.18626267677127600, 0.18660581488563140, 0.18674518464555310, 0.18708840555477250, 0.18722779517550010, 0.18743169221575800, 0.18757109874712660, 0.18771050816899690, 0.18791446797953120, 0.18805389427036800, 0.18819332343365100, 0.18839734594137500, 0.18853679193189850, 0.18867624077679720, 0.18888032590848550, 0.18901979153884830, 0.18915926000550000, 0.18936340768778820, 0.18950289289807560, 0.18964238092654920, 0.18984659108593630, 0.18998609581616690, 0.19032987590931270, 0.19046940009943930, 0.19060892707150170, 0.19081326196402900, 0.19095280555393720, 0.19109235190763280, 0.19129674905592560, 0.19143631198543570, 0.19157587766056890, 0.19178033699057370, 0.19191991919943970, 0.19205950413574900, 0.19226402557327490, 0.19240362700118400, 0.19254323113834230, 0.19274781460906090, 0.19288743519563540, 0.19302705847324860, 0.19337134358749050, 0.19351098594509950, 0.19385535198117740, 0.19399501335825810, 0.19433946018085650, 0.19447914051681850, 0.19461882348372120, 0.19482366799041990, 0.19496336722460840, 0.19510306907146280, 0.19530797521349230, 0.19544769328518630, 0.19558741395125700, 0.19593211850184520, 0.19607185792633140, 0.19641664267761060, 0.19655640079964710, 0.19669616147404720, 0.19690126561524200, 0.19704104237389810, 0.19718082166658070, 0.19752578245151380, 0.19766558030146840, 0.19801062083465680, 0.19815043718080960, 0.19829025601886870, 0.19863539210643790, 0.19877522936117090, 0.19912044487992240, 0.19926030049011150, 0.19940015855001580, 0.19974546920693160, 0.19988534554259280, 0.20023073531260800, 0.20037062986266540, 0.20051052682017300, 0.20085601131088430, 0.20099592640291370, 0.20113584387852700, 0.20134148968763650, 0.20148142285268560, 0.20162135838285020, 0.20196701596954980, 0.20210696949268590, 0.20224692535703080, 0.20259267700776880, 0.20273265078494180, 0.20287262687939660, 0.20307848072757450, 0.20321847235585450, 0.20335846628289800, 0.20370438986891800, 0.20384440156675300, 0.20398441553938690, 0.20433043252978850, 0.20447046419280280, 0.20461049810662930, 0.20495660826202780, 0.20509665978573040, 0.20523671353623800, 0.20558291661687060, 0.20572298789665620, 0.20586306137921910, 0.20620935714494580, 0.20634944807609400, 0.20648954118597170, 0.20683592939627640, 0.20697603987395440, 0.20711615250629210, 0.20746263292028400, 0.20760276283954450, 0.20774289488937580, 0.20808946726578690, 0.20822961652157040, 0.20836976788381560, 0.20871643198100550, 0.20885660046813940, 0.20899677103760550, 0.20913694368394160, 0.20934352661356170, 0.20948371422676180, 0.20962390389814440, 0.20976409562224450, 0.21011095734435150, 0.21025116601223470, 0.21039137670866200, 0.21073832936722800, 0.21087855692608410, 0.21101878648929260, 0.21115901805138040, 0.21150607618531100, 0.21164632450964210, 0.21178657480863700, 0.21213372333494050, 0.21227399031462700, 0.21241425924474160, 0.21255453011980610, 0.21290178344857490, 0.21304207090391280, 0.21318236027994240, 0.21352970345522800, 0.21367000932978240, 0.21381031710075110, 0.21395062676264830, 0.21429807406539920, 0.21443840012517260, 0.21457872805157450, 0.21471905783911610, 0.21506660889556420, 0.21520695498020940, 0.21534730290167170, 0.21548765265445880, 0.21583530709022130, 0.21597567303921610, 0.21611604079519130, 0.21625641035265060, 0.21660416779273410, 0.21674455344538280, 0.21688494087514950, 0.21702533007653440, 0.21737319014533360, 0.21751359534076750, 0.21765400228343140, 0.21779441096782290, 0.21814237328912700, 0.21828279786630570, 0.21842322416080120, 0.21856365216710810, 0.21891171636410000, 0.21905216016181150, 0.21919260564690380, 0.21933305281386520, 0.21982168136598820, 0.21996214588026970, 0.22010261204645550, 0.22024307985903130, 0.22059136061642720, 0.22073184399832440, 0.22087232900213530, 0.22101281562234360, 0.22150169913738890, 0.22164220281705950, 0.22178270808310980, 0.22192321493001800, 0.22227171043268930, 0.22241223262628720, 0.22255275637622280, 0.22269328167697220, 0.22283380852301090, 0.22318241756378560, 0.22332295963548550, 0.22346350322793070, 0.22360404833559340, 0.22374459495294580, 0.22409331699361720, 0.22423387871544920, 0.22437444192240390, 0.22451500660895000, 0.22465557276955610, 0.22514498841475690, 0.22528557100797830, 0.22542615504513470, 0.22556674052069260, 0.22570732742911620, 0.22605628728011340, 0.22619688903111830, 0.22633749219037320, 0.22647809675233970, 0.22661870271148030, 0.22710839453643000, 0.22724901658903190, 0.22738964000862870, 0.22753026478967660, 0.22767089092663490, 0.22802008606667530, 0.22816072678363770, 0.22830136883184740, 0.22844201220575960, 0.22858265689982880, 0.22872330290850940, 0.22907262131488480, 0.22921328176245970, 0.22935394349995830, 0.22949460652183240, 0.22963527082253340, 0.22977593639651190, 0.23026605721068930, 0.23040673833083190, 0.23054742069398890, 0.23068810429460800, 0.23082878912713670, 0.23131905086321650, 0.23145975105903720, 0.23160045245647670, 0.23174115504997960, 0.23188185883399000, 0.23202256380295170, 0.23251297941627230, 0.23265369954067670, 0.23279442081971170, 0.23293514324781890, 0.23307586681943890, 0.23321659152901240, 0.23370715967512930, 0.23384789933203280, 0.23398864009654010, 0.23412938196308860, 0.23427012492611560, 0.23441086898005780, 0.23455161411935200, 0.23504234710526690, 0.23518310695870590, 0.23532386786711680, 0.23546462982493330, 0.23560539282658810, 0.23574615686651570, 0.23588692193914920, 0.23637781807374650, 0.23651859762703160, 0.23665937818261090, 0.23680015973491530, 0.23694094227837520, 0.23708172580742000, 0.23722251031647960, 0.23785436666173140, 0.23799516636722040, 0.23813596701671060, 0.23827676860462850, 0.23841757112540030, 0.23855837457345330, 0.23869917894321190, 0.23933122773922970, 0.23947204698808970, 0.23961286712260700, 0.23975368813720540, 0.23989451002630760, 0.24003533278433760, 0.24017615640571690, 0.24031698088486830, 0.24094923314377340, 0.24109007215379670, 0.24123091198550650, 0.24137175263332290, 0.24151259409166560, 0.24165343635495380, 0.24179427941760660, 0.24193512327404330, 0.24207596791868260, 0.24270843379446490, 0.24284929259075930, 0.24299015213913310, 0.24313101243400270, 0.24327187346978370, 0.24341273524089230, 0.24355359774174410, 0.24369446096675460, 0.24383532491033980, 0.24460887827822080, 0.24474975667615690, 0.24489063575092040, 0.24503151549692450, 0.24517239590858130, 0.24531327698030340, 0.24545415870650310, 0.24559504108159300, 0.24573592409998470, 0.24587680775609030, 0.24601769204432150, 0.24679150938502870, 0.24693240756908610, 0.24707330634347720, 0.24721420570261090, 0.24735510564089630, 0.24749600615274280, 0.24763690723255910, 0.24777780887475380, 0.24791871107373570, 0.24805961382391330, 0.24820051711969520, 0.24834142095548930, 0.24939734255418280, 0.24953826068104470, 0.24967917929489350, 0.24982009839013500, 0.24996101796117500, 0.25010193800241930, 0.25024285850827270, 0.25038377947314090, 0.25052470089142880, 0.25066562275754140, 0.25080654506588420, 0.25094746781086160, 0.25108839098687890, 0.25122931458834030, 0.25137023860965080, 0.25256745841638300, 0.25270839607734530, 0.25284933409947470, 0.25299027247717380, 0.25313121120484490, 0.25327215027688990, 0.25341308968771100, 0.25355402943171000, 0.25369496950328880, 0.25383590989684960, 0.25397685060679400, 0.25411779162752380, 0.25425873295344040, 0.25439967457894540, 0.25454061649843990, 0.25468155870632580, 0.25482250119700420, 0.25496344396487610, 0.25510438700434320, 0.25524533030980650, 0.25538627387566680, 0.25552721769632540, 0.25566816176618250, 0.25785254438866240, 0.25799350169552230, 0.25813445915362100, 0.25827541675735750, 0.25841637450113070, 0.25855733237933930, 0.25869829038638190, 0.25883924851665730, 0.25898020676456470, 0.25912116512450220, 0.25926212359086840, 0.25940308215806210, 0.25954404082048250, 0.25968499957252740, 0.25982595840859540, 0.25996691732308590, 0.26010787631039590, 0.26024883536492550, 0.26038979448107200, 0.26053075365323410, 0.26067171287581080, 0.26081267214320020, 0.26095363144980070, 0.26109459079001110, 0.26123555015822910, 0.26137650954885380, 0.26151746895628270, 0.26151746895628270, 0.26165842837491530, 0.26165842837491540, 0.26179938779914940, 0.26194034722338340, 0.26194034722338350, 0.26208130664201600, 0.26208130664201610, 0.26222226604944500, 0.26236322544006970, 0.26250418480828770, 0.26264514414849800, 0.26278610345509870, 0.26292706272248800, 0.26306802194506470, 0.26320898111722680, 0.26334994023337330, 0.26349089928790290, 0.26363185827521290, 0.26377281718970340, 0.26391377602577140, 0.26405473477781640, 0.26419569344023670, 0.26433665200743040, 0.26447761047379670, 0.26461856883373410, 0.26475952708164150, 0.26490048521191700, 0.26504144321895960, 0.26518240109716810, 0.26532335884094130, 0.26546431644467780, 0.26560527390277650, 0.26574623120963640, 0.26793061383211630, 0.26807155790197340, 0.26821250172263200, 0.26835344528849240, 0.26849438859395560, 0.26863533163342270, 0.26877627440129460, 0.26891721689197310, 0.26905815909985890, 0.26919910101935350, 0.26934004264485840, 0.26948098397077500, 0.26962192499150480, 0.26976286570144920, 0.26990380609501000, 0.27004474616658890, 0.27018568591058780, 0.27032662532140890, 0.27046756439345400, 0.27060850312112500, 0.27074944149882410, 0.27089037952095350, 0.27103131718191580, 0.27222853698864800, 0.27236946100995850, 0.27251038461141990, 0.27265130778743720, 0.27279223053241460, 0.27293315284075740, 0.27307407470687010, 0.27321499612515790, 0.27335591709002610, 0.27349683759587950, 0.27363775763712370, 0.27377867720816380, 0.27391959630340530, 0.27406051491725410, 0.27420143304411600, 0.27525735464280960, 0.27539825847860360, 0.27553916177438560, 0.27568006452456320, 0.27582096672354510, 0.27596186836573970, 0.27610276944555600, 0.27624366995740250, 0.27638456989568790, 0.27652546925482160, 0.27666636802921260, 0.27680726621327010, 0.27758108355397740, 0.27772196784220850, 0.27786285149831410, 0.27800373451670580, 0.27814461689179570, 0.27828549861799550, 0.27842637968971750, 0.27856726010137430, 0.27870813984737850, 0.27884901892214200, 0.27898989732007800, 0.27976345068795900, 0.27990431463154420, 0.28004517785655470, 0.28018604035740660, 0.28032690212851520, 0.28046776316429620, 0.28060862345916580, 0.28074948300753950, 0.28089034180383400, 0.28152280767961620, 0.28166365232425550, 0.28180449618069220, 0.28194533924334510, 0.28208618150663320, 0.28222702296497590, 0.28236786361279240, 0.28250870344450210, 0.28264954245452540, 0.28328179471343050, 0.28342261919258190, 0.28356344281396130, 0.28370426557199120, 0.28384508746109340, 0.28398590847569190, 0.28412672861020920, 0.28426754785906900, 0.28489959665508690, 0.28504040102484550, 0.28518120447289850, 0.28532200699367030, 0.28546280858158810, 0.28560360923107840, 0.28574440893656740, 0.28637626528181930, 0.28651704979087890, 0.28665783331992360, 0.28679861586338350, 0.28693939741568790, 0.28708017797126710, 0.28722095752455240, 0.28771185365914960, 0.28785261873178310, 0.28799338277171070, 0.28813414577336550, 0.28827490773118200, 0.28841566863959290, 0.28855642849303200, 0.28904716147894690, 0.28918790661824100, 0.28932865067218330, 0.28946939363521020, 0.28961013550175880, 0.28975087626626590, 0.28989161592316960, 0.29038218406928640, 0.29052290877885990, 0.29066363235048000, 0.29080435477858710, 0.29094507605762210, 0.29108579618202640, 0.29157621179534720, 0.29171691676430880, 0.29185762054831920, 0.29199832314182210, 0.29213902453926150, 0.29227972473508230, 0.29276998647116220, 0.29291067130369080, 0.29305135490430990, 0.29319203726746690, 0.29333271838760950, 0.29382283920178690, 0.29396350477576540, 0.29410416907646630, 0.29424483209834040, 0.29438549383583920, 0.29452615428341400, 0.29487547268978940, 0.29501611869847010, 0.29515676339253930, 0.29529740676645140, 0.29543804881466120, 0.29557868953162350, 0.29592788467166400, 0.29606851080862220, 0.29620913558967010, 0.29634975900926700, 0.29649038106186890, 0.29698007288681850, 0.29712067884595910, 0.29726128340792560, 0.29740188656718050, 0.29754248831818540, 0.29789144816918260, 0.29803203507760620, 0.29817262055316420, 0.29831320459032050, 0.29845378718354190, 0.29894320282874270, 0.29908376898934870, 0.29922433367589490, 0.29936489688284960, 0.29950545860468160, 0.29985418064535300, 0.29999472726270550, 0.30013527237036820, 0.30027581596281340, 0.30041635803451320, 0.30076496707528790, 0.30090549392132660, 0.30104601922207600, 0.30118654297201170, 0.30132706516560960, 0.30167556066828080, 0.30181606751518900, 0.30195657278123930, 0.30209707646090990, 0.30258595997595520, 0.30272644659616350, 0.30286693159997440, 0.30300741498187160, 0.30335569573926760, 0.30349616355184330, 0.30363662971802920, 0.30377709423231060, 0.30426572278443360, 0.30440616995139500, 0.30454661543648730, 0.30468705923419880, 0.30503512343119070, 0.30517555143749760, 0.30531597773199310, 0.30545640230917190, 0.30580436463047590, 0.30594477331486740, 0.30608518025753140, 0.30622558545296520, 0.30657344552176450, 0.30671383472314930, 0.30685422215291600, 0.30699460780556480, 0.30734236524564830, 0.30748273480310750, 0.30762310255908270, 0.30776346850807750, 0.30811112294384000, 0.30825147269662710, 0.30839182061808940, 0.30853216670273470, 0.30887971775918270, 0.30902004754672430, 0.30916037547312620, 0.30930070153289960, 0.30964814883565060, 0.30978845849754770, 0.30992876626851640, 0.31006907214307080, 0.31041641531835650, 0.31055670469438600, 0.31069699214972390, 0.31104424547849270, 0.31118451635355720, 0.31132478528367180, 0.31146505226335840, 0.31181220078966180, 0.31195245108865670, 0.31209269941298780, 0.31243975754691840, 0.31257998910900630, 0.31272021867221470, 0.31286044623107080, 0.31320739888963680, 0.31334760958606410, 0.31348781825394730, 0.31383467997605430, 0.31397487170015430, 0.31411506137153710, 0.31425524898473720, 0.31446183191435730, 0.31460200456069340, 0.31474217513015950, 0.31488234361729330, 0.31522900771448320, 0.31536915907672850, 0.31550930833251190, 0.31585588070892300, 0.31599601275875430, 0.31613614267801480, 0.31648262309200670, 0.31662273572434440, 0.31676284620202240, 0.31710923441232710, 0.31724932752220480, 0.31738941845335300, 0.31773571421907970, 0.31787578770164270, 0.31801585898142810, 0.31836206206206080, 0.31850211581256840, 0.31864216733627110, 0.31898827749166950, 0.31912831140549600, 0.31926834306851030, 0.31961436005891200, 0.31975437403154580, 0.31989438572938080, 0.32024030931540080, 0.32038030324244440, 0.32052029487072430, 0.32072614871890220, 0.32086612481335700, 0.32100609859053000, 0.32135185024126800, 0.32149180610561290, 0.32163175962874900, 0.32197741721544860, 0.32211735274561320, 0.32225728591066240, 0.32246293171977180, 0.32260284919538520, 0.32274276428741450, 0.32308824877812580, 0.32322814573563340, 0.32336804028569080, 0.32371343005570600, 0.32385330639136720, 0.32419861704828290, 0.32433847510818730, 0.32447833071837640, 0.32482354623712790, 0.32496338349186090, 0.32530851957943010, 0.32544833841748920, 0.32558815476364200, 0.32593319529683040, 0.32607299314678510, 0.32641795393171820, 0.32655773322440070, 0.32669750998305680, 0.32690261412425160, 0.32704237479865170, 0.32718213292068830, 0.32752691767196740, 0.32766665709645360, 0.32801136164704190, 0.32815108231311250, 0.32829080038480650, 0.32849570652683600, 0.32863540837369040, 0.32877510760787900, 0.32897995211457770, 0.32911963508148030, 0.32925931541744240, 0.32960376224004070, 0.32974342361712140, 0.33008778965319930, 0.33022743201080830, 0.33057171712505020, 0.33071134040266340, 0.33085096098923790, 0.33105554445995660, 0.33119514859711480, 0.33133475002502390, 0.33153927146254980, 0.33167885639885910, 0.33181843860772510, 0.33202289793772990, 0.33216246361286310, 0.33230202654237320, 0.33250642369066600, 0.33264597004436160, 0.33278551363426980, 0.33298984852679720, 0.33312937549885950, 0.33326889968898610, 0.33361267978213190, 0.33375218451236250, 0.33395639467174960, 0.33409588270022330, 0.33423536791051060, 0.33443951559279880, 0.33457898405945050, 0.33471844968981330, 0.33492253482150160, 0.33506198366640030, 0.33520142965692380, 0.33540545216464780, 0.33554488132793080, 0.33568430761876760, 0.33588826742930190, 0.33602767685117220, 0.33616708338254090, 0.33637098042279870, 0.33651037004352640, 0.33685359095274570, 0.33699296071266740, 0.33733609882702290, 0.33747544866654370, 0.33781850385378340, 0.33795783371337440, 0.33816149304602380, 0.33830080584145300, 0.33844011566165390, 0.33864371188412340, 0.33878300459873210, 0.33912582736014760, 0.33926509993459410, 0.33960783928327680, 0.33974709165828700, 0.33995051230490880, 0.34008974746296580, 0.34022897957933340, 0.34043233685076580, 0.34057155170894480, 0.34091405733200280, 0.34105325183121730, 0.34125649638753740, 0.34139567355883250, 0.34153484764006310, 0.34173802862952170, 0.34187718534174150, 0.34221945629724760, 0.34235859249149370, 0.34256166044592970, 0.34270077920168550, 0.34283989481912880, 0.34304289901607850, 0.34318199715408370, 0.34352403250442090, 0.34366310996596650, 0.34386600080980720, 0.34400506072268940, 0.34434694434591470, 0.34448598348289440, 0.34468876077551300, 0.34482778229476560, 0.34516951382473530, 0.34530851446885480, 0.34551117801287650, 0.34565016097036830, 0.34599174004205180, 0.34613070202539540, 0.34633325162418110, 0.34647219585215910, 0.34681362210164170, 0.34695254525666990, 0.34715498071432210, 0.34729388604540900, 0.34763515910989160, 0.34777404326944380, 0.34797636439080130, 0.34811523065799980, 0.34831750182890700, 0.34845635017580250, 0.34879740176373760, 0.34893622880042960, 0.34913838536277910, 0.34927719441098940, 0.34961809194586760, 0.34975687958581380, 0.34995892134623910, 0.35009769092969030, 0.35029968255336970, 0.35043843405254730, 0.35077910889576500, 0.35091783884876410, 0.35111971540081260, 0.35125842720175890, 0.35146025350924420, 0.35159894713046100, 0.35193939857654300, 0.35207807051411140, 0.35227978148176290, 0.35241843517205890, 0.35262009578796770, 0.35275873120341530, 0.35296034143709100, 0.35309895855014470, 0.35343911715429860, 0.35357771240691970, 0.35377920695801320, 0.35391778384100510, 0.35411922790351410, 0.35425778638943350, 0.35445917993311280, 0.35459771999454720, 0.35493758459877570, 0.35527738014463590, 0.35541587967819880, 0.35561710657473120, 0.35575558758957040, 0.35595676383175260, 0.35609522630058800, 0.35629635185847920, 0.35643479575406100, 0.35663587059777530, 0.35677429589288500, 0.35711372666004360, 0.35745308799860700, 0.35759147233635010, 0.35779237985173270, 0.35793074549541210, 0.35813160216266620, 0.35826994908519600, 0.35847075487474050, 0.35860908304906520, 0.35880983793137360, 0.35894814733047010, 0.35914885127607340, 0.35928714187294750, 0.35948779485243430, 0.35962606662012340, 0.35982666860413750, 0.35996492151571050, 0.36016547247495170, 0.36030370650350770, 0.36064242152740200, 0.36098106653136890, 0.36131964145947000, 0.36165814625585440, 0.36199658086475980, 0.36233494523050820, 0.36267323929751370, 0.36301146301027400, 0.36334961631337620, 0.36368769915149440, 0.36402571146938990, 0.36436365321191250, 0.36456353820858890, 0.36470152432399750, 0.36490135789164480, 0.36503932475067020, 0.36523910686083490, 0.36537705443704120, 0.36557678506133040, 0.36571471332831050, 0.36591439243838360, 0.36605230136976410, 0.36625192893733870, 0.36638981850677650, 0.36658939450362710, 0.36672726468481030, 0.36692678908276660, 0.36706463984941460, 0.36726411262036290, 0.36740194394622460, 0.36760136506210970, 0.36793854635378760, 0.36813787953736070, 0.36827565644126560, 0.36847493790028110, 0.36861269527049960, 0.36881192497710550, 0.36894966278753370, 0.36914884071393460, 0.36928655893849870, 0.36948568505695590, 0.36962338366961430, 0.36982245795244540, 0.37015915934676500, 0.37035814543051650, 0.37049578918636650, 0.37069472336598230, 0.37083234741778670, 0.37103122966579050, 0.37116883398765310, 0.37136766427662160, 0.37170402714524710, 0.37190276905323570, 0.37204031821852410, 0.37223900809965580, 0.37237653744339790, 0.37257517527045630, 0.37271268476690110, 0.37291127051272520, 0.37324729377363970, 0.37344579095855280, 0.37358324500046490, 0.37378169003700760, 0.37391912414055150, 0.37411751700176870, 0.37445327180033150, 0.37465157596237210, 0.37478895438028040, 0.37498720630039620, 0.37512456468928570, 0.37532276434072560, 0.37552092746406340, 0.37565825003117510, 0.37585636084638030, 0.37599366331964830, 0.37619172180011590, 0.37652701027331710, 0.37672497982082300, 0.37686222621411860, 0.37706014336121450, 0.37719736957074270, 0.37739523429102790, 0.37759306240906630, 0.37773025255863010, 0.37792802821097470, 0.37806519811247400, 0.37826292127287140, 0.37846060780069420, 0.37859774154335510, 0.37879537554058860, 0.37893248897111080, 0.37913007041164840, 0.37932761518952760, 0.37946469236270430, 0.37966218454548440, 0.37999668090439550, 0.38019408377361950, 0.38033110421532140, 0.38052845442532580, 0.38072576792543380, 0.38086275195238310, 0.38106001275525740, 0.38119697630408540, 0.38139418438400600, 0.38159135572458080, 0.38172828276111410, 0.38192540134096080, 0.38225937362965040, 0.38245640265464260, 0.38259327254031770, 0.38279024874147310, 0.38298718815707080, 0.38312402137460990, 0.38332090792898320, 0.38351775768088760, 0.38365455417176690, 0.38385135102520590, 0.38418487076519340, 0.38438157786378770, 0.38451831685103340, 0.38471497098891980, 0.38491158827899650, 0.38504829038508110, 0.38524485467759730, 0.38544138210572400, 0.38557804727263780, 0.38577452166649800, 0.38597095917948180, 0.38610758734935590, 0.38630397179151590, 0.38663691045151220, 0.38683320488916370, 0.38716601641600180, 0.38736222079657710, 0.38769490508034000, 0.38789101935151060, 0.38802751521565690, 0.38822357628266210, 0.38841960039233750, 0.38875202986172360, 0.38894796375805190, 0.38928026565689860, 0.38947610928826430, 0.38980828350817820, 0.39000403682320520, 0.39019975312874370, 0.39033608325617350, 0.39053174620372200, 0.39072737212611670, 0.39086366474211230, 0.39105923727128180, 0.39125477275972140, 0.39139102780784000, 0.39158650986796600, 0.39178195487187710, 0.39191817229581870, 0.39211356383647540, 0.39230891830552090, 0.39264039902012330, 0.39283566290420530, 0.39303088969704910, 0.39316701526284340, 0.39336218851209680, 0.39355732465493330, 0.39369341240918140, 0.39388849497398100, 0.39408354041727390, 0.39427854873481820, 0.39441458213525440, 0.39460953682970340, 0.39480445438343910, 0.39494044984193010, 0.39513531373847000, 0.39533014047942260, 0.39552493006062550, 0.39566087099043740, 0.39585560686986680, 0.39605030557479730, 0.39618620843307990, 0.39638085340248340, 0.39657546118272680, 0.39677003176973060, 0.39690587992559580, 0.39710039673297300, 0.39729487633257400, 0.39762511207470700, 0.39781950063905010, 0.39801385197716970, 0.39814960705771090, 0.39834390453917670, 0.39853816478009540, 0.39873238777651380, 0.39886808788358130, 0.39906225698000220, 0.39925638881772190, 0.39945048339283490, 0.39958612842836330, 0.39978016906041140, 0.39997417241577460, 0.40016813849059410, 0.40030372835689800, 0.40049764044586150, 0.40069151524032600, 0.40088535273647890, 0.40102088733625380, 0.40121467080403550, 0.40140841695967230, 0.40160212579939860, 0.40173760503572260, 0.40193125980483700, 0.40212487724433150, 0.40231845735048390, 0.40251200011958780, 0.40264740712039200, 0.40284089576703900, 0.40303434706308380, 0.40322776100486350, 0.40336311242503960, 0.40355647220274880, 0.40374979461276040, 0.40394307965146000, 0.40427160622862340, 0.40446479967728950, 0.40465795573776160, 0.40485107440648490, 0.40498629752403660, 0.40517936193665090, 0.40537238894435910, 0.40556537854365130, 0.40575833073102820, 0.40589348107303320, 0.40608637895404770, 0.40627923941014480, 0.40647206243787280, 0.40666484803379250, 0.40679992545182290, 0.40699265669156990, 0.40718535048665870, 0.40737800683369710, 0.40757062572930070, 0.40770563007572350, 0.40789819456579000, 0.40809072159172920, 0.40828321115020410, 0.40847566323788980, 0.40861059436586440, 0.40880299199908920, 0.40899535214898600, 0.40918767481227470, 0.40937995998568940, 0.40957220766597530, 0.40970704841964110, 0.40989924158785090, 0.41009139725057890, 0.41028351540461600, 0.41047559604676360, 0.41061036326139820, 0.41080238934352450, 0.41099437790156110, 0.41118632893235670, 0.41137824243277220, 0.41157011839968000, 0.41170479485697370, 0.41189661620743100, 0.41208840001236440, 0.41228014626869240, 0.41247185497334450, 0.41266352612326420, 0.41285515971540610, 0.41298972809383620, 0.41318130700495990, 0.41337284834650630, 0.41356435211547480, 0.41375581830887690, 0.41394724692373760, 0.41413863795709230, 0.41427309797656910, 0.41446443426523500, 0.41465573296081150, 0.41484699406037930, 0.41503821756103230, 0.41522940345987460, 0.41542055175402540, 0.41555490313679190, 0.41574599662347560, 0.41593705249409860, 0.41612807074582290, 0.41631905137582250, 0.41650999438128220, 0.41670089975940160, 0.41689176750739070, 0.41702599273879310, 0.41721680560906470, 0.41740758083808490, 0.41759831842310790, 0.41778901836139900, 0.41797968065023760, 0.41817030528691540, 0.41836089226873220, 0.41849499099219680, 0.41868552302722260, 0.41887601739651320, 0.41906647409741650, 0.41925689312728930, 0.41944727448350270, 0.41963761816343990, 0.41982792416449510, 0.42001819248407560, 0.42020842311959800, 0.42034236031019280, 0.42053253591496530, 0.42072267382511280, 0.42091277403809890, 0.42110283655139700, 0.42129286136249310, 0.42148284846888580, 0.42167279786808330, 0.42186270955760930, 0.42205258353499580, 0.42224241979778910, 0.42243221834354560, 0.42256595865441880, 0.42275570207172950, 0.42294540776180700, 0.42313507572225170, 0.42332470595067630, 0.42351429844470520, 0.42370385320197430, 0.42389337022013170, 0.42408284949683730, 0.42427229102976240, 0.42446169481659020, 0.42465106085501590, 0.42484038914274530, 0.42502967967749810, 0.42521893245700410, 0.42535242268169080, 0.42540814747900540, 0.42554162021519330, 0.42573077998371350, 0.42591990198502550, 0.42610898621691360, 0.42629803267717460, 0.42648704136361740, 0.42667601227406050, 0.42686494540633720, 0.42705384075829030, 0.42724269832777480, 0.42743151811265750, 0.42762030011081580, 0.42780904432014020, 0.42799775073853270, 0.42818641936390560, 0.42837505019418360, 0.42856364322730450, 0.42875219846121320, 0.42894071589387230, 0.42912919552325140, 0.42931763734733280, 0.42950604136411040, 0.42969440757159050, 0.42988273596779130, 0.43007102655073940, 0.43025927931847600, 0.43044749426905260, 0.43063567140053350, 0.43082381071099230, 0.43101191219851610, 0.43119997586120190, 0.43138800169715890, 0.43157598970450810, 0.43176393988138100, 0.43195185222592070, 0.43213972673628370, 0.43232756341063650, 0.43251536224715400, 0.43270312324402870, 0.43289084639945920, 0.43307853171165910, 0.43326617917884960, 0.43345378879926850, 0.43364136057115830, 0.43382889449278020, 0.43401639056239990, 0.43420384877829890, 0.43439126913876860, 0.43457865164211290, 0.43476599628664410, 0.43495330307068990, 0.43514057199258460, 0.43532780305067750, 0.43551499624332860, 0.43570215156890790, 0.43588926902579650, 0.43607634861238970, 0.43626339032709010, 0.43645039416831370, 0.43663736013448740, 0.43682428822405000, 0.43701117843545010, 0.43719803076714910, 0.43738484521761850, 0.43757162178534080, 0.43775836046881040, 0.43794506126653300, 0.43799943469123810, 0.43813172417702530, 0.43818607753932510, 0.43837268250194530, 0.43855924957764390, 0.43874577876497420, 0.43893227006249930, 0.43911872346879580, 0.43930513898245040, 0.43949151660206090, 0.43967785632623610, 0.43986415815359610, 0.44005042208277330, 0.44023664811240810, 0.44042283624115540, 0.44060898646767940, 0.44079509879065450, 0.44084916319091990, 0.44103521759845530, 0.44122123410311480, 0.44140721270361350, 0.44159315339867310, 0.44177905618702690, 0.44196492106742040, 0.44215074803860980, 0.44233653709936140, 0.44252228824845440, 0.44270800148467620, 0.44289367680682830, 0.44313313031136650, 0.44331870983384190, 0.44350425144204360, 0.44368975513481670, 0.44387522091102050, 0.44406064876952200, 0.44424603870920260, 0.44443139072895090, 0.44461670482767070, 0.44480198100427260, 0.44485560914449200, 0.44504082746292260, 0.44522600786045330, 0.44541115033603140, 0.44559625488861740, 0.44578132151718140, 0.44596635022070360, 0.44615134099817500, 0.44633629384859680, 0.44638975426233290, 0.44657464927962930, 0.44675950637130030, 0.44694432553638640, 0.44712910677393300, 0.44731385008300160, 0.44749855546266040, 0.44768322291199270, 0.44792114538206760, 0.44810571709303960, 0.44829025087440390, 0.44847474672528730, 0.44865920464482750, 0.44884362463217310, 0.44902800668648360, 0.44908117214282460, 0.44926549641172210, 0.44944978274936600, 0.44963403115495200, 0.44981824162768410, 0.45000241416677660, 0.45018654877145790, 0.45042366373374010, 0.45060770264278450, 0.45079170361861380, 0.45097566666049900, 0.45115959176772160, 0.45134347893957530, 0.45158021931702740, 0.45176401081523240, 0.45194776437948490, 0.45213148000912260, 0.45231515770349260, 0.45249879746195470, 0.45255158139462650, 0.45273516343604710, 0.45291870754380100, 0.45310221371728050, 0.45328568195588980, 0.45346911225904480, 0.45352178910073140, 0.45370516170775920, 0.45388849638169780, 0.45407179312199740, 0.45425505192811730, 0.45443827279952720, 0.45449084266864450, 0.45467400586521440, 0.45485713112956800, 0.45504021846120790, 0.45522326785964800, 0.45540627932441520, 0.45545874233978700, 0.45564169615137330, 0.45582461203190400, 0.45600748998093730, 0.45619032999804370, 0.45642548836365420, 0.45660823281725920, 0.45679093934125830, 0.45697360793526610, 0.45715623859890680, 0.45720850794610190, 0.45739108099777260, 0.45757361612191800, 0.45775611331819810, 0.45793857258627980, 0.45799075508184250, 0.45817315675737610, 0.45835552050765320, 0.45853784633237930, 0.45872013423126420, 0.45895446028341760, 0.45913665268661590, 0.45931880716676220, 0.45950092372361200, 0.45973499176665140, 0.45991701285035380, 0.46009899601369080, 0.46028094125646430, 0.46033286369129900, 0.46051475140120890, 0.46069660119379550, 0.46087841306889150, 0.46106018702633820, 0.46111202293965060, 0.46129373938460050, 0.46147541791524290, 0.46165705853145140, 0.46189041070792520, 0.46207195591768790, 0.46225346321634240, 0.46243493260380780, 0.46266802719953900, 0.46284940120467340, 0.46303073730208340, 0.46321203549172920, 0.46326363188523840, 0.46344487262123780, 0.46362607545308400, 0.46380724038077200, 0.46385877010036100, 0.46403987759195790, 0.46422094718308080, 0.46440197887375780, 0.46463441624387900, 0.46481535261946400, 0.46499625109842310, 0.46517711168082410, 0.46522848870516560, 0.46540929189074770, 0.46559005718362750, 0.46577078458390620, 0.46582209510510090, 0.46600276512655570, 0.46618339725933730, 0.46636399150358200, 0.46641523557407350, 0.46659577245762160, 0.46677627145663360, 0.46695673257127450, 0.46700791024358410, 0.46718831401578700, 0.46736867990769520, 0.46754900791950670, 0.46778038993399480, 0.46796062274580680, 0.46814081768189980, 0.46819186271572210, 0.46837200034628340, 0.46855210010534710, 0.46873216199317240, 0.46878314078684160, 0.46896314538778460, 0.46914311212178170, 0.46932304098913030, 0.46937395359547600, 0.46955382519471810, 0.46973365893167160, 0.46991345480666690, 0.46996430127859220, 0.47014403990438660, 0.47032374067265470, 0.47055418397424040, 0.47073378965517640, 0.47091335748345130, 0.47114360182154930, 0.47132307458654700, 0.47150250950385240, 0.47155317723933370, 0.47173255496071620, 0.47191189483903160, 0.47214179867386610, 0.47232104353301030, 0.47250025055422800, 0.47272995565404590, 0.47290906768076530, 0.47308814187480000, 0.47313863127062910, 0.47331764832293480, 0.47349662754737080, 0.47372599254957480, 0.47390487682465550, 0.47408372327727900, 0.47413410042976250, 0.47431288977583280, 0.47449164130438150, 0.47472066647031920, 0.47489932309529670, 0.47507794190833520, 0.47512820697776640, 0.47530676871978090, 0.47548529265490960, 0.47571397824782470, 0.47589240732580760, 0.47612095174965240, 0.47629928599135810, 0.47647758243710050, 0.47652768929571350, 0.47670592872211790, 0.47688413035777610, 0.47711233558887970, 0.47729044243558140, 0.47751850666265860, 0.47769651874163860, 0.47787449304119350, 0.47792444201470600, 0.47810235934730050, 0.47828023890584970, 0.47833014171649580, 0.47850796432414650, 0.47868574916318010, 0.47891333374398560, 0.47909102388509480, 0.47931846767885050, 0.47949606314373230, 0.47972336620099960, 0.47990086701145430, 0.48007833007071210, 0.48012802938291540, 0.48030543556084780, 0.48048280399321560, 0.48053245729731020, 0.48070976886472260, 0.48088704269225250, 0.48093665001711290, 0.48111386699611290, 0.48129104624095830, 0.48151773002827460, 0.48169481471269010, 0.48192135803468590, 0.48209834818103130, 0.48232475108904360, 0.48250164671977610, 0.48272790926526830, 0.48290471040294660, 0.48313083263749430, 0.48330753930478070, 0.48353352128008130, 0.48371013349973680, 0.48393597526760360, 0.48411249306248760, 0.48433819467484820, 0.48451461806792430, 0.48474017957682910, 0.48491650859115580, 0.48514193004876560, 0.48531816470750240, 0.48554344616609780, 0.48571958649250460, 0.48576864432517490, 0.48594472800447980, 0.48612077402191210, 0.48616978625230630, 0.48634577563977600, 0.48652172737169070, 0.48657069402892370, 0.48674658914806650, 0.48697136773121800, 0.48714716860564180, 0.48737180743559860, 0.48754751408900810, 0.48777201321867720, 0.48794762567487280, 0.48817198515728370, 0.48834750344016510, 0.48839626157686240, 0.48857172332845360, 0.48874714746201490, 0.48879586018967190, 0.48897122780942820, 0.48919522516559920, 0.48937049867766650, 0.48959435658220610, 0.48976953601082340, 0.48981813155504290, 0.48999325451726480, 0.49016833988676830, 0.49021689012797520, 0.49039191904875190, 0.49061541535103740, 0.49079035025485460, 0.49101370730252210, 0.49118854821395340, 0.49123698155034700, 0.49141176606092810, 0.49163490114423700, 0.49180959170495820, 0.49203258767783250, 0.49220718431351110, 0.49225550094711940, 0.49243004123015070, 0.49265281547952480, 0.49282726188040500, 0.49304989716422230, 0.49322424970801150, 0.49327244984106950, 0.49344674608074370, 0.49366915988297040, 0.49384336230880920, 0.49406563729104320, 0.49423974592833930, 0.49428782976328400, 0.49446188214531950, 0.49468393588891630, 0.49485789452603080, 0.49490590718315840, 0.49507980959587960, 0.49530164225306640, 0.49547545096470580, 0.49552339252167370, 0.49569714503989560, 0.49591875676327860, 0.49609241562447620, 0.49631388885785860, 0.49653527980041210, 0.49670878888654100, 0.49693004143133100, 0.49710345693065650, 0.49715121174640000, 0.49732457113316250, 0.49754560314294260, 0.49771886898752770, 0.49776655298423320, 0.49793976274765890, 0.49816057437637810, 0.49833369064246490, 0.49838130389795840, 0.49855436411440600, 0.49877495551636710, 0.49899546487267100, 0.49916837561882020, 0.49938874694869450, 0.49960903629450670, 0.49978179764736870, 0.49982924368063230, 0.50000194906017290, 0.50022201855063920, 0.50039463058754150, 0.50044200614317890, 0.50061456223865660, 0.50083441202926780, 0.50100687482785790, 0.50105417998383520, 0.50122658687300540, 0.50144621711960940, 0.50166576559216830, 0.50183802335311040, 0.50188523231518460, 0.50205743421190330, 0.50227676335876350, 0.50244887206987270, 0.50249601081824210, 0.50266806369738900, 0.50288717367520700, 0.50310620202791650, 0.50327810596831090, 0.50332514878011430, 0.50349699693408350, 0.50371580633713740, 0.50393453420210510, 0.50410623352897070, 0.50415318055364200, 0.50432482413981980, 0.50454333327512600, 0.50476176095958150, 0.50493325583086210, 0.50498010721788630, 0.50515154639440660, 0.50536975556979090, 0.50558788338176180, 0.50575917395615060, 0.50580592985506170, 0.50597716478081810, 0.50619507430490450, 0.50641290255321460, 0.50658398899015900, 0.50663064955053980, 0.50680168038515350, 0.50684831532169490, 0.50701929056735930, 0.50723681956161460, 0.50745426739277210, 0.50762509429662560, 0.50767163408569190, 0.50784240544714120, 0.50805963549773100, 0.50827678447329880, 0.50849385239875660, 0.50866442003728420, 0.50871083929902780, 0.50888135145537130, 0.50909820188670680, 0.50931497135624140, 0.50953165988895420, 0.50970196853136280, 0.50974826750983380, 0.50991852073057220, 0.51013499205648780, 0.51035138253414080, 0.51056769218855180, 0.51073774210547340, 0.51078392104477330, 0.51095391560082210, 0.51100006912784630, 0.51117000833664130, 0.51138602033801480, 0.51160195163002570, 0.51181780223777190, 0.51198753840146840, 0.51203357218637350, 0.51220325306396050, 0.51224926150094530, 0.51241888710610760, 0.51246487020662440, 0.51263444055305380, 0.51284991342996240, 0.51306530576199130, 0.51328061757432280, 0.51344998518376460, 0.51349584889215830, 0.51366516130440660, 0.51371099974068330, 0.51388025696950540, 0.51392607014511610, 0.51409527220428560, 0.51431020703398690, 0.51452506148384500, 0.51473983557912600, 0.51495452934508950, 0.51512347386982230, 0.51516914280702030, 0.51533803223786900, 0.51538367599019460, 0.51555251034101960, 0.51559812891992160, 0.51576690820458250, 0.51598122585388480, 0.51619546331424520, 0.51640962061101700, 0.51662369776955070, 0.51683769481519730, 0.51705161177333970, 0.51722002402255280, 0.51726544866936800, 0.51743380595661090, 0.51747920552866860, 0.51764750786788710, 0.51769288237662390, 0.51786112978182890, 0.51790647923869650, 0.51807467172383650, 0.51828813371935040, 0.51850151579383170, 0.51871481797270430, 0.51892804028146110, 0.51914118274556380, 0.51935424539050780, 0.51956722824177690, 0.51978013132488940, 0.51999295466535070, 0.52020569828868020, 0.52037330551392120, 0.52041836222041480, 0.52058591468713140, 0.52063094648610840, 0.52079844420842620, 0.52084345111131820, 0.52101089410334960, 0.52105587612158090, 0.52122326439748930, 0.52126822154249550, 0.52143555511643190, 0.52148048739964060, 0.52164776628573640, 0.52169267371856600, 0.52185989793107800, 0.52190478052497850, 0.52207195007799230, 0.52211680784436130, 0.52228392275211550, 0.52232875570239050, 0.52249581597913140, 0.52254062412474730, 0.52270762978463110, 0.52275241313699460, 0.52291936419431280, 0.52296412276486400, 0.52313101923373910, 0.52317575303386870, 0.52334259492868150, 0.52338730396984580, 0.52355409130471710};
                break;
            case 14:
                halfErrorTheta = {0.00000000000000000, 0.00002234128228068, 0.00010572590275693, 0.00012807337079711, 0.00021147162845297, 0.00023382528393654, 0.00031723718151049, 0.00033959702571441, 0.00042302256442979, 0.00044538859884276, 0.00052882778070824, 0.00055120000673195, 0.00063465283343363, 0.00065703125251471, 0.00074049772590350, 0.00076288233946473, 0.00084636246130226, 0.00086875327075553, 0.00095224704276368, 0.00097464404954855, 0.00105815147354826, 0.00108055467908912, 0.00116407575684754, 0.00118648516258071, 0.00127001989590397, 0.00129243550324129, 0.00137598389384966, 0.00139840570422871, 0.00148196775393159, 0.00150439576877929, 0.00158797147934867, 0.00161040570009478, 0.00169399507331354, 0.00171643550139495, 0.00180003853906508, 0.00182248517589193, 0.00190610187972333, 0.00192855472672897, 0.00201218509851337, 0.00203464415712828, 0.00211828819864693, 0.00214075347030676, 0.00222441118335411, 0.00224688266947680, 0.00233055405578947, 0.00235303175781045, 0.00243671681918066, 0.00254289947669925, 0.00264910203154629, 0.00275532448695978, 0.00286156684609309, 0.00296782911216658, 0.00307411128834906, 0.00318041337785719, 0.00328673538386928, 0.00339307730958900, 0.00349943915820976, 0.00360582093291304, 0.00371222263690266, 0.00381864427337329, 0.00392508584550795, 0.00400897175513394, 0.00403154735647957, 0.00411544696850359, 0.00413802880949742, 0.00422194212567045, 0.00424453020774281, 0.00432845722982717, 0.00435105155440873, 0.00443499228416485, 0.00445759285267750, 0.00454154729184093, 0.00456415410572852, 0.00464812225609950, 0.00475471718006959, 0.00486133206697160, 0.00496796691995304, 0.00507462174223677, 0.00518129653698674, 0.00528799130739671, 0.00539470605662725, 0.00550144078786748, 0.00558552791534912, 0.00560819550430278, 0.00569229635959817, 0.00571497020911029, 0.00579908479398873, 0.00582176490548148, 0.00590589322166446, 0.00592857959657124, 0.00601272164581789, 0.00611957006961329, 0.00622643849626057, 0.00633332692890558, 0.00644023537073320, 0.00654716382492832, 0.00665411229464655, 0.00676108078306308, 0.00684532824690262, 0.00686806929335922, 0.00695233050506827, 0.00697507782870355, 0.00705935279003758, 0.00708210639227523, 0.00716639510495222, 0.00718915498722740, 0.00727345745300320, 0.00738053983735361, 0.00748764226116857, 0.00759476472761892, 0.00770190723987786, 0.00780906980110451, 0.00789345030064372, 0.00791625241446298, 0.00800064667837090, 0.00802345508312864, 0.00810786311313090, 0.00813067781025828, 0.00821509960808911, 0.00832235616640977, 0.00842963279125400, 0.00853692948578998, 0.00864424625317569, 0.00875158309656765, 0.00883608300881283, 0.00885894001912733, 0.00894345371042345, 0.00896631702401559, 0.00905084449610624, 0.00907371411440094, 0.00915825536899268, 0.00926568633224945, 0.00937313738903533, 0.00948060854251483, 0.00958809979582639, 0.00967270545318007, 0.00969561115213329, 0.00978023060145673, 0.00980314261458877, 0.00988777585760229, 0.00999534122477336, 0.01010292670611603, 0.01021053230478963, 0.01031815802394062, 0.01040285571969644, 0.01042580386671306, 0.01051051536558980, 0.01053346983626156, 0.01061819513997973, 0.01064115593573536, 0.01072589504600379, 0.01083361508682359, 0.01094135526557468, 0.01104911558540511, 0.01113390539167354, 0.01115689604945525, 0.01124169966996670, 0.01126469666087774, 0.01134951409734020, 0.01145734867693647, 0.01156520341189907, 0.01167307830536711, 0.01178097336048773, 0.01186585534914323, 0.01188888858038863, 0.01197378439437192, 0.01199682396822055, 0.01208173360922927, 0.01218970299686495, 0.01229769256040324, 0.01240570230299581, 0.01249066271100279, 0.01251373222775980, 0.01259870647044222, 0.01262178233784600, 0.01270677041689282, 0.01281485455350164, 0.01292295888339752, 0.01303108340970910, 0.01311612228812557, 0.01313922813556744, 0.01322428085797068, 0.01324739306410570, 0.01333245963219698, 0.01344065861392963, 0.01354887780629181, 0.01365711721242416, 0.01374223461214609, 0.01376537683544610, 0.01385050808844988, 0.01395880178646148, 0.01406711570931423, 0.01417544986012026, 0.01426063197103554, 0.01428380424201176, 0.01436900021378200, 0.01439217885810636, 0.01447738869242633, 0.01458579741009250, 0.01469422636989241, 0.01477947322578724, 0.01480267557495003, 0.01488793629926000, 0.01491114502838339, 0.01499641962279989, 0.01510492319951462, 0.01521344703252845, 0.01529875866710046, 0.01532199112495547, 0.01540731663548222, 0.01543055547990877, 0.01551589486807897, 0.01562449336799632, 0.01573311213835368, 0.01581848858521315, 0.01584175118226195, 0.01592714151259405, 0.01603581471832167, 0.01614450820549654, 0.01625322197723312, 0.01633866326989275, 0.01636195603663542, 0.01644741122027559, 0.01655617946311551, 0.01666496800150794, 0.01675046027660204, 0.01677377683856343, 0.01685928301045204, 0.01688260597738278, 0.01696812604773912, 0.01707698939157124, 0.01718587304504539, 0.01727143022523635, 0.01729477701126856, 0.01738034809572719, 0.01748928628372532, 0.01759824479234082, 0.01768385300083994, 0.01770722362467246, 0.01779284574322409, 0.01790185881407998, 0.01801089221650468, 0.01809655147327074, 0.01811994595360066, 0.01820561912619304, 0.01822902002845614, 0.01831470711853736, 0.01842381545339754, 0.01853294413386928, 0.01861866838040262, 0.01864209316303491, 0.01872783133282011, 0.01883701463868735, 0.01894621830109196, 0.01903199364142951, 0.01905544232312275, 0.01914123159245623, 0.01925048990785039, 0.01935976859070001, 0.01944559504464711, 0.01946906764408958, 0.01955490803276838, 0.01966424139616292, 0.01975010504467497, 0.01977359513791582, 0.01985947272523286, 0.01988296926110966, 0.01996886078888303, 0.02007826923870185, 0.02016418403458565, 0.02018769807776858, 0.02027362681817154, 0.02038308999573369, 0.02049257357034723, 0.02057853953328391, 0.02060207754508907, 0.02068805745824726, 0.02079759578805684, 0.02090715452578440, 0.02099317167540497, 0.02101673367450729, 0.02110276478003704, 0.02121237830037682, 0.02129843269631767, 0.02132201223949300, 0.02140808059538144, 0.02151774891792923, 0.02162743766702960, 0.02171354328310789, 0.02173714684575096, 0.02182326642744414, 0.02193301000610087, 0.02201915289217542, 0.02204277402214370, 0.02212893087785893, 0.02223872930562194, 0.02234854817852913, 0.02243474231804901, 0.02245838749964274, 0.02254459561444500, 0.02265446936374135, 0.02274070079682686, 0.02276436356898831, 0.02285060898136679, 0.02296053762654477, 0.02307048673542004, 0.02315676945511016, 0.02318045631104523, 0.02326675301565425, 0.02337675704762500, 0.02346307708434466, 0.02348678155407910, 0.02357311557970581, 0.02368317455421788, 0.02376953191766376, 0.02379325401094054, 0.02387962536727454, 0.02398973930376368, 0.02409987373017053, 0.02418628242688676, 0.02429645134474822, 0.02440664076024316, 0.02449308680698508, 0.02451685067641007, 0.02460331072560448, 0.02471355514955638, 0.02480003855595948, 0.02482382008188204, 0.02491031749469388, 0.02502061694645636, 0.02510713772212808, 0.02513093691428458, 0.02521747170032015, 0.02532782619922293, 0.02541438435375087, 0.02543820122187379, 0.02552477339071402, 0.02563518295606539, 0.02572177849902159, 0.02574561305284114, 0.02583222261404603, 0.02594268726513075, 0.02602932020606427, 0.02605317245530974, 0.02613981941842249, 0.02625033917450282, 0.02633700952293837, 0.02636087947733635, 0.02644756385187836, 0.02655813873219478, 0.02664484649764528, 0.02666873416691983, 0.02675545596239098, 0.02686608598616266, 0.02695283117811053, 0.02697673657198373, 0.02706349579786378, 0.02717418098428192, 0.02726096361219664, 0.02728488674038906, 0.02737168340613962, 0.02748242377437951, 0.02756924384770544, 0.02768001883499358, 0.02776686231912773, 0.02779081440420391, 0.02787767193236648, 0.02798850213213297, 0.02807538307662143, 0.02809935292143467, 0.02818624791384461, 0.02829713334519963, 0.02838405175944160, 0.02840803937370084, 0.02849497183973381, 0.02860591252176710, 0.02869286841512929, 0.02880384375756916, 0.02889082308145255, 0.02891483970934160, 0.02900183309117478, 0.02911286371481026, 0.02919988053263465, 0.02922391495536409, 0.02931094583499447, 0.02942203175884952, 0.02950908607993236, 0.02953313830720502, 0.02962020669394135, 0.02973134793702015, 0.02981843977065328, 0.02992961571529747, 0.03001673099898956, 0.03004081229657905, 0.03012794165203472, 0.03023917294627990, 0.03032632575721717, 0.03043759177124743, 0.03052476804081492, 0.03054887843403227, 0.03063606878144920, 0.03074739017539427, 0.03083460398683977, 0.03085873222563151, 0.03094596011874825, 0.03103319739735797, 0.03105733691150381, 0.03114458827403465, 0.03125599981610128, 0.03134327465117074, 0.03136743202654444, 0.03145472094933993, 0.03154201926006520, 0.03156618792042481, 0.03165350032111890, 0.03176500205962711, 0.03185233794133469, 0.03187652447856890, 0.03196387445403638, 0.03205123381985527, 0.03207543165170319, 0.03216280511352169, 0.03227439709667770, 0.03236179404794152, 0.03247342082334224, 0.03256084126713699, 0.03258506829573309, 0.03267250284153234, 0.03278418511743487, 0.03287164316107638, 0.03298336024723134, 0.03307084179178390, 0.03309509804237690, 0.03318259369492451, 0.03329436631156284, 0.03338188547030715, 0.03349369291516100, 0.03358123558316000, 0.03369307786294207, 0.03378064404325183, 0.03380494086819443, 0.03389252116467012, 0.03400441901605372, 0.03409202283008962, 0.03420395553430369, 0.03429158286893779, 0.03440355043267180, 0.03449120129093619, 0.03451553873830984, 0.03460320372087428, 0.03471522689719759, 0.03480291540860964, 0.03491497346229073, 0.03500268550556853, 0.03511477844327612, 0.03520251402142904, 0.03522689213927496, 0.03531464184981796, 0.03540240096585298, 0.03542679044097144, 0.03551456369157564, 0.03562674718452938, 0.03571454397819029, 0.03582676237958686, 0.03591458271929354, 0.03602683603576304, 0.03611467992450001, 0.03613911013132590, 0.03622696816267335, 0.03631483560341726, 0.03633927718439234, 0.03642715876991142, 0.03651504976563134, 0.03653950272440110, 0.03662740786706118, 0.03673978676093093, 0.03682771546369116, 0.03694012930354409, 0.03702808156936191, 0.03714053036179112, 0.03722850619361591, 0.03734098994520956, 0.03742898934598504, 0.03745349450548806, 0.03754150806332379, 0.03762953103598443, 0.03765404759377350, 0.03774208472564098, 0.03783013127312118, 0.03785465923283463, 0.03794271994166017, 0.03803079006688475, 0.03805532943215976, 0.03814341372086630, 0.03825605820122649, 0.03834416607272880, 0.03845684554949571, 0.03854497700670364, 0.03865769148642096, 0.03874584653223916, 0.03885859602143546, 0.03894677465875866, 0.03905955916396600, 0.03914776139568505, 0.03926058092341862, 0.03934880675241826, 0.03946166130919192, 0.03954991073835059, 0.03966280033066514, 0.03975107336285725, 0.03986399799721405, 0.03995229463530100, 0.04006525431818797, 0.04015357456503188, 0.04026656930293363, 0.04035491316138662, 0.04046794296077559, 0.04055631043368818, 0.04066937530103160, 0.04075776639124032, 0.04087086633300105, 0.04095928104334476, 0.04107241606597465, 0.04116085439927804, 0.04127402450922430, 0.04136248646831067, 0.04147569167200990, 0.04156417725969511, 0.04167741756357985, 0.04176592678267279, 0.04187920219316755, 0.04196773504646995, 0.04208104556998843, 0.04216960206029979, 0.04228294770325119, 0.04237152783336200, 0.04248490860214702, 0.04257351237483931, 0.04266212558118550, 0.04268692827585254, 0.04277555569390424, 0.04286419254632698, 0.04288900673353295, 0.04297765779971638, 0.04306631830098374, 0.04309114398433861, 0.04317981870141741, 0.04326850285428951, 0.04329334003740276, 0.04338203840813692, 0.04347074621537327, 0.04358431692899235, 0.04367304839333810, 0.04378665427308306, 0.04387540939728315, 0.04398905044950046, 0.04407782923629072, 0.04416661746179368, 0.04419150546731619, 0.04428030791942569, 0.04436911981094343, 0.04439401933558990, 0.04448284545574416, 0.04457168101599712, 0.04459659206336887, 0.04468544185428353, 0.04477430108598607, 0.04488809712406898, 0.04497698002992755, 0.04509081127411424, 0.04517971785683084, 0.04526863388180135, 0.04529358431341378, 0.04538251457568394, 0.04547145428088545, 0.04549641625095154, 0.04558537019546264, 0.04567433358358192, 0.04578828472513061, 0.04587727179884549, 0.04599125817363686, 0.04608026893561975, 0.04616928914264516, 0.04619429054991358, 0.04628332500282891, 0.04637236890145241, 0.04648644000938811, 0.04657550760226789, 0.04668961396419699, 0.04677870525398087, 0.04686780599088504, 0.04689284687613839, 0.04698196186547047, 0.04707108630257791, 0.04718527744560058, 0.04727442558554388, 0.04738865200321934, 0.04747782384862688, 0.04756700514319483, 0.04759208554716265, 0.04768128110065472, 0.04777048610395195, 0.04788479735044165, 0.04797402606507885, 0.04808837260678509, 0.04817762503536660, 0.04826688691511310, 0.04829200687847213, 0.04838128302359673, 0.04847056862051979, 0.04858500003852953, 0.04867430935521727, 0.04876362812441435, 0.04878877608891790, 0.04887810912795230, 0.04896745162012061, 0.04908196794744929, 0.04917133416516470, 0.04926070983671067, 0.04928588582242400, 0.04937527576825007, 0.04946467516852657, 0.04957927643806970, 0.04966869956963057, 0.04975813215633230, 0.04978333618329980, 0.04987278304869795, 0.04996223936984671, 0.05007692561438048, 0.05016640567251459, 0.05025589518707529, 0.05028112727532110, 0.05037063107297407, 0.05046014432765848, 0.05057491557984441, 0.05066445257717498, 0.05075399903220315, 0.05077925920173133, 0.05086881994422376, 0.05095839014501244, 0.05107324643739000, 0.05116284038644244, 0.05125244379444610, 0.05136734976505808, 0.05145697692441562, 0.05154661354337074, 0.05157191828940444, 0.05166156920260720, 0.05175122957599325, 0.05186622063754630, 0.05195590476784276, 0.05204559835895880, 0.05207093123774284, 0.05216063912742118, 0.05225035647850000, 0.05234008329103070, 0.05236543266322162, 0.05245517377672265, 0.05254492435225079, 0.05266005026209712, 0.05274982460307706, 0.05283960840670155, 0.05295478405195027, 0.05304459162403969, 0.05313440865938920, 0.05315980270730501, 0.05324963405029396, 0.05333947485710457, 0.05342932512778251, 0.05345473569387180, 0.05354460027457164, 0.05363447431969477, 0.05374978492017539, 0.05383968274216180, 0.05392959002916882, 0.05404495040354584, 0.05413488147037584, 0.05422482200281621, 0.05434023216125151, 0.05443019647645824, 0.05452017025786050, 0.05454564211012110, 0.05463563021048344, 0.05472562777758298, 0.05481563481145431, 0.05484112321320026, 0.05493114456837553, 0.05502117539085818, 0.05511121568068605, 0.05513672063852077, 0.05522677525198758, 0.05531683933332912, 0.05540691288257610, 0.05543243440309818, 0.05552252227831207, 0.05561261962196098, 0.05570272643407415, 0.05572826452387818, 0.05581838566427737, 0.05590851627366348, 0.05602421101773920, 0.05611436542673822, 0.05620452930526988, 0.05632027390149210, 0.05641046158248459, 0.05650065873354867, 0.05659086535471434, 0.05661645319188011, 0.05670667414823761, 0.05679690457520198, 0.05688714447279689, 0.05691274890557294, 0.05700300314064867, 0.05709326684685848, 0.05718354002422284, 0.05720916105917924, 0.05729944857630263, 0.05738974556508055, 0.05748005202553035, 0.05750568966923211, 0.05759601047171191, 0.05768634074636049, 0.05777668049319201, 0.05789268884332452, 0.05798305240712302, 0.05807342544361163, 0.05818948370751533, 0.05827988056372470, 0.05837028689312228, 0.05848639508059147, 0.05857682523244999, 0.05866726485798736, 0.05875771395721474, 0.05878342297879313, 0.05887388642951544, 0.05896435935440264, 0.05905484175346287, 0.05908056741828528, 0.05917106417106739, 0.05926157039849364, 0.05935208610056840, 0.05946835847318498, 0.05955889800631576, 0.05964944701456511, 0.05974000549793661, 0.05976576935187442, 0.05985634219385473, 0.05994692451141789, 0.06003751630456321, 0.06015390297702652, 0.06024451860701888, 0.06033514371304948, 0.06045158037167693, 0.06054222931719377, 0.06063288773919639, 0.06072355563767855, 0.06074937439358074, 0.06084005665769686, 0.06093074839873801, 0.06102144961669876, 0.06113800064420785, 0.06122872570733352, 0.06131946024781084, 0.06141020426563096, 0.06152681968057645, 0.06161758754658568, 0.06170836489036140, 0.06179915171189156, 0.06182503033398506, 0.06191583152852066, 0.06200664220123966, 0.06209746235212688, 0.06221419220904392, 0.06230503621367157, 0.06239588969687605, 0.06248675265864324, 0.06251266960351034, 0.06260354694299012, 0.06269443376144991, 0.06278533005886956, 0.06287623583522935, 0.06290217440446115, 0.06299309456108833, 0.06308402419706871, 0.06317496331237940, 0.06326591190699964, 0.06329187211096208, 0.06338283508838948, 0.06347380754553170, 0.06356478948236388, 0.06368176274790662, 0.06377276854973557, 0.06386378383162931, 0.06395480859356242, 0.06407184633997729, 0.06416289496976082, 0.06425395307995036, 0.06434502067051334, 0.06446212291164549, 0.06455321437288870, 0.06464431531486357, 0.06473542573753759, 0.06485259248717185, 0.06494372678332785, 0.06503487056053126, 0.06512602381874684, 0.06524325509060683, 0.06533443222507936, 0.06542561884090341, 0.06551681493804285, 0.06560802051645584, 0.06563411074578664, 0.06572533072193115, 0.06581656017971925, 0.06590779911911059, 0.06599904754006483, 0.06602515947633874, 0.06611642229745894, 0.06620769460050234, 0.06629897638542812, 0.06639026765219146, 0.06650770697502361, 0.06659902212656715, 0.06669034676025767, 0.06678168087604767, 0.06689918477777624, 0.06699054278100918, 0.06708191026664442, 0.06717328723463195, 0.06726467368492100, 0.06729085572864975, 0.06738225658671572, 0.06747366692742601, 0.06756508675072753, 0.06765651605656800, 0.06777416356635530, 0.06786561676521931, 0.06795707944690310, 0.06804855161135038, 0.06814003325850644, 0.06825775980243066, 0.06834926534551405, 0.06844078037157415, 0.06853230488055118, 0.06862383887238859, 0.06865009606124872, 0.06874164446869645, 0.06883320235932306, 0.06892476973306671, 0.06901634658986494, 0.06910793292965276, 0.06913421683837429, 0.06922581759647077, 0.06931742783787058, 0.06940904756250901, 0.06950067677031944, 0.06959231546123589, 0.06961862610467180, 0.06971027921656841, 0.06980194181187510, 0.06989361389052263, 0.06998529545244301, 0.07007698649756586, 0.07010332389054420, 0.07019502935929736, 0.07028674431154941, 0.07037846874722698, 0.07047020266625877, 0.07056194606857052, 0.07058831022589356, 0.07068006805446294, 0.07077183536660060, 0.07086361216223176, 0.07095539844127905, 0.07104719420366722, 0.07116539533135934, 0.07125721500622742, 0.07134904416463771, 0.07144088280650916, 0.07153273093176272, 0.07162458854031730, 0.07165101121877349, 0.07174288325912118, 0.07183476478304005, 0.07192665579044684, 0.07201855628125900, 0.07211046625539145, 0.07222884015345993, 0.07232077404552007, 0.07241271742107749, 0.07250467028004428, 0.07259663262233090, 0.07268860444785275, 0.07271508571691228, 0.07280707197964878, 0.07289906772587251, 0.07299107295549138, 0.07308308766841451, 0.07317511186454892, 0.07326714554380313, 0.07329365861248292, 0.07338570673179186, 0.07347776433446472, 0.07356983142040527, 0.07366190798951756, 0.07375399404170659, 0.07384608957687558, 0.07396474444330973, 0.07405686390455156, 0.07414899284890806, 0.07424113127627912, 0.07433327918656436, 0.07442543657966361, 0.07451760345547388, 0.07454418514658544, 0.07463636646835382, 0.07472855727305548, 0.07482075756058832, 0.07491296733084731, 0.07500518658372711, 0.07509741531912171, 0.07521627205705182, 0.07530852472386372, 0.07540078687329624, 0.07549305850523926, 0.07558533961958565, 0.07567763021622231, 0.07576993029504067, 0.07579658070079022, 0.07588889523130975, 0.07598121924421244, 0.07607355273938553, 0.07616589571671396, 0.07625824817608528, 0.07635061011738489, 0.07644298154049528, 0.07656205470210049, 0.07665445006187986, 0.07674685490354528, 0.07683926922697619, 0.07693169303205307, 0.07702412631865761, 0.07711656908666860, 0.07720902133596415, 0.07723575050027559, 0.07732821720745898, 0.07742069339610641, 0.07751317906609414, 0.07760567421729585, 0.07769817884958875, 0.07779069296284723, 0.07788321655694342, 0.07797574963175336, 0.07800252070964103, 0.07809506824550027, 0.07818762526223669, 0.07828019175972187, 0.07837276773782405, 0.07846535319641612, 0.07855794813536354, 0.07865055255453663, 0.07874316645380325, 0.07886260784166565, 0.07895524568532856, 0.07904789300910169, 0.07914054981284949, 0.07923321609643552, 0.07932589185972288, 0.07941857710257571, 0.07951127182485489, 0.07960397602642137, 0.07972355468724031, 0.07981628283570403, 0.07990902046345215, 0.08000176757034230, 0.08009452415623340, 0.08018729022098150, 0.08028006576444310, 0.08037285078647230, 0.08046564528692620, 0.08055844926565740, 0.08058536125778710, 0.08067817970750260, 0.08077100763561840, 0.08086384504198520, 0.08095669192645440, 0.08104954828887710, 0.08114241412910350, 0.08123528944698180, 0.08132817424236070, 0.08142106851508770, 0.08151397226501160, 0.08160688549197590, 0.08163385453083890, 0.08172678223246630, 0.08181971941123960, 0.08191266606700330, 0.08200562219960010, 0.08209858780887470, 0.08219156289466600, 0.08228454745681790, 0.08237754149517110, 0.08247054500956410, 0.08256355799983700, 0.08265658046583000, 0.08274961240737850, 0.08277664355383340, 0.08286968997385600, 0.08296274586951960, 0.08305581124066090, 0.08314888608711360, 0.08324197040871250, 0.08333506420529090, 0.08342816747668130, 0.08352128022271710, 0.08361440244322970, 0.08370753413804940, 0.08380067530700600, 0.08389382594992970, 0.08398698606664910, 0.08401408439709420, 0.08410725899620030, 0.08420044306916540, 0.08429363661581590, 0.08438683963597790, 0.08448005212947540, 0.08457327409613390, 0.08466650553577690, 0.08475974644822750, 0.08485299683330660, 0.08494625669083760, 0.08503952602064150, 0.08513280482253710, 0.08522609309634460, 0.08531939084188240, 0.08541269805896930, 0.08550601474742420, 0.08559934090706030, 0.08562652656011500, 0.08571986720677900, 0.08581321732466080, 0.08590657691357590, 0.08599994597333810, 0.08609332450375980, 0.08618671250465420, 0.08628010997583290, 0.08637351691710470, 0.08646693332828240, 0.08656035920917510, 0.08665379455959080, 0.08674723937933750, 0.08684069366822410, 0.08693415742605510, 0.08702763065263910, 0.08712111334777890, 0.08721460551128140, 0.08730810714294900, 0.08740161824258650, 0.08749513880999370, 0.08758866884497550, 0.08761596204527840, 0.08768220834733180, 0.08770950657246340, 0.08780306056722210, 0.08789662402935480, 0.08799019695866060, 0.08808377935493660, 0.08817737121798100, 0.08827097254759020, 0.08836458334355980, 0.08845820360568550, 0.08855183333376170, 0.08864547252758220, 0.08873912118694080, 0.08883277931163000, 0.08892644690144000, 0.08902012395616330, 0.08911381047559000, 0.08920750645950930, 0.08930121190770940, 0.08939492681998080, 0.08948865119610920, 0.08958238503588140, 0.08967612833908400, 0.08976988110550260, 0.08986364333492210, 0.08995741502712570, 0.09005119618189570, 0.09014498679901690, 0.09023878687827060, 0.09033259641943670, 0.09042641542229570, 0.09052024388662810, 0.09061408181221290, 0.09070792919882890, 0.09080178604625190, 0.09089565235426010, 0.09098952812262940, 0.09108341335113540, 0.09117730803955170, 0.09127121218765340, 0.09136512579521510, 0.09145904886200650, 0.09155298138780120, 0.09164692337236970, 0.09174087481548230, 0.09183483571690950, 0.09192880607642110, 0.09202278589378240, 0.09211677516876410, 0.09221077390113150, 0.09230478209065130, 0.09239879973708820, 0.09249282684020800, 0.09258686339977360, 0.09268090941554920, 0.09277496488729690, 0.09286902981477820, 0.09296310419775500, 0.09305718803598650, 0.09315128132923530, 0.09324538407725660, 0.09333949627981100, 0.09343361793665520, 0.09352774904754660, 0.09362188961224110, 0.09371603963049360, 0.09381019910205960, 0.09390436802669310, 0.09399854640414560, 0.09409273423417200, 0.09418693151652200, 0.09428113825094820, 0.09437535443720080, 0.09446958007502810, 0.09456381516418070, 0.09465805970440530, 0.09475231369545040, 0.09484657713706270, 0.09494085002898700, 0.09503513237096940, 0.09512942416275550, 0.09522372540408830, 0.09531803609471000, 0.09541235623436420, 0.09550668582279220, 0.09560102485973470, 0.09569537334493240, 0.09578973127812490, 0.09588409865905010, 0.09597847548744700, 0.09604511475418220, 0.09607286176305230, 0.09613950541684240, 0.09623390552580490, 0.09632831508080450, 0.09642273408157570, 0.09651716252785360, 0.09661160041937020, 0.09670604775585820, 0.09680050453704980, 0.09689497076267540, 0.09698944643246530, 0.09708393154614950, 0.09717842610345760, 0.09727293010411620, 0.09736744354785290, 0.09746196643439510, 0.09755649876346810, 0.09765104053479740, 0.09774559174810750, 0.09784015240312170, 0.09793472249956310, 0.09802930203715490, 0.09812389101561740, 0.09819062811929310, 0.09821848943467170, 0.09828523091046320, 0.09837984314129040, 0.09847446481149420, 0.09856909592079240, 0.09866373646890250, 0.09875838645554090, 0.09885304588042420, 0.09894771474326590, 0.09904239304378270, 0.09913708078168740, 0.09923177795669260, 0.09932648456851050, 0.09942120061685320, 0.09951592610143100, 0.09961066102195370, 0.09970540537813190, 0.09977221381657610, 0.09980015916967260, 0.09986697196902290, 0.09996173955587780, 0.10005651657684720, 0.10015130303163790, 0.10024609891995400, 0.10034090424150080, 0.10043571899598080, 0.10053054318309810, 0.10062537680255380, 0.10072021985405010, 0.10081507233728830, 0.10090993425196710, 0.10100480559778620, 0.10107167212652400, 0.10109968637444360, 0.10116655725475000, 0.10126145181284360, 0.10135635580050090, 0.10145126921741770, 0.10154619206328830, 0.10164112433780740, 0.10173606604066880, 0.10183101717156500, 0.10192597773018900, 0.10202094771623030, 0.10211592712938030, 0.10221091596932980, 0.10227783611419600, 0.10237283872344920, 0.10246785075820230, 0.10256287221814320, 0.10265790310295730, 0.10275294341233170, 0.10284799314594950, 0.10294305230349610, 0.10303812088465450, 0.10313319888910750, 0.10322828631653740, 0.10329525129326220, 0.10339035247869530, 0.10348546308578490, 0.10358058311421080, 0.10367571256365130, 0.10377085143378400, 0.10386599972428470, 0.10396115743483210, 0.10405632456509920, 0.10415150111476210, 0.10421850651244130, 0.10431369680967850, 0.10440889652497320, 0.10450410565799530, 0.10459932420841830, 0.10469455217591100, 0.10478978956014320, 0.10488503636078450, 0.10498029257750300, 0.10507555820996540, 0.10514260396006620, 0.10523788332955960, 0.10533317211343920, 0.10542847031136830, 0.10552377792301420, 0.10561909494803790, 0.10571442138610190, 0.10580975723686850, 0.10590510249999830, 0.10597218421816160, 0.10606754320869610, 0.10616291161021880, 0.10625828942238760, 0.10635367664485930, 0.10644907327729100, 0.10654447931933900, 0.10663989477065810, 0.10670700809090650, 0.10680243726095640, 0.10689787583888670, 0.10699332382434930, 0.10708878121699730, 0.10718424801647960, 0.10727972422244800, 0.10737520983455140, 0.10744235471230470, 0.10753785403439070, 0.10763336276120580, 0.10772888089239590, 0.10782440842760720, 0.10791994536648470, 0.10801549170867300, 0.10811104745381550, 0.10817822384427060, 0.10827379329057440, 0.10836937213841170, 0.10846496038742120, 0.10856055803724440, 0.10865616508752050, 0.10875178153788770, 0.10881898510241040, 0.10891461524611720, 0.10901025478848050, 0.10910590372913510, 0.10920156206771680, 0.10929722980386010, 0.10939290693719680, 0.10946013764120620, 0.10955582846000580, 0.10965152867455070, 0.10974723828447230, 0.10984295728940100, 0.10993868568896500, 0.11003442348279260, 0.11010168129156320, 0.11019743276291950, 0.11029319362707790, 0.11038896388366380, 0.11048474353230200, 0.11058053257261660, 0.11067633100423070, 0.11074361588288990, 0.11083942798404330, 0.11093524947502080, 0.11103108035544260, 0.11112692062492940, 0.11122277028309900, 0.11129007792233150, 0.11138594124309970, 0.11148181395106530, 0.11157769604584240, 0.11167358752704740, 0.11176948839429490, 0.11186539864719820, 0.11193273329119890, 0.11202865719860860, 0.11212459049017340, 0.11222053316550480, 0.11231648522421360, 0.11241244666590850, 0.11247980401450740, 0.11257577910368000, 0.11267176357432590, 0.11276775742605400, 0.11286376065846790, 0.11295977327117430, 0.11302715329841100, 0.11312317955152500, 0.11321921518340770, 0.11331526019366050, 0.11341131458188690, 0.11350737834768520, 0.11357478102750820, 0.11367085842660580, 0.11376694520173980, 0.11386304135251000, 0.11395914687851340, 0.11402656793232230, 0.11412268708561430, 0.11421881561259560, 0.11431495351285900, 0.11441110078599750, 0.11450725743160510, 0.11457470109004550, 0.11467087135575920, 0.11476705099238520, 0.11486323999951280, 0.11495943837673250, 0.11502690036914580, 0.11512311236040120, 0.11521933372018170, 0.11531556444807380, 0.11541180454366400, 0.11550805400653530, 0.11557553855532960, 0.11567180162498010, 0.11576807406033400, 0.11586435586097490, 0.11596064702648290, 0.11602814986899390, 0.11612445463514820, 0.11622076876458380, 0.11631709225687820, 0.11641342511160850, 0.11648094622947650, 0.11657729267869500, 0.11667364848875340, 0.11677001365922510, 0.11686638818968470, 0.11693392756450320, 0.11703031568326560, 0.11712671316040890, 0.11722311999550410, 0.11731953618812280, 0.11738709380143440, 0.11748352357614060, 0.11757996270675360, 0.11767641119284080, 0.11777286903396880, 0.11784044486726630, 0.11793691628424030, 0.11803339705462880, 0.11812988717799660, 0.11822638665390650, 0.11829398068863330, 0.11839049373411910, 0.11848701613051220, 0.11858354787737080, 0.11865115588046580, 0.11874770119180610, 0.11884425585196950, 0.11894081986051460, 0.11903739321699640, 0.11910501938804440, 0.11920160630268950, 0.11929820256361810, 0.11939480817038560, 0.11949142312254430, 0.11955906744285080, 0.11965569594682520, 0.11975233379452770, 0.11984898098550940, 0.11991663923249840, 0.12001329997013960, 0.12010997004938950, 0.12020664946979520, 0.12030333823090360, 0.12037101459342920, 0.12046771689479990, 0.12056442853519330, 0.12066114951415310, 0.12072883977642280, 0.12082557429044990, 0.12092231814135630, 0.12101907132868230, 0.12108677547871080, 0.12118354219589290, 0.12128031824779890, 0.12137710363396770, 0.12147389835393540, 0.12154162057054210, 0.12163842881389730, 0.12173524638934700, 0.12183207329642530, 0.12189980937367350, 0.12199664979888840, 0.12209349955402000, 0.12219035863859830, 0.12225810856442570, 0.12235498116187240, 0.12245186308704710, 0.12254875433947770, 0.12261651810179750, 0.12271342286181070, 0.12281033694735270, 0.12290726035794680, 0.12297503794464840, 0.12307197485752440, 0.12316892109371820, 0.12326587665275210, 0.12343063710769670, 0.12352761548478900, 0.12362460318249930, 0.12378940957087180, 0.12388642007907200, 0.12398343990565610, 0.12414829220545580, 0.12424533483493410, 0.12434238678055160, 0.12441021954319900, 0.12450728496971410, 0.12460435971060280, 0.12470144376537520, 0.12476929029149430, 0.12486638782177540, 0.12496349466416680, 0.12506061081817620, 0.12512847109551410, 0.12522560071962700, 0.12532273965357620, 0.12541988789686680, 0.12548776191314530, 0.12558492362111640, 0.12568209463663980, 0.12577927495921820, 0.12584716270213560, 0.12594435648395340, 0.12604155957102920, 0.12620667342009390, 0.12630389926570800, 0.12640113441427520, 0.12646904542630910, 0.12656629402448790, 0.12666355192380980, 0.12676081912376840, 0.12682874382856390, 0.12692602447264750, 0.12702331441554930, 0.12712061365676140, 0.12718855204192860, 0.12728586472176060, 0.12738318669807640, 0.12745113461275800, 0.12754847002349050, 0.12764581472887650, 0.12774316872840240, 0.12781113030179050, 0.12790849773019710, 0.12800587445090530, 0.12807384553767300, 0.12817123568303710, 0.12826863511885710, 0.12836604384461500, 0.12843402856835460, 0.12853145071320380, 0.12862888214613830, 0.12879432121485040, 0.12889177534885730, 0.12898923876856710, 0.12905724660466640, 0.12915472343362590, 0.12925220954642350, 0.12932022686348020, 0.12941772638125970, 0.12951523518100530, 0.12961275326218840, 0.12968078417253400, 0.12977831565307410, 0.12987585641317200, 0.12994389678818780, 0.13004145094335360, 0.13013901437619200, 0.13030464103252840, 0.13040222713191830, 0.13049982250655520, 0.13056788590124510, 0.13066549466098290, 0.13076311269406900, 0.13083118553011300, 0.13092881694397920, 0.13102645762929050, 0.13119219396146240, 0.13128985729275950, 0.13138752989304820, 0.13145562569394860, 0.13155331166497750, 0.13165100690308120, 0.13171911212191710, 0.13181682072640880, 0.13191453859605220, 0.13198265322580680, 0.13208038445747730, 0.13217812495237140, 0.13227587470993900, 0.13234400283856920, 0.13244176595241060, 0.13253953832698830, 0.13260767585003310, 0.13270546157650200, 0.13280325656176590, 0.13287140347217780, 0.13296921180494110, 0.13306702939455190, 0.13313518568527430, 0.13323301661798330, 0.13333085680558630, 0.13339902246955390, 0.13349687599584570, 0.13359473877507170, 0.13376078991870750, 0.13385867528317350, 0.13402475836670890, 0.13412266631001480, 0.13422058350175480, 0.13428878131995020, 0.13438671183568430, 0.13448465159787300, 0.13455285875849550, 0.13465081184022880, 0.13474877416643310, 0.13481699066237000, 0.13491496630365840, 0.13501295118742850, 0.13508117701155740, 0.13517917520594380, 0.13527718264081580, 0.13534541778600570, 0.13544343852701630, 0.13554146850651240, 0.13560971296562330, 0.13570775624677100, 0.13580580876439650, 0.13587406253027940, 0.13597212834506130, 0.13607020339430840, 0.13613846645980580, 0.13623655480170370, 0.13633465237604880, 0.13640292473399390, 0.13650103559647570, 0.13659915568938120, 0.13666743733259850, 0.13676557070911600, 0.13693200423533310, 0.13703016011932410, 0.13719662542187400, 0.13729480380676160, 0.13736310921553420, 0.13746130087186020, 0.13755950175105180, 0.13762781641881540, 0.13772603056488800, 0.13782425393177690, 0.13789257785131520, 0.13799081448051820, 0.13808906032848230, 0.13815739349257000, 0.13825565259827270, 0.13835392092067430, 0.13842226332207670, 0.13852054489763260, 0.13861883568781970, 0.13868718731929360, 0.13878549135804100, 0.13895216546364030, 0.13905049195890420, 0.13911885799841470, 0.13921719773449790, 0.13931554667958650, 0.13938392192991830, 0.13948228411120840, 0.13958065549941490, 0.13964903995329310, 0.13974742457307470, 0.13991421204781740, 0.14001261909936000, 0.14008101791741010, 0.14017943819273340, 0.14027786766929130, 0.14034627567155320, 0.14044471836724090, 0.14054317026205380, 0.14061158744122060, 0.14071005255050220, 0.14087695320555040, 0.14097544072164200, 0.14104387222093050, 0.14114237294364200, 0.14124088285974410, 0.14130932351651960, 0.14140784663455710, 0.14157482875077740, 0.14167337425731640, 0.14174182920211520, 0.14184038790270210, 0.14193895579090390, 0.14200741987371170, 0.14210600095125250, 0.14227306442771630, 0.14237166787534800, 0.14244014621398230, 0.14253876284302650, 0.14263738865387010, 0.14270587611097520, 0.14280451509849790, 0.14287300767286480, 0.14297165983384970, 0.14307032117294900, 0.14313882285358770, 0.14323749736140130, 0.14340469182466940, 0.14350338867238430, 0.14357190455640230, 0.14367061456484150, 0.14376933374551570, 0.14383785871616830, 0.14393659105279440, 0.14400512112000050, 0.14410386660933580, 0.14420262126718220, 0.14427116040876440, 0.14436992821453350, 0.14443847244469930, 0.14453725339514070, 0.14463604351035170, 0.14470459680261170, 0.14480340005769220, 0.14497077482224310, 0.14506960037494950, 0.14513816779759920, 0.14523700648209650, 0.14540443079037040, 0.14550329176063620, 0.14557187329335050, 0.14567074738730650, 0.14583822119898140, 0.14593711756680970, 0.14600571318922670, 0.14610462267261980, 0.14627214594727290, 0.14637107769260180, 0.14643968738432240, 0.14653863223706540, 0.14660724697731480, 0.14670620493417560, 0.14680517203687890, 0.14687379577746800, 0.14697277597941230, 0.14704140476047680, 0.14714039805835470, 0.14723940049824460, 0.14730803826722950, 0.14740705379816100, 0.14747569659955500, 0.14757472521821220, 0.14774241475190690, 0.14784146559154860, 0.14791012239274830, 0.14800918631188370, 0.14807784813423380, 0.14817692512953540, 0.14827601125754640, 0.14834468203799170, 0.14844378123724030, 0.14851245703073630, 0.14861156929788570, 0.14877937543295540, 0.14887850989188830, 0.14894719963591910, 0.14904634715446240, 0.14911504190023990, 0.14921420247504410, 0.14938207584708630, 0.14948125859650600, 0.14954996726403920, 0.14964916306139560, 0.14971787671934490, 0.14981708556127570, 0.14998502608958030, 0.15008425708888500, 0.15015298463973890, 0.15025222867526070, 0.15032096120517460, 0.15042021827353770, 0.15058822587713060, 0.15068750508554880, 0.15075625147944780, 0.15085554371231720, 0.15092429507389360, 0.15102360032782540, 0.15109235665386520, 0.15119167492546790, 0.15129100230206090, 0.15135976749863330, 0.15145910788786450, 0.15152787804070510, 0.15162723143917340, 0.15169600654506060, 0.15179537294936250, 0.15196353241179970, 0.15206292091624010, 0.15213170981985010, 0.15223111132165530, 0.15229990516686930, 0.15239931966262350, 0.15246811844621190, 0.15256754593249290, 0.15273579012460870, 0.15283523968838170, 0.15290405223230730, 0.15300351477809760, 0.15307233224892130, 0.15317180777329610, 0.15324063016777900, 0.15334011866729980, 0.15340894598220100, 0.15350844745342750, 0.15367679412499180, 0.15377631764582930, 0.15384515867529960, 0.15394469515928060, 0.15401354109765320, 0.15411309054132390, 0.15418194138534700, 0.15428150378525110, 0.15435035953167310, 0.15444993488435020, 0.15461838383190230, 0.15471798120612550, 0.15478685062118410, 0.15488646093956540, 0.15495533524546580, 0.15505495850453150, 0.15512383769801300, 0.15522347389428680, 0.15529235797208590, 0.15539200710208670, 0.15546089606093760, 0.15556055812118230, 0.15572912694481910, 0.15582881099318100, 0.15589771356623640, 0.15599741053616570, 0.15606631797866870, 0.15616602786666910, 0.15623494017534570, 0.15633466297791610, 0.15640358014948990, 0.15650331586312640, 0.15657223789431870, 0.15667198651551560, 0.15674091340304650, 0.15684067492829180, 0.15700938109465810, 0.15717810500781360, 0.15734684666094940, 0.15744665592248190, 0.15751560604725370, 0.15761542819703700, 0.15768438315990710, 0.15778421819441090, 0.15785317799208690, 0.15795302590777680, 0.15802199053696260, 0.15812185133030090, 0.15819082078770060, 0.15829069445514590, 0.15835966873746010, 0.15845955527546650, 0.15852853437939400, 0.15862843378441460, 0.15869741770665210, 0.15879732997513580, 0.15886631871237810, 0.15896624384076830, 0.15903523738970950, 0.15913517537444750, 0.15930412456930180, 0.15947309141845430, 0.15964207591502400, 0.15981107805212170, 0.15998009782285590, 0.16014913522032660, 0.16031819023763100, 0.16041822713178240, 0.16048726286785870, 0.16058731258800070, 0.16065635310409560, 0.16075641564663520, 0.16082546093942000, 0.16092553630076120, 0.16099458636690740, 0.16109467454345030, 0.16116372937962610, 0.16126383036776690, 0.16133288997063910, 0.16143300376677040, 0.16150206813300380, 0.16160219473351550, 0.16167126385977320, 0.16177140326105070, 0.16184047714399310, 0.16200970797870590, 0.16217895635694670, 0.16234822227174610, 0.16251750571612930, 0.16268680668311540, 0.16285612516571880, 0.16302546115694750, 0.16319481464980550, 0.16326392741082070, 0.16336418563728930, 0.16343330312334570, 0.16353357411239180, 0.16360269632013010, 0.16370298006809930, 0.16377210699415840, 0.16387240349739340, 0.16394153513841080, 0.16404184439324930, 0.16411098074585960, 0.16421130274863800, 0.16428044380947490, 0.16438077855652440, 0.16444992432221840, 0.16455027180986710, 0.16461942227704830, 0.16471978250162070, 0.16478893766691610, 0.16488931062473350, 0.16495847048476850, 0.16512802072354670, 0.16529758837618670, 0.16536675854186300, 0.16546717343561820, 0.16553634828438680, 0.16563677589476580, 0.16570595542324340, 0.16580639574654890, 0.16587557995135100, 0.16597603298388150, 0.16604522186162170, 0.16614568759967170, 0.16621488114696100, 0.16631535958682260, 0.16638455780027090, 0.16655425181444640, 0.16672396318237750, 0.16679317163149210, 0.16689369189694890, 0.16696290500052120, 0.16706343795104010, 0.16713265570567110, 0.16723320133752460, 0.16730242373981350, 0.16740298204927010, 0.16747220909581490, 0.16757278007914020, 0.16764201176653600, 0.16781183174483170, 0.16788106897343600, 0.16798166902355330, 0.16805091088467150, 0.16815152359554430, 0.16822077008576560, 0.16832139545364420, 0.16839064656955550, 0.16849128459068670, 0.16856054032887300, 0.16873045135654440, 0.16890037964539100, 0.16896964551185120, 0.16907032518822790, 0.16913959566518140, 0.16924028797786450, 0.16930956306188870, 0.16941026800710590, 0.16947954769477510, 0.16964954955663860, 0.16971883473174610, 0.16981956864027060, 0.16988885841063830, 0.16998960493845770, 0.17005889930065510, 0.17015965844397990, 0.17022895739457360, 0.17039903268516800, 0.17046833710117460, 0.17056912516520610, 0.17063843416120470, 0.17073923482745070, 0.17080854840000220, 0.17090936166465900, 0.17097867981032200, 0.17114882838491260, 0.17121815197391630, 0.17131899411652080, 0.17138832227021230, 0.17148917699788340, 0.17155850971281530, 0.17165937702173450, 0.17172871429445730, 0.17189893600786430, 0.17196827870180760, 0.17206917484575670, 0.17213852208904880, 0.17223943080085070, 0.17230878259003470, 0.17247906019747360, 0.17254841739071000, 0.17264935490406750, 0.17271871663473970, 0.17281966670251420, 0.17288903296715910, 0.17305936638065800, 0.17312873803215940, 0.17322971686792100, 0.17329909304492420, 0.17340008442162730, 0.17346946512066280, 0.17363985425204740, 0.17370924032071510, 0.17381026043174340, 0.17387965101395730, 0.17398068365241150, 0.17405007874469690, 0.17422052350558770, 0.17428992395025340, 0.17439098528927690, 0.17446039023551330, 0.17456146408840720, 0.17463087353273200, 0.17480137383454680, 0.17487078861397300, 0.17497189113358550, 0.17504131040258470, 0.17521184917755860, 0.17528127376939000, 0.17538240493151110, 0.17545183400438960, 0.17555297765705340, 0.17562241120748720, 0.17569184559091510, 0.17579300537128740, 0.17586244422722630, 0.17596361648838840, 0.17603305981334180, 0.17620369234185410, 0.17627314096001080, 0.17637434180534840, 0.17644379488396940, 0.17661446573198840, 0.17668392409149760, 0.17678515349664090, 0.17685461630805270, 0.17702532543030280, 0.17709479351027410, 0.17719605145080860, 0.17726552397411210, 0.17736679436212540, 0.17743627132524810, 0.17750574910476800, 0.17760703555623210, 0.17767651777050190, 0.17777781665960580, 0.17784730330511040, 0.17791679076324130, 0.17801810570112750, 0.17808759758541750, 0.17818892495108410, 0.17825842125801270, 0.17832791837379450, 0.17842926177354900, 0.17849876330688810, 0.17860011912454370, 0.17866962507191530, 0.17873913182436370, 0.17884050366138660, 0.17891001482278040, 0.17901139906780600, 0.17908091463461580, 0.17915043100272330, 0.17925183125236840, 0.17932135202079850, 0.17949228983374880, 0.17956181579648360, 0.17966324443405870, 0.17973277478848440, 0.17990375055678620, 0.17997328609309320, 0.18007474309386050, 0.18014428301321650, 0.18031529669103610, 0.18038484177983760, 0.18048632711901270, 0.18055587658221050, 0.18062542683312130, 0.18072692812364680, 0.18079648274384020, 0.18096755538252040, 0.18103711515236660, 0.18113864474160100, 0.18120820887206190, 0.18137931930103780, 0.18144888856868130, 0.18155044643172100, 0.18162002005130070, 0.18168959444877120, 0.18179116822449130, 0.18186074696877030, 0.18203191616819340, 0.18210150002980800, 0.18220310203944820, 0.18227269023917700, 0.18234227921076070, 0.18244389710921400, 0.18251349041377410, 0.18268471826628370, 0.18275431666830090, 0.18285596276067530, 0.18292556548695940, 0.18299516897905500, 0.18309683093631020, 0.18316643874752630, 0.18333772513549050, 0.18340733802425250, 0.18350902813531430, 0.18357864533447110, 0.18364826329338830, 0.18374996924533270, 0.18381959150949010, 0.18399093631500820, 0.18406056363676710, 0.18423192932054770, 0.18430156169250640, 0.18440331157484930, 0.18447294823814180, 0.18454258565289330, 0.18464435134304610, 0.18471399304396420, 0.18488541698304050, 0.18495506371417020, 0.18512650847097590, 0.18519616022489970, 0.18529796975682800, 0.18536762578297890, 0.18543728255227350, 0.18553910785881560, 0.18560876889515830, 0.18578027174450120, 0.18584993778360530, 0.18602146138996320, 0.18609113242439500, 0.18626267677126480, 0.18633235279358590, 0.18643423759424400, 0.18650391786444890, 0.18657359886721650, 0.18667549940008780, 0.18674518464554460, 0.18681487062131200, 0.18691678687730310, 0.18698647709056150, 0.18715810000188800, 0.18722779517549390, 0.18739943874982220, 0.18746913887631760, 0.18764080309707040, 0.18771050816899260, 0.18788219301957860, 0.18795190302946110, 0.18805389427035030, 0.18812360849327710, 0.18819332343364830, 0.18829533034587820, 0.18836504949407750, 0.18843476935746240, 0.18853679193188210, 0.18860651599787570, 0.18867624077679570, 0.18877827900424550, 0.18884800798055030, 0.18891773766752260, 0.18901979153883290, 0.18908952541796350, 0.18915926000549920, 0.18926132951149430, 0.18933106828595930, 0.18940080776656670, 0.18950289289806100, 0.18957263656036580, 0.18964238092654900, 0.18974448167434780, 0.18981423021699270, 0.18988397946125260, 0.18998609581615270, 0.19005584923163520, 0.19022773529925720, 0.19029749358006920, 0.19036725255796420, 0.19046940009942510, 0.19053916323805570, 0.19060892707150150, 0.19071109019240340, 0.19078085818133680, 0.19085062686281640, 0.19095280555392260, 0.19102257838563820, 0.19109235190763220, 0.19119454615969630, 0.19126432382667080, 0.19133410218165280, 0.19143631198542060, 0.19150609448012560, 0.19157587766056740, 0.19167810300677530, 0.19174789032167890, 0.19181767832004690, 0.19191991919942360, 0.19198971132698950, 0.19205950413574640, 0.19216176053901070, 0.19223155747169830, 0.19230135508330260, 0.19247342873143160, 0.19254323113833820, 0.19271532508179680, 0.19278513227645520, 0.19295724649838500, 0.19302705847324270, 0.19319919295677220, 0.19326900970427020, 0.19333882712090820, 0.19344116443251460, 0.19351098594509160, 0.19358080812452980, 0.19368316090115470, 0.19375298717124420, 0.19382281410591460, 0.19392518233821550, 0.19399501335824800, 0.19406484504058050, 0.19423706448160630, 0.19430690090402480, 0.19447914051680580, 0.19454898167173160, 0.19461882348372100, 0.19472124143931670, 0.19479108731916670, 0.19486093385379610, 0.19496336722459280, 0.19503321782177910, 0.19510306907145950, 0.19527537315500130, 0.19534522911214050, 0.19551755329424850, 0.19558741395125050, 0.19565727525550160, 0.19575975821492040, 0.19582962356418460, 0.19589948955840950, 0.19600198789240000, 0.19607185792632130, 0.19614172860291480, 0.19631411701302270, 0.19638399236437460, 0.19645386835543500, 0.19655640079963330, 0.19662628081813070, 0.19669616147404510, 0.19679870926148200, 0.19686859393950720, 0.19693847925265720, 0.19711093170381130, 0.19718082166657440, 0.19725071226149540, 0.19735329408633500, 0.19742318869108430, 0.19749308392569810, 0.19766558030145770, 0.19773548016813220, 0.19790799647294850, 0.19797790096404750, 0.19804780607974550, 0.19815043718079420, 0.19822034628867850, 0.19829025601886440, 0.19846281611724180, 0.19853273045427120, 0.19860264541062910, 0.19870531042493710, 0.19877522936116160, 0.19884514891441580, 0.19901775271471580, 0.19908767685721250, 0.19915760161376290, 0.19926030049009680, 0.19933022921417810, 0.19940015855001210, 0.19957280596045630, 0.19964273986791160, 0.19971267438414130, 0.19981540707117340, 0.19988534554258330, 0.19995528462046420, 0.20012797554913270, 0.20019791918099400, 0.20026786341634640, 0.20044057804081630, 0.20051052682016820, 0.20068326117499940, 0.20075321449067060, 0.20082316840454550, 0.20099592640290280, 0.20106588484310550, 0.20113584387852630, 0.20123866253189670, 0.20130862549073800, 0.20137858904248920, 0.20155139032245530, 0.20162135838284290, 0.20169132703315470, 0.20186415187457890, 0.20193412502351840, 0.20200409875939450, 0.20210696949267190, 0.20217694713253720, 0.20224692535702670, 0.20241979333516430, 0.20248977604056030, 0.20255975932759030, 0.20273265078493070, 0.20280263854284180, 0.20287262687939510, 0.20304554178613140, 0.20311553458353540, 0.20318552795658810, 0.20328846903235640, 0.20335846628288930, 0.20342846410675620, 0.20360142195233620, 0.20367142421929000, 0.20374142705658210, 0.20391440826904810, 0.20398441553937990, 0.20405442337705300, 0.20422742792650820, 0.20429744018716790, 0.20436745301217050, 0.20454048086869420, 0.20461049810662370, 0.20468051590589710, 0.20485356703954580, 0.20492358924168110, 0.20499361200215850, 0.20509665978571680, 0.20516668638296460, 0.20523671353623340, 0.20530674124484310, 0.20540980730450900, 0.20547983884281450, 0.20554987093413810, 0.20572298789664320, 0.20579302436292220, 0.20586306137921500, 0.20603620150591460, 0.20610624288707520, 0.20617628481524330, 0.20634944807608140, 0.20641949435902400, 0.20648954118596760, 0.20666272755086280, 0.20673277872248140, 0.20680283043509290, 0.20687288268801640, 0.20697603987394160, 0.20704609592112320, 0.20711615250628760, 0.20718620962875530, 0.20728938498896170, 0.20735944589858570, 0.20742950734318290, 0.20749956932207130, 0.20767282859847020, 0.20774289488937030, 0.20781296171154950, 0.20798624396433830, 0.20805631508840650, 0.20812638674074010, 0.20829969193971550, 0.20836976788380890, 0.20843984435315270, 0.20861317246808930, 0.20868325321905790, 0.20875333449226070, 0.20892668549291010, 0.20899677103759720, 0.20906685710150150, 0.20913694368394110, 0.20931032128283320, 0.20938041212427420, 0.20945050348123110, 0.20962390389813420, 0.20969399950393980, 0.20976409562224180, 0.20993751882683230, 0.21000761918382340, 0.21007772005028990, 0.21014782142554780, 0.21025116601222220, 0.21032127110721320, 0.21039137670865690, 0.21046148281586980, 0.21063495521735920, 0.21070506554058600, 0.21077517636655810, 0.21094867145747490, 0.21101878648928440, 0.21108890202081400, 0.21115901805137970, 0.21133253949792180, 0.21140265972179960, 0.21147278044168690, 0.21164632450963100, 0.21171644941264120, 0.21178657480863290, 0.21185670069692190, 0.21203027103642800, 0.21210040109530020, 0.21217053164344040, 0.21234412453621210, 0.21241425924473390, 0.21248439443949340, 0.21255453011980510, 0.21272814919994330, 0.21279828902808330, 0.21286842933874350, 0.21304207090390100, 0.21311221535217510, 0.21318236027993730, 0.21325250568650170, 0.21342617335469810, 0.21349632288630770, 0.21356647289368520, 0.21363662337614490, 0.21381031710074170, 0.21388047169567040, 0.21395062676264520, 0.21412434286608750, 0.21419450203529890, 0.21426466167351940, 0.21433482178006350, 0.21450856385537710, 0.21457872805156670, 0.21464889271304140, 0.21471905783911460, 0.21489282583955020, 0.21496299504267070, 0.21503316470735030, 0.21510333483290220, 0.21527712871167180, 0.21534730290166510, 0.21541747754948930, 0.21548765265445820, 0.21566147236473590, 0.21573165152153230, 0.21580183113243080, 0.21587201119674440, 0.21604585669166560, 0.21611604079518520, 0.21618622534907600, 0.21625641035265020, 0.21643028158531360, 0.21650047061546540, 0.21657066009225560, 0.21664085001499760, 0.21681474693846110, 0.21688494087514330, 0.21695513525473000, 0.21702533007653370, 0.21719925264381950, 0.21726945146691960, 0.21733965072918850, 0.21740985042993870, 0.21758379859403020, 0.21765400228342470, 0.21772420640825100, 0.21779441096782160, 0.21796838468166440, 0.21803859321721960, 0.21810880218446770, 0.21817901158272040, 0.21835301079922230, 0.21842322416079330, 0.21849343795031770, 0.21856365216710550, 0.21863386681047010, 0.21880789500656820, 0.21887811359821090, 0.21894833261337570, 0.21901855205137390, 0.21919260564689440, 0.21926282902048820, 0.21933305281386100, 0.21940327702632320, 0.21957735597405380, 0.21964758410942070, 0.21971781266082140, 0.21978804162756660, 0.21985827100896730, 0.22003237875721030, 0.22010261204644920, 0.22017284574728520, 0.22024307985902980, 0.22041721285599030, 0.22048745086286610, 0.22055768927759140, 0.22062792809947620, 0.22069816732783150, 0.22087232900212630, 0.22094257211052800, 0.22101281562233930, 0.22108305953686980, 0.22132749413807000, 0.22139774231958240, 0.22146799090006300, 0.22153823987882210, 0.22171245525212260, 0.22178270808310260, 0.22185296130929670, 0.22192321493001530, 0.22199346894456830, 0.22216771280472560, 0.22223797065638670, 0.22230822889881670, 0.22237848753132610, 0.22244874655322410, 0.22262301883308230, 0.22269328167696570, 0.22276354490717130, 0.22283380852300880, 0.22290407252378730, 0.22307837315613270, 0.22314864096376390, 0.22321890915326870, 0.22328917772395580, 0.22353377559269690, 0.22360404833558730, 0.22367432145589990, 0.22374459495294370, 0.22381486882602840, 0.22398922596147950, 0.22405950361112390, 0.22412978163373790, 0.22420006002862980, 0.22427033879510930, 0.22444472408106540, 0.22451500660894350, 0.22458528950533680, 0.22465557276955350, 0.22472585640090270, 0.22490026976992200, 0.22497055714749950, 0.22504084488913510, 0.22511113299413780, 0.22518142146181570, 0.22542615504512730, 0.22549644760345410, 0.22556674052068880, 0.22563703379614020, 0.22570732742911600, 0.22588180012004810, 0.22595209746649840, 0.22602239516739630, 0.22609269322205060, 0.22616299162976810, 0.22640779429635630, 0.22647809675233420, 0.22654839955760580, 0.22661870271147840, 0.22668900621325890, 0.22686353791100200, 0.22693384509346140, 0.22700415262074960, 0.22707446049217500, 0.22714476870704400, 0.22738964000862100, 0.22745995222931130, 0.22753026478967230, 0.22760057768901040, 0.22767089092663400, 0.22791579820100440, 0.22798611542166970, 0.22805643297684450, 0.22812675086583550, 0.22819706908794960, 0.22844201220575250, 0.22851233438811560, 0.22858265689982490, 0.22865297974018700, 0.22872330290850870, 0.22896828174028180, 0.22903860884604500, 0.22910893627598870, 0.22917926402942000, 0.22924959210564480, 0.22949460652182550, 0.22956493851267070, 0.22963527082252930, 0.22970560345070710, 0.22977593639651060, 0.23002098626743480, 0.23009132310502410, 0.23016166025645690, 0.23023199772103950, 0.23030233549807720, 0.23037267358687650, 0.23061776233995620, 0.23068810429460290, 0.23075844655722680, 0.23082878912713430, 0.23089913200363100, 0.23114425593413750, 0.23121460265361770, 0.23128494967590090, 0.23135529700029330, 0.23142564462609990, 0.23149599255262680, 0.23174115504997300, 0.23181150679351330, 0.23188185883398590, 0.23195221117069630, 0.23202256380295000, 0.23209291673005250, 0.23233811762633780, 0.23240847434446640, 0.23247883135365430, 0.23254918865320670, 0.23261954624242820, 0.23268990412062510, 0.23293514324781240, 0.23300550489103200, 0.23307586681943480, 0.23314622903232600, 0.23321659152901070, 0.23328695430879290, 0.23353223149871140, 0.23360259801749760, 0.23367296481558860, 0.23374333189228930, 0.23381369924690470, 0.23388406687873940, 0.23419975330788420, 0.23427012492611090, 0.23434049681706650, 0.23441086898005520, 0.23448124141438210, 0.23455161411935150, 0.23479697034595000, 0.23486734673473370, 0.23493772339036310, 0.23500810031214210, 0.23507847749937560, 0.23514885495136730, 0.23521923266742220, 0.23546462982492700, 0.23553501119562320, 0.23560539282658390, 0.23567577471711260, 0.23574615686651350, 0.23581653927409100, 0.23588692193914880, 0.23613235981603190, 0.23620274610653970, 0.23627313265072710, 0.23634351944789800, 0.23641390649735660, 0.23648429379840660, 0.23655468135035170, 0.23687055088309390, 0.23694094227837090, 0.23701133392004400, 0.23708172580741720, 0.23715211793979450, 0.23722251031647870, 0.23729290293677350, 0.23753842494052630, 0.23760882112472320, 0.23767921754872610, 0.23774961421183930, 0.23782001111336530, 0.23789040825260810, 0.23796080562887060, 0.23803120324145720, 0.23827676860462310, 0.23834716974875140, 0.23841757112539630, 0.23848797273386190, 0.23855837457345080, 0.23862877664346600, 0.23869917894321100, 0.23876958147198930, 0.23901518993456190, 0.23908559596250030, 0.23915600221566340, 0.23922640869335370, 0.23929681539487430, 0.23936722231952890, 0.23943762946662010, 0.23950803683545080, 0.23982409897278710, 0.23989451002630310, 0.23996492129705160, 0.24003533278433440, 0.24010574448745440, 0.24017615640571500, 0.24024656853841830, 0.24031698088486770, 0.24063309376359370, 0.24070350975119300, 0.24077392594802800, 0.24084434235340150, 0.24091475896661580, 0.24098517578697380, 0.24105559281377780, 0.24112601004633070, 0.24119642748393450, 0.24151259409166100, 0.24158301512303610, 0.24165343635495030, 0.24172385778670550, 0.24179427941760440, 0.24186470124694910, 0.24193512327404220, 0.24200554549818620, 0.24207596791868250, 0.24239218777585850, 0.24246261374271580, 0.24253303990141070, 0.24260346625124630, 0.24267389279152460, 0.24274431952154700, 0.24281474644061680, 0.24288517354803530, 0.24295560084310450, 0.24327187346977900, 0.24334230426376680, 0.24341273524088850, 0.24348316640044580, 0.24355359774174140, 0.24362402926407630, 0.24369446096675300, 0.24376489284907360, 0.24383532491033900, 0.24390575714985250, 0.24429252102601280, 0.24436295688687790, 0.24443339292077230, 0.24450382912699800, 0.24457426550485660, 0.24464470205365020, 0.24471513877267990, 0.24478557566124760, 0.24485601271865600, 0.24492644994420520, 0.24531327698029940, 0.24538371776193930, 0.24545415870650000, 0.24552459981328330, 0.24559504108159070, 0.24566548251072370, 0.24573592409998310, 0.24580636584867140, 0.24587680775608940, 0.24594724982153890, 0.24601769204432130, 0.24640458477867130, 0.24647503048771530, 0.24654547634886890, 0.24661592236143360, 0.24668636852470980, 0.24675681483799970, 0.24682726130060400, 0.24689770791182430, 0.24696815467096200, 0.24703860157731730, 0.24710904863019330, 0.24717949582888910, 0.24763690723255600, 0.24770735798370570, 0.24777780887475110, 0.24784825990499330, 0.24791871107373360, 0.24798916238027320, 0.24805961382391180, 0.24813006540395230, 0.24820051711969420, 0.24827096897043930, 0.24834142095548880, 0.24841187307414300, 0.24886935954850120, 0.24893981512840650, 0.24901027083598900, 0.24908072667054870, 0.24915118263138720, 0.24922163871780480, 0.24929209492910310, 0.24936255126458230, 0.24943300772354350, 0.24950346430528690, 0.24957392100911400, 0.24964437783432540, 0.24971483478022220, 0.24978529184610400, 0.24985574903127300, 0.25031331893367680, 0.25038377947313820, 0.25045424012595450, 0.25052470089142660, 0.25059516176885480, 0.25066562275753950, 0.25073608385678220, 0.25080654506588270, 0.25087700638414190, 0.25094746781086070, 0.25101792934533940, 0.25108839098687810, 0.25115885273477820, 0.25122931458833980, 0.25129977654686370, 0.25137023860965070, 0.25144070077600090, 0.25196882389758620, 0.25203928939835130, 0.25210975499604510, 0.25218022068996710, 0.25225068647941900, 0.25232115236370090, 0.25239161834211280, 0.25246208441395510, 0.25253255057852830, 0.25260301683513320, 0.25267348318306970, 0.25274394962163840, 0.25281441615013950, 0.25288488276787310, 0.25295534947414010, 0.25302581626824080, 0.25309628314947550, 0.25316675011714420, 0.25323721717054750, 0.25330768430898570, 0.25397685060679230, 0.25404732107865900, 0.25411779162752220, 0.25418826225268230, 0.25425873295343900, 0.25432920372909280, 0.25439967457894410, 0.25447014550229270, 0.25454061649843860, 0.25461108756668240, 0.25468155870632470, 0.25475202991666500, 0.25482250119700340, 0.25489297254664000, 0.25496344396487550, 0.25503391545100990, 0.25510438700434270, 0.25517485862417500, 0.25524533030980600, 0.25531580206053680, 0.25538627387566660, 0.25545674575449610, 0.25552721769632520, 0.25559768970045400, 0.25566816176618250, 0.25573863389281120, 0.25668983316480310, 0.25676030857906920, 0.25683078404339200, 0.25690125955707150, 0.25697173511940710, 0.25704221072969930, 0.25711268638724820, 0.25718316209135310, 0.25725363784131430, 0.25732411363643170, 0.25739458947600570, 0.25746506535933570, 0.25753554128572190, 0.25760601725446430, 0.25767649326486250, 0.25774696931621660, 0.25781744540782720, 0.25788792153899330, 0.25795839770901550, 0.25802887391719340, 0.25809935016282640, 0.25816982644521550, 0.25824030276366020, 0.25831077911746040, 0.25838125550591590, 0.25845173192832700, 0.25852220838399280, 0.25859268487221430, 0.25866316139229070, 0.25873363794352220, 0.25880411452520810, 0.25887459113664960, 0.25894506777714570, 0.25901554444599640, 0.25908602114250170, 0.25915649786596130, 0.25922697461567520, 0.25929745139094340, 0.25936792819106550, 0.25943840501534220, 0.25950888186307290, 0.25957935873355750, 0.25964983562609570, 0.25972031253998710, 0.25979078947453240, 0.25986126642903140, 0.25993174340278380, 0.26000222039508940, 0.26007269740524730, 0.26014317443255890, 0.26021365147632350, 0.26028412853584050, 0.26035460561041050, 0.26042508269933260, 0.26049555980190680, 0.26056603691743410, 0.26303273868086470, 0.26310321579639200, 0.26317369289896620, 0.26324416998788840, 0.26331464706245830, 0.26338512412197530, 0.26345560116573990, 0.26352607819305150, 0.26359655520320940, 0.26366703219551500, 0.26373750916926730, 0.26380798612376650, 0.26387846305831170, 0.26394893997220320, 0.26401941686474130, 0.26408989373522600, 0.26416037058295670, 0.26423084740723330, 0.26430132420735540, 0.26437180098262360, 0.26444227773233750, 0.26451275445579720, 0.26458323115230240, 0.26465370782115310, 0.26472418446164920, 0.26479466107309070, 0.26486513765477660, 0.26493561420600810, 0.26500609072608450, 0.26507656721430600, 0.26514704366997180, 0.26521752009238290, 0.26528799648083840, 0.26535847283463860, 0.26542894915308330, 0.26549942543547240, 0.26556990168110540, 0.26564037788928330, 0.26571085405930550, 0.26578133019047170, 0.26585180628208230, 0.26592228233343640, 0.26599275834383460, 0.26606323431257690, 0.26613371023896310, 0.26620418612229320, 0.26627466196186720, 0.26634513775698450, 0.26641561350694570, 0.26648608921105060, 0.26655656486859950, 0.26662704047889170, 0.26669751604122730, 0.26676799155490680, 0.26683846701922960, 0.26690894243349570, 0.26786014170548760, 0.26793061383211640, 0.26800108589784480, 0.26807155790197350, 0.26814202984380270, 0.26821250172263220, 0.26828297353776200, 0.26835344528849280, 0.26842391697412380, 0.26849438859395610, 0.26856486014728890, 0.26863533163342330, 0.26870580305165870, 0.26877627440129540, 0.26884674568163390, 0.26891721689197410, 0.26898768803161640, 0.26905815909986020, 0.26912863009600610, 0.26919910101935470, 0.26926957186920600, 0.26934004264485980, 0.26941051334561660, 0.26948098397077660, 0.26955145451963980, 0.26962192499150650, 0.27029109128931310, 0.27036155842775130, 0.27043202548115460, 0.27050249244882330, 0.27057295933005800, 0.27064342612415880, 0.27071389283042580, 0.27078435944815930, 0.27085482597666040, 0.27092529241522920, 0.27099575876316560, 0.27106622501977050, 0.27113669118434380, 0.27120715725618600, 0.27127762323459790, 0.27134808911887980, 0.27141855490833170, 0.27148902060225380, 0.27155948619994750, 0.27162995170071260, 0.27215807482229790, 0.27222853698864810, 0.27229899905143510, 0.27236946100995900, 0.27243992286352060, 0.27251038461142070, 0.27258084625295940, 0.27265130778743820, 0.27272176921415690, 0.27279223053241610, 0.27286269174151670, 0.27293315284075930, 0.27300361382944400, 0.27307407470687230, 0.27314453547234430, 0.27321499612516060, 0.27328545666462200, 0.27374302656702580, 0.27381348375219480, 0.27388394081807670, 0.27395439776397350, 0.27402485458918480, 0.27409531129301190, 0.27416576787475530, 0.27423622433371650, 0.27430668066919570, 0.27437713688049400, 0.27444759296691170, 0.27451804892775010, 0.27458850476230980, 0.27465896046989230, 0.27472941604979760, 0.27518690252415580, 0.27525735464281000, 0.27532780662785960, 0.27539825847860460, 0.27546871019434650, 0.27553916177438700, 0.27560961321802560, 0.27568006452456520, 0.27575051569330560, 0.27582096672354770, 0.27589141761459310, 0.27596186836574280, 0.27641927976940970, 0.27648972696810560, 0.27656017402098150, 0.27663062092733680, 0.27670106768647450, 0.27677151429769480, 0.27684196076029910, 0.27691240707358900, 0.27698285323686520, 0.27705329924942990, 0.27712374511058350, 0.27719419081962760, 0.27758108355397750, 0.27765152577675990, 0.27772196784220940, 0.27779240974962740, 0.27786285149831570, 0.27793329308757510, 0.27800373451670810, 0.27807417578501560, 0.27814461689179880, 0.27821505783635950, 0.27828549861799940, 0.27867232565409350, 0.27874276287964280, 0.27881319993705120, 0.27888363682561890, 0.27895407354464870, 0.27902451009344220, 0.27909494647130080, 0.27916538267752650, 0.27923581871142100, 0.27930625457228610, 0.27969301844844630, 0.27976345068795980, 0.27983388274922520, 0.27990431463154580, 0.27997474633422250, 0.28004517785655740, 0.28011560919785290, 0.28018604035741030, 0.28025647133453200, 0.28032690212851980, 0.28064317475519430, 0.28071360205026350, 0.28078402915768200, 0.28085445607675170, 0.28092488280677430, 0.28099530934705250, 0.28106573569688810, 0.28113616185558310, 0.28120658782244040, 0.28152280767961630, 0.28159323010011260, 0.28166365232425660, 0.28173407435134980, 0.28180449618069440, 0.28187491781159330, 0.28194533924334850, 0.28201576047526270, 0.28208618150663780, 0.28240234811436430, 0.28247276555196810, 0.28254318278452110, 0.28261359981132510, 0.28268401663168290, 0.28275443324489740, 0.28282484965027090, 0.28289526584710590, 0.28296568183470510, 0.28328179471343110, 0.28335220705988060, 0.28342261919258380, 0.28349303111084450, 0.28356344281396440, 0.28363385430124720, 0.28370426557199570, 0.28377467662551170, 0.28409073876284810, 0.28416114613167880, 0.28423155327876990, 0.28430196020342450, 0.28437236690494520, 0.28444277338263540, 0.28451317963579860, 0.28458358566373690, 0.28482919412630950, 0.28489959665508780, 0.28496999895483290, 0.28504040102484800, 0.28511080286443690, 0.28518120447290250, 0.28525160584954740, 0.28532200699367570, 0.28556757235684160, 0.28563796996942830, 0.28570836734569070, 0.28577876448493350, 0.28584916138645950, 0.28591955804957270, 0.28598995447357560, 0.28606035065777250, 0.28630587266152530, 0.28637626528182020, 0.28644665765850430, 0.28651704979088160, 0.28658744167825480, 0.28665783331992790, 0.28672822471520490, 0.28704409424794720, 0.28711448179989220, 0.28718486910094220, 0.28725525615040080, 0.28732564294757180, 0.28739602949175910, 0.28746641578226700, 0.28771185365915000, 0.28778223632420780, 0.28785261873178530, 0.28792300088118620, 0.28799338277171490, 0.28806376440267560, 0.28813414577337180, 0.28837954293087660, 0.28844992064693140, 0.28852029809892320, 0.28859067528615670, 0.28866105220793580, 0.28873142886356500, 0.28880180525234890, 0.28904716147894740, 0.28911753418391670, 0.28918790661824360, 0.28925827878123220, 0.28932865067218790, 0.28939902229041470, 0.28971470871955940, 0.28978507635139420, 0.28985544370600950, 0.28992581078271020, 0.28999617758080120, 0.29006654409958750, 0.29031182128950590, 0.29038218406928820, 0.29045254656597290, 0.29052290877886400, 0.29059327070726680, 0.29066363235048640, 0.29090887147767360, 0.29097922935587060, 0.29104958694509210, 0.29111994424464450, 0.29119030125383240, 0.29126065797196100, 0.29150585886824630, 0.29157621179534880, 0.29164656442760250, 0.29171691676431290, 0.29178726880478560, 0.29185762054832590, 0.29210278304567210, 0.29217313097219890, 0.29224347859800560, 0.29231382592239790, 0.29238417294468120, 0.29245451966416130, 0.29269964359466780, 0.29276998647116450, 0.29284032904107200, 0.29291067130369580, 0.29298101325834260, 0.29322610201142240, 0.29329644010022160, 0.29336677787725930, 0.29343711534184190, 0.29350745249327470, 0.29357778933086400, 0.29382283920178820, 0.29389317214759170, 0.29396350477576950, 0.29403383708562810, 0.29410416907647340, 0.29434918349265400, 0.29441951156887880, 0.29448983932231010, 0.29456016675225380, 0.29463049385801700, 0.29487547268979010, 0.29494579585811180, 0.29501611869847390, 0.29508644121018310, 0.29515676339254630, 0.29540170651034920, 0.29547202473246330, 0.29554234262145430, 0.29561266017662910, 0.29568297739729440, 0.29592788467166490, 0.29599819790928840, 0.29606851080862650, 0.29613882336898740, 0.29620913558967780, 0.29645400689125480, 0.29652431510612370, 0.29659462297754930, 0.29666493050483740, 0.29673523768729670, 0.29690976938503990, 0.29698007288682050, 0.29705037604069300, 0.29712067884596460, 0.29719098130194250, 0.29743578396853070, 0.29750608237624830, 0.29757638043090250, 0.29764667813180040, 0.29771697547825070, 0.29789144816918280, 0.29796174180215860, 0.29803203507761000, 0.29810232799484470, 0.29817262055317150, 0.29841735413648300, 0.29848764260416110, 0.29855793070916370, 0.29862821845079940, 0.29869850582837680, 0.29887291919739620, 0.29894320282874530, 0.29901348609296190, 0.29908376898935530, 0.29915405151723340, 0.29932843680318960, 0.29939871556966910, 0.29946899396456100, 0.29953927198717490, 0.29960954963681940, 0.29978390677227040, 0.29985418064535500, 0.29992445414239890, 0.29999472726271150, 0.30006500000560190, 0.30030959787434310, 0.30037986644503010, 0.30045013463453490, 0.30052040244216620, 0.30069470307451150, 0.30076496707529000, 0.30083523069112750, 0.30090549392133300, 0.30097575676521650, 0.30115002904507470, 0.30122028806697270, 0.30129054669948220, 0.30136080494191210, 0.30143106279357310, 0.30160530665373050, 0.30167556066828360, 0.30174581428900210, 0.30181606751519630, 0.30188632034617620, 0.30206053571947670, 0.30213078469823580, 0.30220103327871640, 0.30227128146022890, 0.30251571606142900, 0.30258595997595950, 0.30265620348777080, 0.30272644659617250, 0.30290060827046740, 0.30297084749882260, 0.30304108632070740, 0.30311132473543270, 0.30318156274230850, 0.30335569573926910, 0.30342592985101360, 0.30349616355184960, 0.30356639684108850, 0.30374050458933160, 0.30381073397073220, 0.30388096293747750, 0.30395119148887820, 0.30402141962424500, 0.30419549857197560, 0.30426572278443790, 0.30433594657781060, 0.30440616995140430, 0.30458022354692500, 0.30465044298492310, 0.30472066200008780, 0.30479088059173060, 0.30496490878782880, 0.30503512343119330, 0.30510533764798110, 0.30517555143750550, 0.30524576479907650, 0.30541976401557840, 0.30548997341383110, 0.30556018238107930, 0.30563039091663450, 0.30580436463047730, 0.30587456919004770, 0.30594477331487410, 0.30601497700426860, 0.30618892516836010, 0.30625912486911030, 0.30632932413137930, 0.30639952295447920, 0.30657344552176510, 0.30664364034356880, 0.30671383472315550, 0.30678402865983760, 0.30695792558330120, 0.30702811550604320, 0.30709830498283330, 0.30716849401298520, 0.30734236524564860, 0.30741255024922280, 0.30748273480311360, 0.30755291890663320, 0.30772676440155440, 0.30779694446586800, 0.30786712407676650, 0.30793730323356300, 0.30811112294384070, 0.30818129804880940, 0.30825147269663380, 0.30832164688662700, 0.30849544076539660, 0.30856561089094850, 0.30863578055562810, 0.30870594975874870, 0.30887971775918420, 0.30894988288525750, 0.30902004754673220, 0.30909021174292170, 0.30926395381823520, 0.30933411392477940, 0.30940427356299990, 0.30947443273221120, 0.30964814883565360, 0.30971830390262850, 0.30978845849755720, 0.30996215222215400, 0.31003230270461360, 0.31010245271199110, 0.31017260224360080, 0.31034626991179710, 0.31041641531836150, 0.31048656024612370, 0.31055670469439780, 0.31073034625955520, 0.31080048657021560, 0.31087062639835550, 0.31104424547849380, 0.31111438115880540, 0.31118451635356490, 0.31125465106208670, 0.31142824395485840, 0.31149837450299870, 0.31156850456187080, 0.31174207490137690, 0.31181220078966590, 0.31188232618565760, 0.31195245108866790, 0.31212599515661190, 0.31219611587649920, 0.31226623610037700, 0.31243975754691910, 0.31250987357748480, 0.31257998910901440, 0.31265010414082400, 0.31282359923174060, 0.31289371005771280, 0.31296382038093970, 0.31313729278242900, 0.31320739888964190, 0.31327750449108560, 0.31334760958607660, 0.31345095417275100, 0.31352105554800900, 0.31359115641447540, 0.31366125677146650, 0.31383467997605700, 0.31390477609435900, 0.31397487170016460, 0.31414827211706780, 0.31421836347402460, 0.31428845431546570, 0.31446183191435770, 0.31453191849679730, 0.31460200456070160, 0.31467209010538870, 0.31484544110603800, 0.31491552237924100, 0.31498560313020960, 0.31515893124514610, 0.31522900771448990, 0.31529908365858330, 0.31547238885755870, 0.31554246050989240, 0.31561253163396050, 0.31578581388674930, 0.31585588070892850, 0.31592594699982870, 0.31609920627622760, 0.31616926825511590, 0.31623932969971320, 0.31630939060933700, 0.31641256596954350, 0.31648262309201130, 0.31655267967717570, 0.31662273572435730, 0.31672589291028240, 0.31679594516320590, 0.31686599687581740, 0.31693604804743600, 0.31710923441233130, 0.31717928123927480, 0.31724932752221740, 0.31742249078305550, 0.31749253271122360, 0.31756257409238420, 0.31773571421908380, 0.31780575123537660, 0.31787578770165570, 0.31804890466416070, 0.31811893675548440, 0.31818896829378980, 0.31829203435345570, 0.31836206206206550, 0.31843208921533420, 0.31850211581258200, 0.31860516359614030, 0.31867518635661770, 0.31874520855875310, 0.31891825969240180, 0.31898827749167510, 0.31905829472960470, 0.31923132258612830, 0.31930133541113090, 0.31937134767179070, 0.31954435222124580, 0.31961436005891890, 0.31968436732925070, 0.31985734854171670, 0.31992735137900880, 0.31999735364596260, 0.32017031149154260, 0.32024030931540950, 0.32031030656594240, 0.32041324764171060, 0.32048324101476340, 0.32055323381216740, 0.32072614871890370, 0.32079613705545700, 0.32086612481336810, 0.32103901627070850, 0.32110899955773850, 0.32117898226313450, 0.32135185024127210, 0.32142182846576160, 0.32149180610562700, 0.32159467683890430, 0.32166465057478040, 0.32173462372371990, 0.32190744856514420, 0.32197741721545590, 0.32204738527584360, 0.32222018655580960, 0.32229015010756090, 0.32236011306640210, 0.32246293171977260, 0.32253289075519320, 0.32260284919539610, 0.32277560719375330, 0.32284556110762820, 0.32291551442329950, 0.32308824877813070, 0.32315819755748260, 0.32333091218195240, 0.32340085641730490, 0.32347080004916620, 0.32364349097783460, 0.32371343005571550, 0.32378336852712540, 0.32388610121415760, 0.32395603573038720, 0.32402596963784250, 0.32419861704828670, 0.32426854638412070, 0.32433847510820200, 0.32444117398453590, 0.32451109874108630, 0.32458102288358300, 0.32475362668388310, 0.32482354623713730, 0.32489346517336170, 0.32499613018766960, 0.32506604514402760, 0.32513595948105700, 0.32530851957943440, 0.32537842930962020, 0.32544833841750460, 0.32555096951855330, 0.32562087463425140, 0.32569077912535040, 0.32586329543016660, 0.32593319529684100, 0.32610569167260070, 0.32617558690721450, 0.32624548151196380, 0.32634806333680340, 0.32641795393172450, 0.32648784389448760, 0.32666029634564160, 0.32673018165879160, 0.32680006633681690, 0.32690261412425370, 0.32697249478016810, 0.32704237479866550, 0.32714490724286380, 0.32721478323392420, 0.32728465858527610, 0.32745704699538400, 0.32752691767197750, 0.32759678770589890, 0.32769928603988930, 0.32776915203411420, 0.32783901738337840, 0.32794150034279720, 0.32801136164704840, 0.32808122230405030, 0.32825354648615830, 0.32832340244329750, 0.32849570652683930, 0.32856555777651970, 0.32863540837370600, 0.32873784174450270, 0.32880768827913210, 0.32887753415898220, 0.32897995211457780, 0.32904979392656720, 0.32911963508149310, 0.32929187469427400, 0.32936171111669250, 0.32953393055771830, 0.32960376224005080, 0.32967359326008330, 0.32977596149238420, 0.32984578842705460, 0.32991561469714410, 0.33001796747376900, 0.33008778965320720, 0.33015761116578420, 0.33025994847739060, 0.33032976589402860, 0.33039958264152660, 0.33057171712505610, 0.33064152909991380, 0.33081364332184360, 0.33088345051650200, 0.33105554445996050, 0.33112534686686720, 0.33129742051499620, 0.33136721812660050, 0.33143701505928820, 0.33153927146255240, 0.33160906427130930, 0.33167885639887520, 0.33178109727825190, 0.33185088527661990, 0.33192067259152350, 0.33202289793773140, 0.33209268111817320, 0.33216246361287820, 0.33226467341664600, 0.33233445177162800, 0.33240422943860250, 0.33250642369066660, 0.33257619721266060, 0.33264597004437620, 0.33274814873548240, 0.33281791741696200, 0.33288768540589540, 0.33298984852679720, 0.33305961236024310, 0.33312937549887370, 0.33323152304033460, 0.33330128201822960, 0.33337104029904160, 0.33354292636666360, 0.33361267978214610, 0.33371479613704620, 0.33378454538130610, 0.33385429392395100, 0.33395639467174970, 0.33402613903793300, 0.33409588270023780, 0.33419796783173210, 0.33426770731233950, 0.33433744608680450, 0.33443951559279960, 0.33450925018033530, 0.33457898405946590, 0.33468103793077620, 0.33475076761774850, 0.33482049659405330, 0.33492253482150320, 0.33499225960042310, 0.33506198366641670, 0.33516400624083640, 0.33523372610422130, 0.33530344525242060, 0.33540545216465050, 0.33547516710502170, 0.33554488132794850, 0.33564687256883770, 0.33571658257872020, 0.33588826742930620, 0.33595797250122840, 0.33612963672198120, 0.33619933684847660, 0.33637098042280500, 0.33644067559641090, 0.33661229850773730, 0.33668198872099570, 0.33678390497698680, 0.33685359095275430, 0.33692327619821100, 0.33702517673108230, 0.33709485773385000, 0.33716453800405470, 0.33726642280471300, 0.33733609882703400, 0.33750764317390380, 0.33757731420833560, 0.33774883781469360, 0.33781850385379770, 0.33799000670314050, 0.33805966773948320, 0.33816149304602530, 0.33823114981532000, 0.33830080584147090, 0.33840261537339910, 0.33847226712732290, 0.33864371188412860, 0.33871335861525830, 0.33888478255433460, 0.33895442425525270, 0.33905618994540550, 0.33912582736015700, 0.33919546402344960, 0.33929721390579240, 0.33936684627775110, 0.33953821196153160, 0.33960783928329060, 0.33977918408880870, 0.33984880635296610, 0.33995051230491050, 0.34002013026382770, 0.34008974746298450, 0.34019143757404630, 0.34026105046280830, 0.34043233685077250, 0.34050194466198860, 0.34060360661924380, 0.34067321011133940, 0.34074281283762350, 0.34084445892999790, 0.34091405733201510, 0.34108528518452470, 0.34115487848908480, 0.34125649638753810, 0.34132608535912180, 0.34139567355885060, 0.34149727556849070, 0.34156685943010550, 0.34173802862952860, 0.34180760737380750, 0.34190918114952760, 0.34197875554699810, 0.34204832916657780, 0.34214988702961740, 0.34221945629726100, 0.34239056672623690, 0.34246013085669780, 0.34256166044593220, 0.34263122021577840, 0.34280229285445860, 0.34287184747465200, 0.34297334876517750, 0.34304289901608830, 0.34311244847928610, 0.34321393381846120, 0.34328347890726270, 0.34345449258508230, 0.34352403250443840, 0.34362548950520560, 0.34369502504151260, 0.34386600080981440, 0.34393553116424010, 0.34403695980181530, 0.34410648576455000, 0.34427742357750030, 0.34434694434593040, 0.34444834459557550, 0.34451786096368300, 0.34458737653049280, 0.34468876077551850, 0.34475827193691220, 0.34485964377393510, 0.34492915052638360, 0.34499865647375520, 0.34510001229141070, 0.34516951382474990, 0.34527085722450430, 0.34534035434028620, 0.34540985064721470, 0.34551117801288140, 0.34558066989717130, 0.34568198483505750, 0.34575147229318840, 0.34582095893869300, 0.34592225782779690, 0.34599174004206670, 0.34609302649353080, 0.34616250427305070, 0.34623198123617340, 0.34633325162418680, 0.34640272414749020, 0.34650398208802470, 0.34657345016799600, 0.34674415929024610, 0.34681362210165800, 0.34691485150680120, 0.34698430986631030, 0.34715498071432940, 0.34722443379295040, 0.34732563463828800, 0.34739508325644470, 0.34756571578495700, 0.34763515910991040, 0.34773633137107260, 0.34780577022701140, 0.34790693000738380, 0.34797636439081160, 0.34804579794124550, 0.34814694159390930, 0.34821637066678770, 0.34831750182890880, 0.34838692642074020, 0.34855746519571410, 0.34862688446471330, 0.34872798698432580, 0.34879740176375200, 0.34896790206556690, 0.34903731150989170, 0.34913838536278560, 0.34920779030902200, 0.34930885164804540, 0.34937825209271110, 0.34954869685360190, 0.34961809194588730, 0.34971912458434160, 0.34978851516655540, 0.34988953527758370, 0.34995892134625150, 0.35012931047763600, 0.35019869117667160, 0.35029968255337460, 0.35036905873037780, 0.35047003756613940, 0.35053940921764080, 0.35070974263113980, 0.35077910889578460, 0.35088005896355910, 0.35094942069423130, 0.35105035820758880, 0.35111971540082520, 0.35128999300826410, 0.35135934479744810, 0.35146025350925000, 0.35152960075254210, 0.35163049689649120, 0.35169983959043450, 0.35187006130384150, 0.35193939857656440, 0.35204026588548350, 0.35210959860041540, 0.35221045332808650, 0.35227978148177800, 0.35238062362438250, 0.35244994721338620, 0.35262009578797680, 0.35268941393363980, 0.35279022719829660, 0.35285954077084810, 0.35296034143709410, 0.35302965043309280, 0.35313043849712420, 0.35319974291313080, 0.35336981820372530, 0.35343911715431890, 0.35353987629764370, 0.35360917065984110, 0.35370991718766050, 0.35377920695802820, 0.35387994086655270, 0.35394922604166020, 0.35411922790352370, 0.35418850759119290, 0.35428921253641010, 0.35435848762043430, 0.35445917993311740, 0.35452845041007090, 0.35462913008644760, 0.35469839595290780, 0.35486832424175440, 0.35503823526942580, 0.35510749100761210, 0.35520812902874330, 0.35527738014465470, 0.35537800551253320, 0.35544725200275450, 0.35554786471362730, 0.35561710657474550, 0.35571770662486280, 0.35578694385346710, 0.35595676383176290, 0.35602599551915860, 0.35612656650248400, 0.35619579354902870, 0.35629635185848540, 0.35636557426077420, 0.35646611989262760, 0.35653533764725870, 0.35663587059777760, 0.35670508370134990, 0.35680560396680670, 0.35687481241592130, 0.35704452378385240, 0.35721421779802800, 0.35728341601147620, 0.35738389445133780, 0.35745308799862710, 0.35755355373667720, 0.35762274261441730, 0.35772319564694780, 0.35779237985174990, 0.35789282017505530, 0.35796199970353300, 0.35806242731391200, 0.35813160216268060, 0.35823201705643580, 0.35830118722211210, 0.35847075487475210, 0.35864030511353030, 0.35870946497356540, 0.35880983793138270, 0.35887899309667810, 0.35897935332125050, 0.35904850378843180, 0.35914885127608040, 0.35921799704177440, 0.35931833178882390, 0.35938747284966080, 0.35948779485243920, 0.35955693120504950, 0.35965724045988800, 0.35972637210090540, 0.35982666860414050, 0.35989579553019960, 0.35999607927816870, 0.36006520148590710, 0.36016547247495310, 0.36023458996100950, 0.36033484818747800, 0.36040396094849330, 0.36057331444135130, 0.36074265043258000, 0.36091196891518340, 0.36108126988216950, 0.36125055332655270, 0.36141981924135220, 0.36158906761959300, 0.36175829845430570, 0.36182737233724810, 0.36192751173852570, 0.36199658086478330, 0.36209670746529500, 0.36216577183152840, 0.36226588562765970, 0.36233494523053200, 0.36243504621867270, 0.36250410105484850, 0.36260418923139150, 0.36267323929753760, 0.36277331465887880, 0.36284235995166360, 0.36294242249420310, 0.36301146301029820, 0.36311151273044010, 0.36318054846651640, 0.36328058536066780, 0.36344964037797220, 0.36361867777544300, 0.36378769754617710, 0.36395669968327480, 0.36412568417984450, 0.36429465102899700, 0.36446360022385130, 0.36456353820858930, 0.36463253175753050, 0.36473245688592070, 0.36480144562316300, 0.36490135789164670, 0.36497034181388410, 0.36507024121890480, 0.36513922032283230, 0.36523910686083870, 0.36530808114315290, 0.36540795481059820, 0.36547692426799790, 0.36557678506133620, 0.36564574969052200, 0.36574559760621200, 0.36581455740388800, 0.36591439243839170, 0.36598334740126180, 0.36608316955104510, 0.36615211967581690, 0.36625192893734940, 0.36642067059048520, 0.36658939450364070, 0.36675810067000700, 0.36685786219525230, 0.36692678908278320, 0.36702653770398010, 0.36709545973517250, 0.36719519544880890, 0.36726411262038270, 0.36736383542295310, 0.36743274773162970, 0.36753245761963000, 0.36760136506213310, 0.36770106203206240, 0.36776996460511780, 0.36786964865347970, 0.36803821747711650, 0.36813787953736120, 0.36820676849621210, 0.36830641762621290, 0.36837530170401200, 0.36847493790028580, 0.36854381709376730, 0.36864344035283300, 0.36871231465873340, 0.36881192497711470, 0.36888079439217330, 0.36898039176639650, 0.36914884071394860, 0.36924841606662570, 0.36931727181304770, 0.36941683421295180, 0.36948568505697490, 0.36958523450064560, 0.36965408043901820, 0.36975361692299920, 0.36982245795246950, 0.36992198147330700, 0.37009032814487130, 0.37018982961609790, 0.37025865693099900, 0.37035814543051980, 0.37042696782500270, 0.37052644334937750, 0.37059526082020120, 0.37069472336599150, 0.37076353590991720, 0.37086298547369010, 0.37103122966580590, 0.37113065715208690, 0.37119945593567530, 0.37129887043142950, 0.37136766427664360, 0.37146706577844870, 0.37153585468205870, 0.37163524318649910, 0.37180340264893630, 0.37190276905323830, 0.37197154415912550, 0.37207089755759370, 0.37213966771043430, 0.37223900809966550, 0.37230777329623790, 0.37240710067283090, 0.37250641894443360, 0.37257517527047350, 0.37267448052440520, 0.37274323188598160, 0.37284252411885100, 0.37291127051275010, 0.37301054972116820, 0.37317855732476120, 0.37327781439312420, 0.37334654692303810, 0.37344579095855990, 0.37351451850941380, 0.37361374950871850, 0.37378169003702310, 0.37388089887895390, 0.37394961253690330, 0.37404880833425970, 0.37411751700179280, 0.37421669975121250, 0.37438457312325470, 0.37448373369805890, 0.37455242844383640, 0.37465157596237970, 0.37472026570641050, 0.37481940016534350, 0.37498720630041320, 0.37508631856756250, 0.37515499436105850, 0.37525409356030710, 0.37532276434075240, 0.37542185046876340, 0.37552092746406500, 0.37558958928641500, 0.37568865320555060, 0.37575731000675020, 0.37585636084639190, 0.37602405038008650, 0.37612307899874380, 0.37619172180013780, 0.37629073733106930, 0.37635937510005420, 0.37645837753994410, 0.37655737083782200, 0.37662599961888650, 0.37672497982083080, 0.37679360356141990, 0.37689257066412320, 0.37699152862098410, 0.37706014336123340, 0.37715908821397650, 0.37722769790569700, 0.37732662965102600, 0.37749415292567900, 0.37759306240907210, 0.37766165803148910, 0.37776055439931740, 0.37792802821099240, 0.37802690230494830, 0.37809548383766260, 0.37819434480792850, 0.37836176911620230, 0.37846060780069960, 0.37852917522334930, 0.37862800077605570, 0.37879537554060660, 0.37889417879568710, 0.37896273208794710, 0.37906152220315810, 0.37916030315359950, 0.37922884738376530, 0.37932761518953440, 0.37939615433111660, 0.37949490898896300, 0.37959365447829830, 0.37966218454550440, 0.37976091688213050, 0.37982944185278320, 0.37992816103345730, 0.38002687104189650, 0.38009538692591450, 0.38019408377362940, 0.38036127823689760, 0.38045995274471110, 0.38052845442534980, 0.38062711576444910, 0.38072576792543410, 0.38079426049980090, 0.38089289948732360, 0.38096138694442880, 0.38106001275527230, 0.38115862938431650, 0.38122710772295080, 0.38132571117058240, 0.38149277464704630, 0.38159135572458710, 0.38165981980739490, 0.38175838769559680, 0.38185694639618360, 0.38192540134098250, 0.38202394684752140, 0.38219092896374170, 0.38228945208177920, 0.38235789273855470, 0.38245640265465680, 0.38255490337736830, 0.38262333487665680, 0.38272182239274840, 0.38288872304779660, 0.38298718815707820, 0.38305560533624500, 0.38315405723105790, 0.38325249992674560, 0.38332090792900750, 0.38341933740556550, 0.38351775768088870, 0.38358615649893880, 0.38368456355048140, 0.38385135102522410, 0.38394973564500570, 0.38401812009888390, 0.38411649148709050, 0.38421485366838050, 0.38428322891871230, 0.38438157786380090, 0.38447991759988410, 0.38454828363939470, 0.38464661013465850, 0.38481328424025780, 0.38491158827900520, 0.38497993991047910, 0.38507823070066620, 0.38517651227622220, 0.38524485467762450, 0.38534312300002610, 0.38544138210572880, 0.38550971526981650, 0.38560796111778060, 0.38570619774698360, 0.38577452166652200, 0.38587274503341080, 0.38597095917948340, 0.38603927384724700, 0.38613747472643850, 0.38623566638276460, 0.38630397179153720, 0.38640215017642490, 0.38656861547897470, 0.38666677136296570, 0.38683320488918290, 0.38693133826570040, 0.38699961990891760, 0.38709774000182310, 0.38719585086430490, 0.38726412322225000, 0.38736222079659510, 0.38746030913849300, 0.38752857220399040, 0.38762664725323750, 0.38772471306801930, 0.38779296683390230, 0.38789101935152790, 0.38798906263267550, 0.38805730709178650, 0.38815533707128250, 0.38825335781229310, 0.38832159295748300, 0.38841960039235500, 0.38851759858674150, 0.38858582441087040, 0.38868380929464040, 0.38878178493592880, 0.38885000143186570, 0.38894796375807010, 0.38904591683980330, 0.38911412400042590, 0.38921206376261440, 0.38930999427834870, 0.38937819209654400, 0.38947610928828400, 0.38957401723159000, 0.38974010031512530, 0.38983798567959130, 0.39000403682322720, 0.39010189960245310, 0.39019975312874490, 0.39026791879271250, 0.39036575898031560, 0.39046358991302460, 0.39053174620374700, 0.39062956379335780, 0.39072737212612100, 0.39079551903653290, 0.39089331402179680, 0.39099109974826570, 0.39105923727131050, 0.39115700964588830, 0.39125477275972960, 0.39132290088835980, 0.39142065064592740, 0.39151839114082150, 0.39161612237249200, 0.39168423700224660, 0.39178195487189000, 0.39187966347638170, 0.39194776869521770, 0.39204546393332130, 0.39214314990435020, 0.39221124570525050, 0.39230891830553930, 0.39240658163683640, 0.39257231796900830, 0.39266995865431960, 0.39276759006818590, 0.39283566290422980, 0.39293328093731590, 0.39303088969705370, 0.39309895309174370, 0.39319654846638040, 0.39329413456577040, 0.39345976122210680, 0.39355732465494520, 0.39365487881011100, 0.39372291918512680, 0.39382045994522470, 0.39391799142576480, 0.39398602233611050, 0.39408354041729350, 0.39418104921703910, 0.39427854873481860, 0.39434656605187530, 0.39444405216467300, 0.39454152899363240, 0.39460953682973180, 0.39470700024944150, 0.39480445438344840, 0.39496989345216050, 0.39506732488509500, 0.39516474702994420, 0.39523273175368380, 0.39533014047944180, 0.39542753991526170, 0.39552493006062580, 0.39559290114739350, 0.39569027786810170, 0.39578764529650830, 0.39585560686989640, 0.39595296086942230, 0.39605030557480840, 0.39614764098554080, 0.39621558890022250, 0.39631291087653820, 0.39641022355637020, 0.39647816194153740, 0.39657546118274950, 0.39667275112565120, 0.39677003176973490, 0.39683795647453040, 0.39693522367448910, 0.39703248157381090, 0.39712973017198980, 0.39719764118402350, 0.39729487633259090, 0.39739210217820490, 0.39755721602726970, 0.39765441911434540, 0.39775161289616320, 0.39781950063908060, 0.39791668096165900, 0.39801385197718240, 0.39811101368515360, 0.39817888770143210, 0.39827603594472260, 0.39837317487867190, 0.39847030450278460, 0.39853816478012260, 0.39863528093413200, 0.39873238777652340, 0.39882948530680450, 0.39889733183292360, 0.39899441588769590, 0.39909149062858470, 0.39918855605509980, 0.39925638881774720, 0.39935344076336470, 0.39945048339284300, 0.39961533569264270, 0.39971235551922680, 0.39980936602742710, 0.39997417241579950, 0.40007116011350980, 0.40016813849060210, 0.40033289894554670, 0.40042985450458060, 0.40052680074077440, 0.40062373765365040, 0.40069151524035190, 0.40078843865094620, 0.40088535273648810, 0.40098225749650130, 0.40105002125882100, 0.40114691251125170, 0.40124379443642640, 0.40134066703387310, 0.40140841695970050, 0.40150527604427880, 0.40160212579941050, 0.40169896622462540, 0.40176670230187350, 0.40186352920895190, 0.40196034678440140, 0.40205715502775670, 0.40212487724436330, 0.40222167196433110, 0.40231845735049990, 0.40241523340240590, 0.40251200011958800, 0.40257970426961660, 0.40267645745694250, 0.40277320130784890, 0.40286993582187600, 0.40293762608414580, 0.40303434706310550, 0.40313105870349890, 0.40322776100486970, 0.40329543736739510, 0.40339212612850360, 0.40348880554890930, 0.40358547562815920, 0.40368213636580040, 0.40374979461278940, 0.40384644180377110, 0.40394307965147360, 0.40403970815544800, 0.40410735247575450, 0.40420396742791320, 0.40430057303468070, 0.40439716929560930, 0.40449375621025440, 0.40456138238130240, 0.40465795573778420, 0.40475451974632930, 0.40485107440649270, 0.40494761971783300, 0.40501522772092800, 0.40511175946778670, 0.40520828186417970, 0.40530479490966550, 0.40537238894439230, 0.40546888842030220, 0.40556537854367000, 0.40566185931405850, 0.40575833073103250, 0.40582590656433000, 0.40592236440545800, 0.40601881289154520, 0.40611525202215830, 0.40621168179686440, 0.40627923941017600, 0.40637565560279470, 0.40647206243789000, 0.40656845991503320, 0.40666484803379550, 0.40673238740861410, 0.40682876193907370, 0.40692512710954540, 0.40702148291960380, 0.40711782936882240, 0.40718535048669030, 0.40728168334142070, 0.40737800683371500, 0.40747432096315070, 0.40757062572930490, 0.40763812857181590, 0.40773441973732400, 0.40783070153796470, 0.40792697397331880, 0.40802323704296920, 0.40809072159176360, 0.40818697105463480, 0.40828321115022500, 0.40837944187811710, 0.40847566323789760, 0.40857187522915300, 0.40863933722156630, 0.40873553559878590, 0.40883172460591360, 0.40892790424253970, 0.40902407450825330, 0.40909151816669370, 0.40918767481230130, 0.40928382208543980, 0.40937995998570320, 0.40947608851268450, 0.40957220766597660, 0.40963962871978540, 0.40973573424578880, 0.40983183039655900, 0.40992791717169310, 0.41002399457079070, 0.41009139725061360, 0.41018746101641190, 0.41028351540463830, 0.41037956041489110, 0.41047559604677380, 0.41057162229988770, 0.41063900232712450, 0.41073501493983090, 0.41083101817224480, 0.41092701202397290, 0.41102299649461880, 0.41111897158379140, 0.41118632893239030, 0.41128229037408520, 0.41137824243279400, 0.41147418510812540, 0.41157011839969020, 0.41166604230709990, 0.41173337695110060, 0.41182928720400390, 0.41192518807125150, 0.41202107955245650, 0.41211696164723350, 0.41221283435519900, 0.41230869767596730, 0.41237600531519980, 0.41247185497336940, 0.41256769524285620, 0.41266352612327810, 0.41275934761425560, 0.41285515971540900, 0.41292244459406810, 0.41301824302568220, 0.41311403206599680, 0.41320981171463500, 0.41330558197122100, 0.41340134283537930, 0.41349709430673570, 0.41356435211550620, 0.41366008990933380, 0.41375581830889790, 0.41385153731382650, 0.41394724692374820, 0.41404294713829300, 0.41413863795709260, 0.41420586866110200, 0.41430154579443870, 0.41439721353058200, 0.41449287186916370, 0.41458852080981840, 0.41468416035218170, 0.41477979049588840, 0.41484699406041110, 0.41494261051077830, 0.41503821756105440, 0.41513381521087760, 0.41522940345988710, 0.41532498230772440, 0.41542055175402820, 0.41548772814448330, 0.41558328388962580, 0.41567883023181410, 0.41577436717069160, 0.41586989470590300, 0.41596541283709300, 0.41606092156390810, 0.41615642088599410, 0.41622356576374740, 0.41631905137585090, 0.41641452758181920, 0.41650999438130150, 0.41660545177394950, 0.41670089975941210, 0.41679633833734240, 0.41689176750739230, 0.41695888082764070, 0.41705429627895980, 0.41714970232100790, 0.41724509895343950, 0.41734048617591130, 0.41743586398808010, 0.41753123238960280, 0.41762659138013720, 0.41769367309830050, 0.41778901836143040, 0.41788435421219690, 0.41797968065026090, 0.41807499767528460, 0.41817030528693050, 0.41826560348485970, 0.41836089226873930, 0.41845617163823260, 0.41852321738833340, 0.41861848302079580, 0.41871373923751430, 0.41880898603815560, 0.41890422342238770, 0.41899945138988050, 0.41909466994030340, 0.41918987907332560, 0.41928507878862020, 0.41938026908585750, 0.41944727448353680, 0.41954245103319960, 0.41963761816346670, 0.41973277587401410, 0.41982792416451480, 0.41992306303464750, 0.42001819248408810, 0.42011331251251390, 0.42020842311960350, 0.42030352430503650, 0.42037048928176140, 0.42046557670919120, 0.42056065471364430, 0.42065572329480270, 0.42075078245234930, 0.42084583218596710, 0.42094087249534140, 0.42103590338015570, 0.42113092484009660, 0.42122593687484960, 0.42132093948410270, 0.42138785962896910, 0.42148284846891850, 0.42157782788206850, 0.42167279786810980, 0.42176775842673380, 0.42186270955763000, 0.42195765126049140, 0.42205258353501060, 0.42214750638088100, 0.42224241979779800, 0.42233732378545530, 0.42243221834354880, 0.42249908922385520, 0.42252710347177490, 0.42259397000051260, 0.42268884134633180, 0.42278370326101060, 0.42287855574424870, 0.42297339879574500, 0.42306823241520070, 0.42316305660231800, 0.42325787135679800, 0.42335267667834480, 0.42344747256666090, 0.42354225902145160, 0.42363703604242100, 0.42373180362927590, 0.42379861642862620, 0.42382656178172270, 0.42389337022016700, 0.42398811457634520, 0.42408284949686780, 0.42417757498144560, 0.42427229102978830, 0.42436699764160610, 0.42446169481661140, 0.42455638255451620, 0.42465106085503290, 0.42474572971787460, 0.42484038914275790, 0.42493503912939630, 0.42502967967750640, 0.42512431078680470, 0.42521893245700840, 0.42531354468783570, 0.42538028616362710, 0.42540814747900570, 0.42547488458268140, 0.42556947356114390, 0.42566405309873570, 0.42575862319517710, 0.42585318385019130, 0.42594773506350140, 0.42604227683483080, 0.42613680916390370, 0.42623133205044590, 0.42632584549418260, 0.42642034949484120, 0.42651484405214930, 0.42660932916583350, 0.42670380483562350, 0.42679827106124900, 0.42689272784244060, 0.42698717517892860, 0.42708161307044520, 0.42717604151672310, 0.42727046051749430, 0.42736487007249400, 0.42745927018145650, 0.42752591383524660, 0.42755366084411670, 0.42762030011085180, 0.42771467693924880, 0.42780904432017390, 0.42790340225336640, 0.42799775073856410, 0.42809208977550660, 0.42818641936393460, 0.42828073950358880, 0.42837505019421050, 0.42846935143554330, 0.42856364322732950, 0.42865792556931180, 0.42875219846123610, 0.42884646190284850, 0.42894071589389350, 0.42903496043411820, 0.42912919552327080, 0.42922342116109800, 0.42931763734735050, 0.42941184408177680, 0.42950604136412680, 0.42960022919415320, 0.42969440757160570, 0.42978857649623930, 0.42988273596780520, 0.42997688598605770, 0.43007102655075220, 0.43016515766164360, 0.43025927931848780, 0.43035339152104220, 0.43044749426906360, 0.43054158756231230, 0.43063567140054380, 0.43072974578352050, 0.43082381071100200, 0.43091786618274960, 0.43101191219852520, 0.43110594875809080, 0.43119997586121070, 0.43129399350764750, 0.43138800169716730, 0.43148200042953470, 0.43157598970451630, 0.43166996952187770, 0.43176393988138940, 0.43185790078281650, 0.43195185222592910, 0.43204579421049760, 0.43213972673629230, 0.43223364980308370, 0.43232756341064530, 0.43242146755874710, 0.43251536224716340, 0.43260924747566940, 0.43270312324403870, 0.43279698955204700, 0.43289084639946990, 0.43298469378608590, 0.43307853171167070, 0.43317236017600310, 0.43326617917886210, 0.43335998872002820, 0.43345378879928190, 0.43354757941640310, 0.43364136057117310, 0.43373513226337670, 0.43382889449279620, 0.43392264725921490, 0.43401639056241740, 0.43411012440218960, 0.43420384877831800, 0.43429756369058940, 0.43439126913878960, 0.43448496512270880, 0.43457865164213550, 0.43467232869685880, 0.43476599628666880, 0.43485965441135800, 0.43495330307071660, 0.43504694226453720, 0.43514057199261330, 0.43523419225473900, 0.43532780305070860, 0.43542140438031780, 0.43551499624336220, 0.43560857863963820, 0.43570215156894400, 0.43579571503107680, 0.43588926902583540, 0.43591656725096700, 0.43598281355302040, 0.43601010675332330, 0.43610363678830510, 0.43619715735571230, 0.43629066845534990, 0.43638417008701750, 0.43647766225051990, 0.43657114494565970, 0.43666461817224370, 0.43675808193007470, 0.43685153621896140, 0.43694498103870800, 0.43703841638912360, 0.43713184227001640, 0.43722525868119410, 0.43731866562246590, 0.43741206309364470, 0.43750545109453900, 0.43759882962496080, 0.43769219868472290, 0.43778555827363800, 0.43787890839151990, 0.43797224903818380, 0.43799943469123850, 0.43809276085087470, 0.43818607753932950, 0.43827938475641640, 0.43837268250195420, 0.43846597077576170, 0.43855924957765730, 0.43865251890746120, 0.43874577876499230, 0.43883902915007140, 0.43893227006252190, 0.43902550150216500, 0.43911872346882340, 0.43921193596232090, 0.43930513898248290, 0.43939833252913340, 0.43949151660209860, 0.43958469120120460, 0.43961178953164970, 0.43970494964836910, 0.43979810029129280, 0.43989124146024940, 0.43998437315506920, 0.44007749537558180, 0.44017060812161750, 0.44026371139300800, 0.44035680518958640, 0.44044988951118520, 0.44054296435763800, 0.44063602972877920, 0.44072908562444280, 0.44082213204446540, 0.44084916319092030, 0.44094219513246880, 0.44103521759846180, 0.44112823058873470, 0.44122123410312770, 0.44131422814148090, 0.44140721270363280, 0.44150018778942420, 0.44159315339869880, 0.44168610953129550, 0.44177905618705930, 0.44187199336583250, 0.44196492106745990, 0.44199189010632290, 0.44208480333328720, 0.44217770708321110, 0.44227060135593820, 0.44236348615131700, 0.44245636146919530, 0.44254922730942180, 0.44264208367184440, 0.44273493055631360, 0.44282776796268040, 0.44292059589079620, 0.44301341434051170, 0.44304032633264150, 0.44313313031137260, 0.44322592481182660, 0.44331870983385580, 0.44341148537731730, 0.44350425144206540, 0.44359700802795650, 0.44368975513484670, 0.44378249276259480, 0.44387522091105850, 0.44399479957187740, 0.44408750377344390, 0.44418019849572310, 0.44427288373857600, 0.44436555950186330, 0.44445822578544940, 0.44455088258919710, 0.44464352991297020, 0.44473616775663320, 0.44485560914449560, 0.44494822304376220, 0.44504082746293530, 0.44513342240188270, 0.44522600786047470, 0.44531858383857690, 0.44541115033606220, 0.44550370735279850, 0.44559625488865780, 0.44562302596654550, 0.44571555904135540, 0.44580808263545160, 0.44590059674871000, 0.44599310138100300, 0.44608559653220470, 0.44617808220219240, 0.44627055839083990, 0.44636302509802320, 0.44638975426233460, 0.44648220651163020, 0.44657464927964120, 0.44666708256624580, 0.44675950637132260, 0.44685192069475350, 0.44694432553641890, 0.44703672089619830, 0.44715579405780360, 0.44724816548091400, 0.44734052742221350, 0.44743287988158490, 0.44752522285891330, 0.44761755635408640, 0.44770988036698900, 0.44780219489750860, 0.44782884530325810, 0.44792114538207650, 0.44801343597871320, 0.44810571709305960, 0.44819798872500260, 0.44829025087443510, 0.44838250354124700, 0.44850136027917710, 0.44859358901457170, 0.44868580826745150, 0.44877801803771050, 0.44887021832524340, 0.44896240912994500, 0.44905459045171340, 0.44908117214282500, 0.44917333901863530, 0.44926549641173450, 0.44935764432201970, 0.44944978274939070, 0.44954191169374720, 0.44963403115498910, 0.44975268602142330, 0.44984478155659230, 0.44993686760878130, 0.45002894417789360, 0.45012101126383410, 0.45021306886650700, 0.45030511698581590, 0.45033163005449570, 0.45042366373374990, 0.45051568792988430, 0.45060770264280740, 0.45069970787242630, 0.45079170361865010, 0.45088368988138660, 0.45091017115044610, 0.45100214297596800, 0.45109410531825450, 0.45118605817722130, 0.45127800155277870, 0.45136993544483890, 0.45148830934290740, 0.45158021931703990, 0.45167211980785200, 0.45176401081525870, 0.45185589233917770, 0.45194776437952540, 0.45197418705798150, 0.45206604466653610, 0.45215789279178960, 0.45224973143366110, 0.45234156059207140, 0.45243338026693940, 0.45255158139463160, 0.45264337715701970, 0.45273516343606710, 0.45282694023169820, 0.45291870754383590, 0.45301046537240520, 0.45303682952972830, 0.45312857293204010, 0.45322030685107180, 0.45331203128674940, 0.45340374623900150, 0.45349545170775460, 0.45352178910073300, 0.45361348014585580, 0.45370516170777620, 0.45379683378642370, 0.45388849638173040, 0.45398014949362700, 0.45400646013706290, 0.45409809882797930, 0.45418972803578980, 0.45428134776042820, 0.45437295800182800, 0.45446455875992450, 0.45449084266864600, 0.45458242900843380, 0.45467400586523210, 0.45476557323897580, 0.45485713112960240, 0.45494867953705010, 0.45497493672591030, 0.45506647071774770, 0.45515799522672470, 0.45524951025278480, 0.45534101579586820, 0.45545874233979240, 0.45555022398694850, 0.45564169615139570, 0.45573315883307950, 0.45582461203194350, 0.45594225954173080, 0.45603368884757130, 0.45612510867087280, 0.45621651901158310, 0.45630791986964900, 0.45633410191337780, 0.45642548836366690, 0.45651686533165440, 0.45660823281728970, 0.45669959082052260, 0.45681709472225110, 0.45690842883804110, 0.45699975347173170, 0.45709106862327520, 0.45720850794610740, 0.45729979921287070, 0.45739108099779640, 0.45748235330083990, 0.45757361612196000, 0.45759972805823410, 0.45769097647918820, 0.45778221541857960, 0.45787344487636770, 0.45796466485251220, 0.45799075508184300, 0.45808196066025600, 0.45817315675739540, 0.45826434337321950, 0.45835552050769200, 0.45847275177955200, 0.45856390503776760, 0.45865504881497100, 0.45874618311112700, 0.45886334986076120, 0.45895446028343520, 0.45904556122541010, 0.45913665268665330, 0.45925375492778540, 0.45934482251834850, 0.45943588062853800, 0.45952692925832150, 0.45964396700473640, 0.45973499176666950, 0.45982600704856320, 0.45991701285039220, 0.46003398611593490, 0.46012496805276720, 0.46021594050990930, 0.46030690348733670, 0.46033286369129920, 0.46042381228591940, 0.46051475140123010, 0.46060568103721050, 0.46069660119383760, 0.46072253976306950, 0.46081344553942930, 0.46090434183684890, 0.46099522865530870, 0.46108610599478850, 0.46111202293965560, 0.46120288590142270, 0.46129373938462730, 0.46138458338925490, 0.46150131324617190, 0.46159213339705920, 0.46168294406977810, 0.46177374526431370, 0.46179962388640730, 0.46189041070793740, 0.46198118805171320, 0.46207195591772240, 0.46218857133266780, 0.46227931535048800, 0.46237004989096530, 0.46246077495409100, 0.46257732598160000, 0.46266802719956080, 0.46275871894060200, 0.46284940120471810, 0.46287521996062020, 0.46296588785910240, 0.46305654628110510, 0.46314719522662190, 0.46326363188524930, 0.46335425699128000, 0.46344487262127230, 0.46356125929373560, 0.46365185108688090, 0.46374243340444410, 0.46383300624642430, 0.46385877010036220, 0.46394932858373380, 0.46403987759198310, 0.46413041712511380, 0.46424668949773040, 0.46433720519980520, 0.46442771142723140, 0.46451820818001360, 0.46454393384483600, 0.46463441624389620, 0.46472488916878330, 0.46481535261950570, 0.46484106164108410, 0.46493151074031140, 0.46502195036584880, 0.46511238051770740, 0.46522848870517650, 0.46531889503457420, 0.46540929189078350, 0.46552535015468720, 0.46561572319117580, 0.46570608675497440, 0.46582209510510680, 0.46591243485193830, 0.46600276512658690, 0.46609308592906680, 0.46611872357276840, 0.46620903003321830, 0.46629932702199620, 0.46638961453911960, 0.46641523557407600, 0.46650550875144030, 0.46659577245765020, 0.46668602669272590, 0.46671163112550190, 0.46680187102309680, 0.46689210145006120, 0.46698232240641870, 0.46700791024358440, 0.46709811686475020, 0.46718831401581420, 0.46727850169680670, 0.46739424629302900, 0.46748441017156060, 0.46757456458055970, 0.46769025932463530, 0.46778038993402150, 0.46787051107442070, 0.46789604916422470, 0.46798615597633790, 0.46807625331998680, 0.46816634119520060, 0.46819186271572270, 0.46828193626496970, 0.46837200034631120, 0.46846205495977800, 0.46848755991761270, 0.46857760020744070, 0.46866763102992330, 0.46875765238509860, 0.46878314078684450, 0.46887314782071580, 0.46896314538781530, 0.46905313348817770, 0.46907860534043830, 0.46916857912184060, 0.46925854343704730, 0.46937395359548260, 0.46946389412792300, 0.46955382519475300, 0.46966918556913000, 0.46975909285613700, 0.46984899067812340, 0.46996430127860410, 0.47005417532372720, 0.47014403990442700, 0.47016945047051630, 0.47025930074119420, 0.47034914154800480, 0.47043897289099380, 0.47046436693890960, 0.47055418397425910, 0.47064399154634860, 0.47075916719159720, 0.47084895099522170, 0.47093872533620170, 0.47105385124604810, 0.47114360182157610, 0.47123334293507720, 0.47125869230726810, 0.47134841911979880, 0.47143813647087760, 0.47152784436055600, 0.47155317723934000, 0.47164287083045600, 0.47173255496075250, 0.47184754602230560, 0.47193720639569160, 0.47202685730889440, 0.47205216205492810, 0.47214179867388320, 0.47223142583324070, 0.47234633180385270, 0.47243593521185640, 0.47252552916090890, 0.47264038545328630, 0.47272995565407510, 0.47281951639656750, 0.47284477656609570, 0.47293432302112390, 0.47302386001845440, 0.47313863127064040, 0.47322814452532470, 0.47331764832297770, 0.47334288041122350, 0.47343236992578430, 0.47352184998391830, 0.47363653622845210, 0.47372599254960090, 0.47381543941499910, 0.47384064344196650, 0.47393007602866830, 0.47401949916022910, 0.47413410042977220, 0.47422349983004870, 0.47431288977587480, 0.47433806576158820, 0.47442744143313410, 0.47451680765084950, 0.47463132397817820, 0.47472066647034650, 0.47480999950938090, 0.47483514747388440, 0.47492446624308150, 0.47501377555976930, 0.47512820697777900, 0.47521749257470200, 0.47530676871982670, 0.47533188868318570, 0.47542115056293220, 0.47551040299151370, 0.47562474953322000, 0.47571397824785710, 0.47582828949434680, 0.47591749449764410, 0.47600669005113620, 0.47603177045510390, 0.47612095174967190, 0.47621012359507940, 0.47632435001275490, 0.47641349815269830, 0.47652768929572100, 0.47661681373282830, 0.47670592872216040, 0.47673096960741380, 0.47682007034431800, 0.47690916163410180, 0.47702326799603090, 0.47711233558891070, 0.47722640669684640, 0.47731545059546990, 0.47740448504838520, 0.47742948645565360, 0.47751850666267910, 0.47760751742466190, 0.47772150379945340, 0.47781049087316820, 0.47792444201471690, 0.47801340540283620, 0.47810235934734730, 0.47812732131741340, 0.47821626102261490, 0.47830519128488500, 0.47833014171649740, 0.47841905774146800, 0.47850796432418460, 0.47862179556837120, 0.47871067847422980, 0.47882447451231270, 0.47891333374401530, 0.47900218353492990, 0.47902709458230170, 0.47911593014255460, 0.47920475626270890, 0.47922965578735540, 0.47931846767887310, 0.47940727013098260, 0.47943215813650510, 0.47952094636200810, 0.47960972514879840, 0.47972336620101570, 0.47981212132521570, 0.47992572720496080, 0.48001445866930650, 0.48012802938292550, 0.48021673719016190, 0.48030543556089600, 0.48033027274400930, 0.48041895689688140, 0.48050763161396020, 0.48053245729731500, 0.48062111779858250, 0.48070976886476590, 0.48073458305197190, 0.48082321990439460, 0.48091184732244630, 0.48093665001711340, 0.48102526322345960, 0.48111386699615180, 0.48122724776493680, 0.48131582789504770, 0.48142917353799910, 0.48151773002831040, 0.48163104055182890, 0.48171957340513130, 0.48183284881562600, 0.48192135803471890, 0.48203459833860370, 0.48212308392628880, 0.48223628912998820, 0.48232475108907450, 0.48243792119902080, 0.48252635953232410, 0.48263949455495400, 0.48272790926529780, 0.48284100920705860, 0.48292940029726720, 0.48304246516461070, 0.48313083263752330, 0.48324386243691220, 0.48333220629536520, 0.48344520103326700, 0.48353352128011090, 0.48364648096299780, 0.48373477760108480, 0.48384770223544150, 0.48393597526763360, 0.48404886485994820, 0.48413711428910680, 0.48424996884588060, 0.48433819467488020, 0.48445101420261380, 0.48453921643433290, 0.48465200093954020, 0.48474017957686330, 0.48485292906605960, 0.48494108411187790, 0.48505379859159520, 0.48514193004880310, 0.48525460952557000, 0.48534271739707240, 0.48545536187743250, 0.48554344616613910, 0.48556798553141410, 0.48565605565663870, 0.48574411636546420, 0.48576864432517760, 0.48585669087265780, 0.48594472800452530, 0.48596924456231440, 0.48605726753497510, 0.48614528109281080, 0.48616978625231380, 0.48625778565308920, 0.48637026940468290, 0.48645824523650770, 0.48657069402893680, 0.48665864629475480, 0.48677106013460770, 0.48685898883736790, 0.48697136773123760, 0.48705927287389770, 0.48708372583266750, 0.48717161682838740, 0.48725949841390650, 0.48728393999488150, 0.48737180743562550, 0.48745966546697290, 0.48748409567379880, 0.48757193956253570, 0.48768419287900530, 0.48777201321871190, 0.48788423162010850, 0.48797202841376940, 0.48808421190672320, 0.48817198515732740, 0.48819637463244590, 0.48828413374848080, 0.48837188345902390, 0.48839626157686980, 0.48848399715502270, 0.48859609009273030, 0.48868380213600810, 0.48879586018968920, 0.48888354870110120, 0.48899557187742450, 0.48908323685998900, 0.48910757430736260, 0.48919522516562700, 0.48930719272936100, 0.48939482006399520, 0.48950675276820920, 0.48959435658224510, 0.48970625443362870, 0.48979383473010440, 0.48981813155504700, 0.48990569773535680, 0.49001754001513880, 0.49010508268313780, 0.49021689012799170, 0.49030440928673600, 0.49041618190337430, 0.49050367755592200, 0.49052793380651490, 0.49061541535106740, 0.49072713243722250, 0.49081459048086400, 0.49092627275676650, 0.49101370730256570, 0.49103793433116180, 0.49112535477495650, 0.49123698155035730, 0.49132437850162120, 0.49143597048477710, 0.49152334394659570, 0.49154754177844350, 0.49163490114426250, 0.49172225111972980, 0.49174643765696410, 0.49183377353867170, 0.49194527527717990, 0.49203258767787400, 0.49205675633823360, 0.49214405464895890, 0.49223134357175440, 0.49225550094712810, 0.49234277578219750, 0.49245418732426410, 0.49254143868679500, 0.49256557820094080, 0.49265281547955060, 0.49274004337266730, 0.49276417161145900, 0.49285138542290450, 0.49296270681684970, 0.49304989716426660, 0.49307400755748390, 0.49316118382705140, 0.49327244984108170, 0.49335960265201890, 0.49347083394626420, 0.49355796330171970, 0.49358204459930930, 0.49366915988300140, 0.49378033582764550, 0.49386742766127870, 0.49397856890435750, 0.49406563729109380, 0.49408968951836640, 0.49417674383944930, 0.49428782976330430, 0.49437486064293470, 0.49439889506566410, 0.49448591188348860, 0.49459694250712400, 0.49468393588895720, 0.49470795251684620, 0.49479493184072960, 0.49490590718316950, 0.49499286307653170, 0.49510380375856500, 0.49519073622459790, 0.49521472383885720, 0.49530164225309920, 0.49541252768445420, 0.49549942267686410, 0.49552339252167740, 0.49561027346616590, 0.49572110366593240, 0.49580796119409490, 0.49583191327917110, 0.49591875676330520, 0.49602953175059340, 0.49611635182391930, 0.49622709219215920, 0.49631388885790980, 0.49633781198610210, 0.49642459461401690, 0.49653527980043510, 0.49662203902631500, 0.49664594442018830, 0.49673268961213610, 0.49684331963590780, 0.49693004143137900, 0.49695392910065350, 0.49704063686610410, 0.49715121174642040, 0.49723789612096250, 0.49726176607536040, 0.49734843642379600, 0.49745895617987640, 0.49754560314298910, 0.49756945539223460, 0.49765608833316810, 0.49776655298425270, 0.49785316254545770, 0.49787699709927720, 0.49796359264223340, 0.49807400220758480, 0.49816057437642500, 0.49818439124454800, 0.49827094939907590, 0.49838130389797870, 0.49846783868401430, 0.49849163787617070, 0.49857815865184240, 0.49868845810360490, 0.49877495551641680, 0.49879873704233940, 0.49888522044874250, 0.49899546487269430, 0.49908192492188870, 0.49910568879131370, 0.49919213483805560, 0.49930232425355050, 0.49941249317141200, 0.49949890186812830, 0.49960903629453510, 0.49971915023102420, 0.49980552158735830, 0.49982924368063500, 0.49991560104408090, 0.50002566001859300, 0.50011199404421970, 0.50013569851395410, 0.50022201855067380, 0.50033202258264450, 0.50041831928725350, 0.50044200614318870, 0.50052828886287880, 0.50063823797175400, 0.50074816661693200, 0.50083441202931050, 0.50085807480147190, 0.50094430623455740, 0.50105417998385380, 0.50114038809865600, 0.50116403328024980, 0.50125022741976970, 0.50136004629267680, 0.50146984472043990, 0.50155600157615510, 0.50157962270612350, 0.50166576559219800, 0.50177550917085470, 0.50186162875254780, 0.50188523231519090, 0.50197133793126930, 0.50208102668036960, 0.50219069500291730, 0.50227676335880580, 0.50230034290198110, 0.50238639729792200, 0.50249601081826180, 0.50258204192379150, 0.50260560392289390, 0.50269162107251440, 0.50280117981024200, 0.50291071814005150, 0.50299669805320980, 0.50302023606501490, 0.50310620202795150, 0.50321568560256510, 0.50332514878012720, 0.50341107752053030, 0.50343459156371320, 0.50352050635959700, 0.50362991480941580, 0.50371580633718920, 0.50373930287306600, 0.50382518046038300, 0.50384867055362380, 0.50393453420213590, 0.50404386756553040, 0.50412970795420920, 0.50415318055365170, 0.50423900700759890, 0.50434828569044840, 0.50445754400584250, 0.50454333327517610, 0.50456678195686940, 0.50465255729720680, 0.50476176095961150, 0.50487094426547870, 0.50495668243526390, 0.50498010721789620, 0.50506583146442950, 0.50517496014490120, 0.50528406847976150, 0.50536975556984260, 0.50539315647210580, 0.50547882964469810, 0.50550222412502810, 0.50558788338179420, 0.50569691678421880, 0.50580592985507480, 0.50589155197362640, 0.50591492259745880, 0.50600053080595800, 0.50610948931457340, 0.50621842750257160, 0.50630399858703030, 0.50632734537306240, 0.50641290255325350, 0.50652178620672760, 0.50663064955055970, 0.50671616962091600, 0.50673949258784670, 0.50682499875973540, 0.50684831532169690, 0.50693380759679090, 0.50704259613518330, 0.50715136437802320, 0.50723681956166350, 0.50726011232840610, 0.50734555362106570, 0.50745426739280230, 0.50756296087997710, 0.50767163408570490, 0.50775702441603690, 0.50778028701308560, 0.50786566345994510, 0.50797428223030250, 0.50808288073021980, 0.50816822011839000, 0.50819145896281660, 0.50827678447334340, 0.50830001693119830, 0.50838532856577030, 0.50849385239878420, 0.50860235597549900, 0.50868763056991540, 0.50871083929903880, 0.50879610002334880, 0.50881930237251170, 0.50890454922840650, 0.50901297818820630, 0.50912138690587250, 0.50920659674019240, 0.50922977538451690, 0.50931497135628700, 0.50933814362726330, 0.50942332573817850, 0.50953165988898470, 0.50963997381183730, 0.50974826750984890, 0.50983339876285270, 0.50985654098615280, 0.50994165838587470, 0.51004989779200700, 0.51015811698436920, 0.51026631596610180, 0.51035138253419310, 0.51037449474032820, 0.51045954746273130, 0.51048265331017330, 0.51056769218858980, 0.51067581671490120, 0.51078392104479720, 0.51089200518140600, 0.51097699326045290, 0.51100006912785650, 0.51108504337053910, 0.51110811288729610, 0.51119307329530310, 0.51130108303789560, 0.51140907260143380, 0.51151704198906960, 0.51160195163007830, 0.51162499120392690, 0.51170988701791020, 0.51173292024915560, 0.51181780223781100, 0.51192569729293170, 0.51203357218639980, 0.51214142692136240, 0.51224926150095860, 0.51233407893742110, 0.51235707592833220, 0.51244187954884350, 0.51246487020662530, 0.51254966001289370, 0.51265742033272410, 0.51276516051147520, 0.51287288055229500, 0.51295761966256350, 0.51298058045831900, 0.51306530576203720, 0.51308826023270900, 0.51317297173158570, 0.51319591987860230, 0.51328061757435820, 0.51338824329350920, 0.51349584889218280, 0.51360343437352540, 0.51371099974069660, 0.51379563298371000, 0.51381854499684210, 0.51390316444616560, 0.51392607014511870, 0.51401067580247240, 0.51411816705578400, 0.51422563820926350, 0.51433308926604940, 0.51444052022930610, 0.51452506148389790, 0.51454793110219250, 0.51463245857428320, 0.51465532188787530, 0.51473983557917150, 0.51476269258948590, 0.51484719250173110, 0.51495452934512310, 0.51506184611250880, 0.51516914280704480, 0.51527641943188910, 0.51538367599020970, 0.51546809778804060, 0.51549091248516790, 0.51557532051517020, 0.51559812891992790, 0.51568252318383580, 0.51570532529765510, 0.51578970579719430, 0.51589686835842100, 0.51600401087068000, 0.51611113333713020, 0.51621823576094520, 0.51632531814529560, 0.51640962061107140, 0.51643238049334660, 0.51651666920602360, 0.51653942280826120, 0.51662369776959520, 0.51664644509323050, 0.51673070630493960, 0.51675344735139620, 0.51683769481523580, 0.51694466330365230, 0.51705161177337050, 0.51715854022756560, 0.51726544866939330, 0.51737233710203820, 0.51747920552868550, 0.51758605395248090, 0.51767019600172760, 0.51769288237663430, 0.51777701069281740, 0.51779969080431000, 0.51788380538918850, 0.51790647923870070, 0.51799058009399600, 0.51801324768294960, 0.51809733481043130, 0.51820406954167150, 0.51831078429090210, 0.51841747906131200, 0.51852415385606210, 0.51863080867834570, 0.51873744353132720, 0.51884405841822920, 0.51895065334219930, 0.51903462149257030, 0.51905722830645780, 0.51914118274562120, 0.51916378331413390, 0.51924772404389010, 0.51927031836847160, 0.51935424539055590, 0.51937683347262840, 0.51946074678880140, 0.51948332862979520, 0.51956722824181920, 0.51958980384316490, 0.51967368975279080, 0.51978013132492550, 0.51988655296139620, 0.51999295466538570, 0.52009933644008910, 0.52020569828870980, 0.52031204021442960, 0.52041836222044160, 0.52052466430994970, 0.52063094648613230, 0.52073720875220570, 0.52084345111133900, 0.52094967356675250, 0.52105587612159960, 0.52116205877911810, 0.52124574384048840, 0.52126822154250930, 0.52135189292882200, 0.52137436441494470, 0.52145802212799200, 0.52148048739965190, 0.52156413144117050, 0.52158659049978540, 0.52167022087156990, 0.52169267371857550, 0.52177629042240690, 0.52179873705923370, 0.52188234009690380, 0.52190478052498520, 0.52198836989820400, 0.52201080411895010, 0.52209437982951950, 0.52211680784436720, 0.52220036989407020, 0.52222279170444920, 0.52230634009505750, 0.52232875570239490, 0.52241229043571820, 0.52243469984145130, 0.52251822091920980, 0.52254062412475050, 0.52262413154875030, 0.52264652855553520, 0.52273002232754330, 0.52275241313699660, 0.52283589325883410, 0.52285827787239540, 0.52294174434578410, 0.52296412276486510, 0.52304757559156690, 0.52306994781759060, 0.52315338699945610, 0.52317575303386900, 0.52325917857258450, 0.52328153841678840, 0.52336495031436230, 0.52338730396984590, 0.52347070222750170, 0.52349304969554190, 0.52357643431601810};
                break;
            case 15:
                halfErrorTheta = {0.00000000000000000, 0.00001117042513632, 0.00005286047422009, 0.00006403244545877, 0.00010572590275691, 0.00011689942056577, 0.00015859628738094, 0.00016977135192977, 0.00021147162845302, 0.00022264823994404, 0.00026435192648690, 0.00027553008501971, 0.00031723718151029, 0.00032841688727079, 0.00037012739396104, 0.00038130864716786, 0.00042302256443022, 0.00043420536526208, 0.00047592269331859, 0.00048710704188591, 0.00052882778070773, 0.00054001367724568, 0.00058173782726689, 0.00059292527196200, 0.00063465283343334, 0.00064584182644161, 0.00068757279950396, 0.00069876334100892, 0.00074049772590311, 0.00075168981608451, 0.00079342761303765, 0.00080462125207270, 0.00084636246130208, 0.00085755764936620, 0.00089930227108314, 0.00091049900835046, 0.00095224704276326, 0.00096344532942423, 0.00100519677679735, 0.00101639661302206, 0.00105815147354800, 0.00106935285952202, 0.00111111113344668, 0.00112231406933741, 0.00116407575684494, 0.00117528024283499, 0.00121704534416547, 0.00122825138045546, 0.00127001989590254, 0.00128122748263566, 0.00132299941230130, 0.00133420854967538, 0.00137598389384885, 0.00138719458203917, 0.00142897334093032, 0.00144018558011164, 0.00148196775393221, 0.00149318154429527, 0.00153496713330306, 0.00154618247500315, 0.00158797147934826, 0.00159918837258998, 0.00164098079257703, 0.00165219923751982, 0.00169399507331185, 0.00174701432202246, 0.00180003853906168, 0.00185306772481175, 0.00190610187971800, 0.00195914100412164, 0.00201218509851126, 0.00206523416321278, 0.00211828819864373, 0.00217134720522808, 0.00222441118335064, 0.00227748013339866, 0.00233055405578696, 0.00238363295092012, 0.00243671681917501, 0.00248980566095991, 0.00254289947669840, 0.00259599826676482, 0.00264910203154622, 0.00270221077150081, 0.00275532448696025, 0.00279719098645554, 0.00280844317837429, 0.00285031309841363, 0.00286156684608930, 0.00290344018696563, 0.00291469549056503, 0.00295657225245652, 0.00296782911216121, 0.00300970929529951, 0.00302096771128736, 0.00306285131589029, 0.00307411128833853, 0.00311599831462445, 0.00312725984372100, 0.00316915029193832, 0.00318041337784793, 0.00322230724817405, 0.00327546918377570, 0.00332863609912434, 0.00338180799460485, 0.00343498487064754, 0.00348816672761966, 0.00354135356593191, 0.00359454538600613, 0.00364774218821989, 0.00370094397295874, 0.00375415074064801, 0.00380736249167876, 0.00386057922644204, 0.00391380094535277, 0.00395574162637235, 0.00396702764877722, 0.00400897175513320, 0.00402025933714494, 0.00406220686903022, 0.00407349601083649, 0.00411544696850247, 0.00412673767027335, 0.00416869205391005, 0.00417998431582810, 0.00422194212566811, 0.00423323594790897, 0.00427519718416453, 0.00432845722982397, 0.00438172226301418, 0.00443499228416246, 0.00448826729363193, 0.00454154729183852, 0.00459483227920618, 0.00464812225609496, 0.00470141722291132, 0.00475471718006486, 0.00480802212795374, 0.00485001994524739, 0.00486133206696878, 0.00490333331320463, 0.00491464699750211, 0.00495665167288542, 0.00496796691994715, 0.00500997502473047, 0.00502129183472983, 0.00506330336911421, 0.00507462174223178, 0.00511663670644054, 0.00516997503709080, 0.00522331836148264, 0.00527666668001752, 0.00533001999306769, 0.00538337830104679, 0.00543674160434172, 0.00549010990337182, 0.00554348319851384, 0.00558552791534889, 0.00559686149018004, 0.00563890963891265, 0.00565024477875626, 0.00569229635959706, 0.00570363306463851, 0.00574568807782798, 0.00575702634824232, 0.00579908479398624, 0.00585248650845624, 0.00590589322166046, 0.00595930493397035, 0.00601272164581413, 0.00606614335755387, 0.00611957006960919, 0.00617300178238117, 0.00621508656951534, 0.00622643849625541, 0.00626852671779541, 0.00627988021162833, 0.00632197186779549, 0.00633332692890182, 0.00637542201991893, 0.00638677864847194, 0.00642887717454046, 0.00648233733208551, 0.00653580249294105, 0.00658927265749476, 0.00664274782614894, 0.00669622799929568, 0.00674971317733925, 0.00680320336067365, 0.00684532824690222, 0.00685669854969595, 0.00689882687283709, 0.00691019874480016, 0.00695233050506658, 0.00696370394638044, 0.00700583914400080, 0.00705935279003487, 0.00711287144354579, 0.00716639510494852, 0.00721992377463251, 0.00727345745299796, 0.00732699614043472, 0.00736915427631675, 0.00738053983734858, 0.00742270141220280, 0.00743408854412499, 0.00747625355816993, 0.00748764226116122, 0.00752981071461495, 0.00758337288194263, 0.00763694006054164, 0.00769051225080890, 0.00774408945313732, 0.00779767166792893, 0.00785125889557028, 0.00789345030064331, 0.00790485113646406, 0.00794704598257703, 0.00795844839100823, 0.00800064667836949, 0.00801205065959176, 0.00805425238842386, 0.00810786311312877, 0.00816147885288823, 0.00821509960808602, 0.00826872537913105, 0.00832235616640471, 0.00836457741730644, 0.00837599197031218, 0.00841821666408890, 0.00842963279124897, 0.00847186092811859, 0.00848327862960929, 0.00852551020977977, 0.00857916450947782, 0.00863282382760649, 0.00868648816455597, 0.00874015752072315, 0.00878240518853934, 0.00879383189650415, 0.00883608300881223, 0.00884751129229318, 0.00888976584930859, 0.00890119570848390, 0.00894345371042201, 0.00899714659256341, 0.00905084449610320, 0.00910454742144706, 0.00915825536898837, 0.00921196833912240, 0.00925424588205599, 0.00926568633224255, 0.00930796732149625, 0.00931940934874319, 0.00936169378454413, 0.00941542527158601, 0.00946916178301226, 0.00952290331921651, 0.00957664988059673, 0.00963040146754868, 0.00967270545317929, 0.00968415808045792, 0.00972646551402554, 0.00973791971972793, 0.00978023060145479, 0.00983400071584637, 0.00988777585759892, 0.00994155602710893, 0.00999534122476852, 0.01003766821581911, 0.01004913145096956, 0.01009146189135337, 0.01010292670611063, 0.01014526059604463, 0.01019906433027673, 0.01025287309445007, 0.01030668688896280, 0.01036050571419642, 0.01040285571969635, 0.01041432957055517, 0.01045668302677816, 0.01046815845842685, 0.01051051536558842, 0.01052199237820734, 0.01056435273652657, 0.01061819513997647, 0.01067204257633416, 0.01072589504600035, 0.01076826807496360, 0.01077975254936762, 0.01082212903043819, 0.01083361508681734, 0.01087599502022006, 0.01088748265875312, 0.01092986604470189, 0.01098374210427280, 0.01103762319932989, 0.01109150933025877, 0.01113390539167328, 0.01114540049746045, 0.01118780001237635, 0.01119929670132420, 0.01124169966996488, 0.01129560436481849, 0.01134951409733621, 0.01140342886790589, 0.01145734867693094, 0.01149976777978365, 0.01151127352479300, 0.01155369608254115, 0.01156520341189164, 0.01160762942473860, 0.01166156780678298, 0.01171551122905858, 0.01176945969196497, 0.01181189838916555, 0.01182341319588187, 0.01186585534914218, 0.01187737174120844, 0.01191981735074744, 0.01197378439436918, 0.01202775648039595, 0.01208173360922525, 0.01212419190717767, 0.01213571578125103, 0.01217817753643227, 0.01218970299685888, 0.01223216820948126, 0.01228616392672202, 0.01234016468854965, 0.01239417049535400, 0.01244818134751737, 0.01249066271100210, 0.01250219724543904, 0.01254468206754280, 0.01259870647043955, 0.01265273592008958, 0.01270677041688877, 0.01274926793550226, 0.01276080996122770, 0.01280331093940451, 0.01281485455349596, 0.01285735899145221, 0.01291141209203126, 0.01296547024153435, 0.01301953344035885, 0.01306205057886527, 0.01307360168888736, 0.01311612228812433, 0.01312767498751592, 0.01317019904769141, 0.01322428085796753, 0.01327836771933491, 0.01333245963219127, 0.01337499639695480, 0.01338655659692061, 0.01342909682358360, 0.01344065861392376, 0.01348320230268469, 0.01353731283465444, 0.01359142841989409, 0.01364554905877999, 0.01368810545615977, 0.01369967475171283, 0.01374223461214441, 0.01379636882277844, 0.01385050808844615, 0.01390465240954141, 0.01394722498187547, 0.01395880178645619, 0.01400137782279512, 0.01401295621958317, 0.01405553572013212, 0.01410969867427617, 0.01416386668562516, 0.01420645543714530, 0.01421803975456583, 0.01426063197103446, 0.01427221788148915, 0.01431481356311580, 0.01436900021377945, 0.01442319192342075, 0.01447738869242185, 0.01451999709324848, 0.01453159052118354, 0.01457420238811063, 0.01462841274332982, 0.01468262815929232, 0.01473684863639371, 0.01477947322578648, 0.01479107417501571, 0.01483370223145963, 0.01488793629925725, 0.01494217542957385, 0.01499641962279522, 0.01503906040497350, 0.01505066887930938, 0.01509331312947859, 0.01514757091787778, 0.01520183377056883, 0.01525610168793143, 0.01529875866709963, 0.01531037467035520, 0.01535303511845582, 0.01540731663547961, 0.01546160321855746, 0.01551589486807376, 0.01555856804843144, 0.01557019158442054, 0.01561286823465462, 0.01566717348830629, 0.01572148380978220, 0.01576416972492503, 0.01577579919946711, 0.01581848858521195, 0.01583011965774539, 0.01587281251430115, 0.01592714151259111, 0.01598147558046834, 0.01602417770424329, 0.01603581471831653, 0.01607852031363566, 0.01609015892652738, 0.01613286799359873, 0.01618722074452625, 0.01624157856680010, 0.01628429690339543, 0.01629594146081240, 0.01633866326989105, 0.01639303470871929, 0.01644741122027163, 0.01650179280494037, 0.01654452735853752, 0.01655617946310888, 0.01659891749012080, 0.01665331269580541, 0.01670771297597496, 0.01675046027660156, 0.01676211833102127, 0.01680486910578921, 0.01685928301044929, 0.01691370199096714, 0.01696812604773456, 0.01701088957276750, 0.01702255518113918, 0.01706532218124728, 0.01711975986696066, 0.01717420263029228, 0.01721697890809186, 0.01722865047163468, 0.01727143022523479, 0.01732588662098544, 0.01738034809572345, 0.01742313712878846, 0.01743481464983923, 0.01747760715942826, 0.01748928628371929, 0.01753208227004692, 0.01758656246102566, 0.01764104773275817, 0.01768385300083907, 0.01769553808562381, 0.01773834683116513, 0.01779284574322042, 0.01784734973739288, 0.01789016776646042, 0.01790185881407432, 0.01794468032131856, 0.01799919795927829, 0.01805372068073017, 0.01809655147327040, 0.01810824848605219, 0.01815108275749555, 0.01820561912619026, 0.01826016057974021, 0.01830300413824665, 0.01831470711853216, 0.01835755415666020, 0.01836925874295252, 0.01841210926091120, 0.01846666945138678, 0.01852123472847348, 0.01856409453577130, 0.01857580509255134, 0.01861866838040042, 0.01867324731262184, 0.01872783133281502, 0.01877070391176828, 0.01878242044137307, 0.01882529650159601, 0.01887989418037969, 0.01893449694850263, 0.01897738230159175, 0.01898910480635617, 0.01903199364142726, 0.01908661007158685, 0.01914123159245122, 0.01918412972214576, 0.01919585820440750, 0.01923875981680807, 0.01929339500315542, 0.01934803528157117, 0.01939094619034920, 0.01940268065244373, 0.01944559504464464, 0.01950024899198743, 0.01955490803276360, 0.01959783172309646, 0.01960957216735816, 0.01965249934182612, 0.01970717205496735, 0.01975010504467487, 0.01976184986290517, 0.01980478633725761, 0.01981653276602349, 0.01985947272522992, 0.01991416420897384, 0.01995710998445487, 0.01996886078887770, 0.02001181004971780, 0.02006651521172872, 0.02012122547087267, 0.02016418403458505, 0.02017594082753429, 0.02021890287732035, 0.02027362681816838, 0.02032835585750928, 0.02037132721191592, 0.02038308999572715, 0.02042606483692039, 0.02048080756139708, 0.02053555538572409, 0.02057853953328273, 0.02059030831029174, 0.02063329594535012, 0.02068805745824309, 0.02073105091339758, 0.02074282407234801, 0.02078582101551059, 0.02084059621942183, 0.02089537652551924, 0.02093838277801896, 0.02095016193418764, 0.02099317167540287, 0.02104796567594606, 0.02110276478003200, 0.02114578383232290, 0.02115756898804512, 0.02120059152976403, 0.02125540433171826, 0.02129843269631732, 0.02131022223857559, 0.02135325409310396, 0.02140808059537852, 0.02146291220352474, 0.02150595337209098, 0.02151774891792343, 0.02156079357713241, 0.02161563888901523, 0.02165868937284982, 0.02167048930812558, 0.02171354328310610, 0.02176840230117235, 0.02182326642743933, 0.02186632971941352, 0.02187813566228353, 0.02192120244611294, 0.02197608028197872, 0.02201915289217532, 0.02203096322739428, 0.02207403932994755, 0.02212893087785614, 0.02218382753628577, 0.02222691295878331, 0.02223872930561597, 0.02228181822117620, 0.02233672859505886, 0.02237982333872884, 0.02239164408081590, 0.02243474231804718, 0.02248966640982130, 0.02254459561444031, 0.02258770317456405, 0.02259952993228435, 0.02264264098667502, 0.02269758391259206, 0.02274070079682637, 0.02275253195270552, 0.02279565233170642, 0.02285060898136367, 0.02290557074618155, 0.02294870045100779, 0.02300367082683921, 0.02305864631879742, 0.02310178535067075, 0.02311362692726418, 0.02315676945510776, 0.02321175867664091, 0.02325490703677329, 0.02326675301564840, 0.02330990487225002, 0.02336490782578822, 0.02341991589776690, 0.02346307708434302, 0.02351809377231698, 0.02357311557970087, 0.02361628609745505, 0.02362814250686893, 0.02367131652229581, 0.02372635206751130, 0.02376953191766310, 0.02378139273347987, 0.02382457608179894, 0.02387962536727099, 0.02392281455102822, 0.02393467977446545, 0.02397787245688535, 0.02403293548504437, 0.02408800363588370, 0.02413120565361373, 0.02418628242688371, 0.02424136432379941, 0.02428457567804205, 0.02429645134474126, 0.02433966619884550, 0.02439476184426104, 0.02443798253622426, 0.02444986261466326, 0.02449308680698278, 0.02454819620331610, 0.02459142623420226, 0.02460331072559914, 0.02464654425734018, 0.02470166740700919, 0.02474490677802347, 0.02475679568359435, 0.02480003855595729, 0.02485517546138411, 0.02489842417372712, 0.02491031749468877, 0.02495356970887432, 0.02500872037247687, 0.02505197842734951, 0.02506387616491857, 0.02510713772212627, 0.02516230214632146, 0.02520556954492173, 0.02521747170031463, 0.02526074260174194, 0.02531592078894445, 0.02537110410690341, 0.02541438435374950, 0.02546957630637272, 0.02552477339070881, 0.02556806298416899, 0.02562326870462136, 0.02567847955774971, 0.02572177849902006, 0.02577699798971191, 0.02583222261404068, 0.02587553090431151, 0.02593076416765637, 0.02598600256559520, 0.02602932020606290, 0.02608456724446546, 0.02613981941841736, 0.02618314641026884, 0.02623840722613469, 0.02629367317850992, 0.02633700952293680, 0.02639228411867235, 0.02644756385187364, 0.02649090955006508, 0.02654619792806972, 0.02658954947396011, 0.02660149144450025, 0.02664484649764343, 0.02670014866032466, 0.02674350956186242, 0.02675545596238570, 0.02679882037166330, 0.02685413632141974, 0.02689750657978780, 0.02690945741150984, 0.02695283117810837, 0.02700816091733884, 0.02705154053372286, 0.02706349579785790, 0.02710687892295814, 0.02716222245406091, 0.02720561142964289, 0.02721757112740691, 0.02726096361219422, 0.02731632093756639, 0.02735971927352611, 0.02737168340613354, 0.02741508525178722, 0.02747045637382088, 0.02751386407134025, 0.02756924384770216, 0.02762462876879210, 0.02766804582904889, 0.02772343940590973, 0.02776686231912752, 0.02777883812844854, 0.02782226455261537, 0.02787767193236258, 0.02792110421018320, 0.02793308445874021, 0.02797652024800081, 0.02803194143302210, 0.02807538307662053, 0.02808736776562649, 0.02813081292115256, 0.02818624791384028, 0.02822969892439384, 0.02828514257802297, 0.02834059138076322, 0.02838405175943972, 0.02843950922455369, 0.02848297545934800, 0.02849497183972797, 0.02853844158770198, 0.02859391286669035, 0.02863738847146696, 0.02864938929668504, 0.02869286841512634, 0.02874835351036480, 0.02879183848629407, 0.02884733224763766, 0.02889082308145248, 0.02890283116151126, 0.02894632550975867, 0.02900183309117023, 0.02904533329798574, 0.02905734582605690, 0.02910084954779265, 0.02915637095164518, 0.02919988053263344, 0.02921189750992810, 0.02925541060631231, 0.02931094583498949, 0.02935446479130866, 0.02941000869123745, 0.02945353350789116, 0.02946555774711386, 0.02950908607992982, 0.02956464380848580, 0.02960817800231592, 0.02962020669393478, 0.02966374440440656, 0.02971931596396328, 0.02976285953613089, 0.02981843977064942, 0.02986198920490579, 0.02987402516357753, 0.02991757811524016, 0.02997317218455588, 0.03001673099898817, 0.03007233374554687, 0.03011589842314035, 0.03012794165202982, 0.03017150984779501, 0.03022712643294210, 0.03027070049254498, 0.03028274817896061, 0.03032632575721416, 0.03038195618332000, 0.03042553962608725, 0.03048117873313592, 0.03052476804081425, 0.03053682300256793, 0.03058041582965376, 0.03063606878144465, 0.03067966747411675, 0.03073532910912260, 0.03077893366776792, 0.03079099590802270, 0.03083460398683745, 0.03089027947037143, 0.03093389341583448, 0.03098957758485156, 0.03103319739735772, 0.03104526691927508, 0.03108889025270707, 0.03114458827403040, 0.03118821747517495, 0.03120029146170109, 0.03124392418424794, 0.03128755925349731, 0.03129963606023777, 0.03134327465116854, 0.03139899521632278, 0.03144263967602783, 0.03145472094933357, 0.03149836893119633, 0.03154201926006511, 0.03155410335478926, 0.03159775720609667, 0.03165350032111488, 0.03169716004225474, 0.03170924860549926, 0.03175291184955054, 0.03179657744091207, 0.03180866882677869, 0.03185233794133223, 0.03190810361224510, 0.03195177859768775, 0.03200755296313793, 0.03205123381985500, 0.03206333250002221, 0.03210701688068591, 0.03216280511351732, 0.03220649536612265, 0.03226229229574378, 0.03230598842067912, 0.03231809439830529, 0.03236179404793893, 0.03241760484869911, 0.03246131037132443, 0.03251712987112895, 0.03256084126713624, 0.03257295454537669, 0.03261666946682861, 0.03267250284152761, 0.03271622363702347, 0.03277206571301628, 0.03281579238294186, 0.03282791296495358, 0.03287164316107308, 0.03291537570580838, 0.03292749911570972, 0.03297123518691985, 0.03302709984510074, 0.03307084179178243, 0.03312671515434877, 0.03317046297688988, 0.03318259369491896, 0.03322634504468012, 0.03328223229103741, 0.03332598951731623, 0.03338188547030310, 0.03342564857348137, 0.03348155323393664, 0.03352532221439533, 0.03353746307445582, 0.03358123558315749, 0.03363715413254787, 0.03368093251918924, 0.03373685977828742, 0.03378064404325087, 0.03379279221894754, 0.03383658001289804, 0.03388037015656092, 0.03389252116466487, 0.03393631483759146, 0.03399226470130422, 0.03403606425358787, 0.03409202283008600, 0.03413582826210793, 0.03414798659019942, 0.03419179555222423, 0.03423560686436160, 0.03424776802651826, 0.03429158286893540, 0.03434756405824780, 0.03439138478143486, 0.03444737468659947, 0.03449120129093504, 0.03450336977743007, 0.03454719991278805, 0.03459103239865269, 0.03460320372086831, 0.03464703973802514, 0.03470305226418851, 0.03474689416352533, 0.03480291540860540, 0.03484676319049751, 0.03490279315532612, 0.03494664682015267, 0.03495882830843305, 0.03500268550556540, 0.03504654505370008, 0.03505872937981430, 0.03510259246053028, 0.03515864505675450, 0.03520251402142722, 0.03525857534045793, 0.03530245018946478, 0.03535852023213545, 0.03540240096585227, 0.03541459546568664, 0.03545847973299005, 0.03550236635179070, 0.03551456369157020, 0.03555845384423061, 0.03561454652866972, 0.03565844256706085, 0.03571454397818589, 0.03575844590268058, 0.03581455604132736, 0.03585846385229938, 0.03587067137345255, 0.03591458271929058, 0.03595849641711330, 0.03597070678032054, 0.03601462401327996, 0.03607075680404390, 0.03611467992449804, 0.03617082144582362, 0.03621475045414344, 0.03627090070685568, 0.03631483560341609, 0.03637099458834467, 0.03641493537351254, 0.03642715876990546, 0.03647110309148332, 0.03651504976563107, 0.03652727600664237, 0.03657122621747100, 0.03662740786705603, 0.03667136396750474, 0.03672755435233898, 0.03677151634277819, 0.03682771546368681, 0.03687168334448623, 0.03692789120229651, 0.03697186497382590, 0.03698410425988149, 0.03702808156935841, 0.03707206123198505, 0.03708430336522164, 0.03712828656606709, 0.03717227212016204, 0.03718451710103373, 0.03722850619361337, 0.03728474546850511, 0.03732874045318889, 0.03738498846882937, 0.03742898934598307, 0.03748524610319331, 0.03752925287318610, 0.03758551837278653, 0.03762953103598318, 0.03768580527879953, 0.03772982383556711, 0.03774208472563500, 0.03778610682241729, 0.03783013127312049, 0.03784239501383857, 0.03788642300482430, 0.03793045334983110, 0.03794271994165449, 0.03798675382721007, 0.03803079006688464, 0.03804305951026753, 0.03808709929075738, 0.03814341372086135, 0.03818745939665122, 0.03824378257461999, 0.03828783414607226, 0.03834416607272404, 0.03838822354020274, 0.03844456421635738, 0.03848862758022768, 0.03854497700669969, 0.03858904626732374, 0.03864540444493265, 0.03868947960267082, 0.03874584653223550, 0.03878992758745223, 0.03880221867169806, 0.03884630326978167, 0.03889039022283953, 0.03890268416256499, 0.03894677465875551, 0.03899086751001591, 0.03900316430567429, 0.03904726070033032, 0.03909135945015192, 0.03910365910219756, 0.03914776139568199, 0.03919186604442664, 0.03920416855331321, 0.03924827674598577, 0.03929238729401546, 0.03930469266019625, 0.03934880675241550, 0.03939292320008830, 0.03940523142401792, 0.03944935141614608, 0.03949347376382045, 0.03950578484595230, 0.03954991073834799, 0.03960635292717153, 0.03965048472019228, 0.03970693566884934, 0.03975107336285475, 0.03980753307215120, 0.03985167666749994, 0.03990814513824878, 0.03995229463529876, 0.04000877186831337, 0.04005292726741953, 0.04010941326350847, 0.04015357456502954, 0.04021006932500376, 0.04025423652929775, 0.04031074005396445, 0.04035491316138456, 0.04041142545155685, 0.04045560446245934, 0.04051212551894128, 0.04055631043368583, 0.04061284025728755, 0.04065703107622426, 0.04071356966775467, 0.04075776639123801, 0.04081431375150310, 0.04085851637989019, 0.04091507250969838, 0.04095928104334233, 0.04101584594349672, 0.04106006038275010, 0.04111663405405878, 0.04116085439927550, 0.04120507710163262, 0.04121743684254339, 0.04126166309407575, 0.04130589170284038, 0.04131825431010739, 0.04136248646830779, 0.04140672098383169, 0.04141908645790734, 0.04146332452312739, 0.04150756494576402, 0.04151993328710065, 0.04156417725969238, 0.04160842358979282, 0.04162079479884243, 0.04166504467915478, 0.04170929691706863, 0.04172167099428370, 0.04176592678266956, 0.04181018492874778, 0.04182256187458083, 0.04186682357139100, 0.04191108762598147, 0.04192346744088370, 0.04196773504646631, 0.04201200500992198, 0.04206866120905240, 0.04211293708172164, 0.04216960206029610, 0.04221388384252855, 0.04227055760134808, 0.04231484529349070, 0.04237152783335768, 0.04241582143575858, 0.04247251275746972, 0.04251681227047687, 0.04257351237483454, 0.04261781779879636, 0.04266212558118538, 0.04267452668659550, 0.04271883802185878, 0.04276315171563817, 0.04277555569389924, 0.04281987294081032, 0.04286419254632633, 0.04287659939788940, 0.04292092255679341, 0.04296524807439369, 0.04297765779971029, 0.04302198687095370, 0.04306631830098246, 0.04312306588443125, 0.04316740322723342, 0.04322415959836742, 0.04326850285428763, 0.04332526801390380, 0.04336961718328697, 0.04342639113218045, 0.04347074621537067, 0.04351510365771214, 0.04352752895433375, 0.04357188995167349, 0.04361625330825461, 0.04362868148150302, 0.04367304839333496, 0.04371741766449677, 0.04372984871482305, 0.04377422154149142, 0.04381859672757768, 0.04387540939727938, 0.04391979049863167, 0.04397661196183299, 0.04402099897879110, 0.04407782923628611, 0.04412222216919488, 0.04416661746179351, 0.04417906122177157, 0.04422346007096848, 0.04426786127994403, 0.04428030791942000, 0.04432471268524857, 0.04436911981094235, 0.04442598001316490, 0.04447039305591545, 0.04452726205584790, 0.04457168101599501, 0.04462855881442326, 0.04467298369230703, 0.04471741093032710, 0.04472987029002528, 0.04477430108598309, 0.04481873424216170, 0.04483119648377468, 0.04487563319814517, 0.04492007227282403, 0.04497698002992376, 0.04502142502343917, 0.04507834158244303, 0.04512279249513162, 0.04517971785682612, 0.04522417468902628, 0.04526863388180092, 0.04528110885419680, 0.04532557160624453, 0.04537003671895170, 0.04542698324790886, 0.04547145428088392, 0.04552840961514030, 0.04557288656871974, 0.04562985070906072, 0.04567433358357935, 0.04571881881902390, 0.04573130653078795, 0.04577579532657961, 0.04582028648338299, 0.04587727179884174, 0.04592176887733656, 0.04597876300148107, 0.04602326600200141, 0.04606777136370987, 0.04608026893561425, 0.04612477785849235, 0.04616928914264445, 0.04618178960235694, 0.04622630444792705, 0.04627082165485312, 0.04632784577141731, 0.04637236890145047, 0.04642940183007804, 0.04647393088355082, 0.04651846229855791, 0.04653097262502154, 0.04657550760226458, 0.04662004494112434, 0.04667709905870343, 0.04672164232174603, 0.04677870525397626, 0.04682325444153556, 0.04686780599088464, 0.04688032618919462, 0.04692488130159830, 0.04696943877587360, 0.04702652290304343, 0.04707108630257611, 0.04712817924697844, 0.04717274857209633, 0.04721732025926064, 0.04722985033450771, 0.04727442558554066, 0.04731900319870230, 0.04737611734401503, 0.04742070088349900, 0.04747782384862206, 0.04752241331475834, 0.04756700514319424, 0.04757954510046658, 0.04762414049358133, 0.04766873824907554, 0.04772588242106811, 0.04777048610394969, 0.04781509214930301, 0.04782763909832294, 0.04787224870891638, 0.04791686068206152, 0.04797402606507478, 0.04801864396633740, 0.04807581817352314, 0.04812044200322966, 0.04816506819565820, 0.04817762503536105, 0.04822225479383601, 0.04826688691511171, 0.04832408233925218, 0.04836872038970019, 0.04841336080303797, 0.04842592464057304, 0.04847056862051662, 0.04851521496342929, 0.04857243160865669, 0.04861708388146826, 0.04867430935521227, 0.04871896755824465, 0.04876362812441352, 0.04877620186127926, 0.04882086599485412, 0.04886553249164419, 0.04892277919238647, 0.04896745162011796, 0.04901212641115396, 0.04902470715192933, 0.04906938551092754, 0.04911406623330640, 0.04917133416516031, 0.04921602081920239, 0.04926070983671016, 0.04927329758390197, 0.04931799016992827, 0.04936268511949945, 0.04941997428657277, 0.04946467516852388, 0.04950937841410534, 0.04952197317021971, 0.04956667998487344, 0.04961138916323252, 0.04966869956962622, 0.04971341468108279, 0.04975813215633186, 0.04977073392387188, 0.04981545496874318, 0.04986017837748416, 0.04991751002729377, 0.04996223936984409, 0.05000697107634763, 0.05001957985781685, 0.05006431513449229, 0.05010905277519806, 0.05016640567250981, 0.05021114924773403, 0.05025589518707462, 0.05026851098497488, 0.05031326049503536, 0.05035801236928696, 0.05041538651817838, 0.05046014432765560, 0.05050490450140734, 0.05051752731823918, 0.05056229106325869, 0.05060705717262825, 0.05065182564635270, 0.05066445257717021, 0.05070922462247078, 0.05075399903220211, 0.05081140685201133, 0.05085618719806305, 0.05090096990863181, 0.05091360386232282, 0.05095839014500893, 0.05100317879228424, 0.05106060787411014, 0.05110540245840736, 0.05115019940737420, 0.05116284038643658, 0.05120764090806782, 0.05125244379444414, 0.05130989414233721, 0.05135470296643383, 0.05139951415535600, 0.05145697692441141, 0.05150179405143760, 0.05154661354337034, 0.05155926566944449, 0.05160408873488755, 0.05164891416530965, 0.05170639820676868, 0.05175122957599033, 0.05179606331027175, 0.05185355977647818, 0.05189839944994159, 0.05194324148854570, 0.05195590476783719, 0.05200075038079053, 0.05204559835895729, 0.05210311610388230, 0.05214797002192063, 0.05219282630525017, 0.05225035647849579, 0.05229521870207811, 0.05234008329103026, 0.05235275772974117, 0.05239762589388249, 0.05244249642346679, 0.05250004788172512, 0.05254492435224787, 0.05258980318829019, 0.05264736707843033, 0.05269225185578867, 0.05273713899874512, 0.05274982460307131, 0.05279471532205111, 0.05283960840669963, 0.05288450385702231, 0.05289719358813163, 0.05294209261477873, 0.05298699400717060, 0.05304459162403487, 0.05308949895880032, 0.05313440865938822, 0.05319201871296480, 0.05323693435630066, 0.05328185236553308, 0.05329455327071290, 0.05333947485710075, 0.05338439880945486, 0.05342932512778235, 0.05344203016283862, 0.05348696005862001, 0.05353189232044270, 0.05358953611407252, 0.05363447431969171, 0.05367941489142862, 0.05373707112658142, 0.05378201764248693, 0.05382696652458484, 0.05388463520253104, 0.05392959002916667, 0.05397454722206932, 0.05398726757260598, 0.05403222834408078, 0.05407719148189210, 0.05412215698604104, 0.05413488147037078, 0.05417985055338903, 0.05422482200281463, 0.05428252443760455, 0.05432750183260633, 0.05437248159408838, 0.05443019647645347, 0.05447518218387920, 0.05452017025785939, 0.05457789758906496, 0.05462289160935310, 0.05466788799626777, 0.05472562777757885, 0.05477063011116787, 0.05481563481145360, 0.05482837876357181, 0.05487338704413248, 0.05491839769145676, 0.05496341070555017, 0.05497615879619595, 0.05502117539085440, 0.05506619435235028, 0.05511121568068564, 0.05512396791068561, 0.05516899281987887, 0.05521402009597817, 0.05525904973898794, 0.05527180610916639, 0.05531683933332530, 0.05536187492445946, 0.05540691288257594, 0.05541967339375713, 0.05546471493331281, 0.05550975883991431, 0.05555480511356652, 0.05556756976657493, 0.05561261962195754, 0.05565767184445567, 0.05570272643407414, 0.05571549522973354, 0.05576055340137097, 0.05580561394019439, 0.05586344978533947, 0.05590851627366021, 0.05595358512923372, 0.05601143343549674, 0.05605650824092550, 0.05610158541367629, 0.05615944618230502, 0.05620452930526678, 0.05624961479561828, 0.05630748802785933, 0.05635257946877715, 0.05639767327715250, 0.05644276945298678, 0.05645555897425083, 0.05650065873354525, 0.05654576086036577, 0.05659086535471420, 0.05660365902356680, 0.05664876710165999, 0.05669387754734575, 0.05673899036062428, 0.05675178817788743, 0.05679690457519861, 0.05684202334016840, 0.05688714447279657, 0.05689994643929211, 0.05694507115623959, 0.05699019824091013, 0.05703532769330650, 0.05704813380985525, 0.05709326684685452, 0.05713840225164254, 0.05718354002422220, 0.05719635029164543, 0.05724149164911225, 0.05728663537443315, 0.05733178146761013, 0.05738974556507621, 0.05743489761134234, 0.05748005202552939, 0.05753802859680594, 0.05758318896442985, 0.05762835170003980, 0.05768634074635576, 0.05773150943574898, 0.05777668049319054, 0.05783468201577775, 0.05787985902735052, 0.05792503840703418, 0.05797022015482913, 0.05798305240711783, 0.05802823774127650, 0.05807342544360951, 0.05811861551411769, 0.05813145192241898, 0.05817664557957167, 0.05822184160495948, 0.05826703999858669, 0.05832508254426987, 0.05837028689311960, 0.05841549361026858, 0.05847354863740435, 0.05851876131011876, 0.05856397635119366, 0.05860919376063013, 0.05862204386100228, 0.05866726485798401, 0.05871248822338791, 0.05875771395721431, 0.05877056821708987, 0.05881579753873788, 0.05886102922887009, 0.05890626328748503, 0.05896435935439824, 0.05900959936965776, 0.05905484175346164, 0.05911295030697938, 0.05915819864776396, 0.05920344935715342, 0.05924870243514533, 0.05926157039848862, 0.05930682706519672, 0.05935208610056621, 0.05939734750460012, 0.05945548462395713, 0.05950075198570394, 0.05954602171617164, 0.05960417132604562, 0.05964944701456178, 0.05969472507185857, 0.05974000549793628, 0.05975288717345844, 0.05979817118913585, 0.05984345757365157, 0.05988874632700583, 0.05994692451141351, 0.05999221922353990, 0.06003751630456168, 0.06008281575447809, 0.06009570698337908, 0.06014101002350428, 0.06018631543258190, 0.06023162321061099, 0.06024451860701326, 0.06028982997552563, 0.06033514371304669, 0.06038045981957519, 0.06043867908157743, 0.06048400114792628, 0.06052932558334019, 0.06057465238781879, 0.06058755734362973, 0.06063288773919247, 0.06067822050387571, 0.06072355563767735, 0.06078180348880819, 0.06082714458314244, 0.06087248804665125, 0.06091783387933345, 0.06093074839873233, 0.06097609782309937, 0.06102144961669616, 0.06106680377951983, 0.06112508022570079, 0.06117044034976461, 0.06121580284310932, 0.06126116770573555, 0.06127409179289794, 0.06131946024780666, 0.06136483107205083, 0.06141020426562958, 0.06145557982854100, 0.06146850931276554, 0.06151388846828441, 0.06155926999319102, 0.06160465388748313, 0.06166297503374868, 0.06170836489035826, 0.06175375711640583, 0.06179915171189124, 0.06181209077037881, 0.06185748895906350, 0.06190288951723900, 0.06194829244490382, 0.06200664220123505, 0.06205205109191024, 0.06209746235212493, 0.06214287598188077, 0.06220124184234075, 0.06224666143547690, 0.06229208339820290, 0.06233750773051590, 0.06235046177044729, 0.06239588969687223, 0.06244131999293844, 0.06248675265864202, 0.06254514713822621, 0.06259058576799674, 0.06263602676745656, 0.06268147013660115, 0.06273988072528656, 0.06278533005886640, 0.06283078176218133, 0.06287623583522879, 0.06288920486670651, 0.06293466253476959, 0.06298012257261666, 0.06302558498024569, 0.06307104975765474, 0.06308402419706344, 0.06312949256980471, 0.06317496331237686, 0.06322043642477635, 0.06326591190699960, 0.06327889175563469, 0.06332437083350940, 0.06336985228125844, 0.06341533609888021, 0.06347380754552679, 0.06351929732898423, 0.06356478948236156, 0.06361028400565374, 0.06366877156982942, 0.06371427205931839, 0.06375977491877018, 0.06380528014818276, 0.06386378383162493, 0.06390929502759012, 0.06395480859356039, 0.06400032452953386, 0.06405884433398010, 0.06410436623686175, 0.06414989050979124, 0.06419541715276653, 0.06425395307994587, 0.06429948569018338, 0.06434502067051144, 0.06439055802092575, 0.06444911007256321, 0.06449465339059245, 0.06454019907875239, 0.06458574713703957, 0.06464431531485916, 0.06468986934111182, 0.06473542573753567, 0.06478098450412617, 0.06483956880984644, 0.06488513354475172, 0.06493070064986847, 0.06497627012519029, 0.06503487056052680, 0.06508044600451147, 0.06512602381874471, 0.06517160400322313, 0.06523022056988667, 0.06527580672337270, 0.06532139524714642, 0.06536698614120200, 0.06542561884089850, 0.06547121570430765, 0.06551681493804038, 0.06556241654209138, 0.06560802051645571, 0.06562106537652599, 0.06566667295027320, 0.06571228289437992, 0.06575789520884188, 0.06580350989365397, 0.06581656017971403, 0.06586217846421329, 0.06590779911910762, 0.06595342214439317, 0.06599904754006419, 0.06605773224906018, 0.06610336361515191, 0.06614899735166877, 0.06619463345860598, 0.06625333430772931, 0.06629897638542452, 0.06634462083358052, 0.06639026765219015, 0.06643591684124811, 0.06644898464312567, 0.06649463743282880, 0.06654029259302505, 0.06658595012370934, 0.06663161002487437, 0.06669034676025322, 0.06673601263288948, 0.06678168087604554, 0.06682735148971565, 0.06688610437056923, 0.06693178095604225, 0.06697745991206656, 0.06702314123863689, 0.06706882493574423, 0.06708191026663918, 0.06712759756534350, 0.06717328723462873, 0.06721897927448955, 0.06726467368492002, 0.06732346246363492, 0.06736916284657122, 0.06741486560011332, 0.06746057072425351, 0.06750627821898582, 0.06751937565375009, 0.06756508675072315, 0.06761080021833024, 0.06765651605656586, 0.06770223426542237, 0.06776105894989780, 0.06780678313195319, 0.06785250968466512, 0.06789823860802762, 0.06794396990203129, 0.06800281434378035, 0.06804855161134693, 0.06809429124959103, 0.06814003325850516, 0.06818577763808227, 0.06819889385659554, 0.06824464183939218, 0.06829039219289399, 0.06833614491709100, 0.06838190001197701, 0.06844078037156903, 0.06848654144069720, 0.06853230488054827, 0.06857807069111400, 0.06862383887238787, 0.06868273899575549, 0.06872851315162743, 0.06877428967823940, 0.06882006857558387, 0.06886584984365214, 0.06887898486080360, 0.06892476973306217, 0.06897055697608449, 0.06901634658986260, 0.06906213857438804, 0.06910793292965235, 0.06912107462757135, 0.06916687258736369, 0.06921267291793454, 0.06925847561927647, 0.06930428069138089, 0.06935008813424077, 0.06936323651478416, 0.06940904756250478, 0.06945486098101867, 0.06950067677031706, 0.06954649493039180, 0.06959231546123558, 0.06960547052625794, 0.06965129466229564, 0.06969712116914013, 0.06974295004678151, 0.06978878129521372, 0.06983461491442482, 0.06984777666578034, 0.06989361389051841, 0.06993945348607488, 0.06998529545244072, 0.07003113978960728, 0.07007698649756545, 0.07009015493710578, 0.07013600525092134, 0.07018185793556592, 0.07022771299103063, 0.07027357041730655, 0.07031943021438374, 0.07037846874722251, 0.07042433452132504, 0.07047020266625620, 0.07051607318200777, 0.07056194606856979, 0.07062100438310598, 0.07066688324702981, 0.07071276448179111, 0.07075864808737979, 0.07080453406378721, 0.07085042241100546, 0.07086361216222685, 0.07090950411632915, 0.07095539844127579, 0.07100129513705760, 0.07104719420366590, 0.07109309564108859, 0.07110629208820464, 0.07115219713283791, 0.07119810454832123, 0.07124401433464575, 0.07128992649180129, 0.07133584101977801, 0.07139496230014071, 0.07144088280650564, 0.07148680568371669, 0.07153273093176065, 0.07157865855063140, 0.07162458854031701, 0.07163779962179068, 0.07168373321937436, 0.07172966918780763, 0.07177560752707880, 0.07182154823717870, 0.07186749131809609, 0.07192665579044212, 0.07197260485042893, 0.07201855628125595, 0.07206451008291326, 0.07211046625539019, 0.07215642479867680, 0.07216965052319198, 0.07221561267505708, 0.07226157719776403, 0.07230754409130133, 0.07235351335565907, 0.07239948499082636, 0.07244545899679177, 0.07245869266513512, 0.07250467028003987, 0.07255065026577424, 0.07259663262232832, 0.07264261734969160, 0.07268860444785186, 0.07273459391679699, 0.07274783553148895, 0.07279382860973131, 0.07283982405879224, 0.07288582187865821, 0.07293182206931952, 0.07297782463076407, 0.07302382956298125, 0.07303707912654087, 0.07308308766841049, 0.07312909858108306, 0.07317511186454660, 0.07322112751879121, 0.07326714554380232, 0.07331316593957094, 0.07332642345451335, 0.07337244746028776, 0.07341847383684994, 0.07346450258418633, 0.07351053370228680, 0.07355656719113770, 0.07360260305072743, 0.07361586851956585, 0.07366190798951343, 0.07370794983023044, 0.07375399404170407, 0.07380004062392345, 0.07384608957687449, 0.07389214090054575, 0.07390541432579028, 0.07395146926016959, 0.07399752656529783, 0.07404358624116348, 0.07408964828775416, 0.07413571270505726, 0.07418177949306043, 0.07424113127627452, 0.07428720404606003, 0.07433327918656128, 0.07437935669776678, 0.07442543657966215, 0.07447151883223661, 0.07451760345547381, 0.07453089404178240, 0.07457698227646143, 0.07462307288183273, 0.07466916585788336, 0.07471526120460243, 0.07476135892197516, 0.07480745900998887, 0.07486686126037884, 0.07491296733084342, 0.07495907577196313, 0.07500518658372462, 0.07505129976611459, 0.07509741531912077, 0.07514353324272937, 0.07515684100162745, 0.07520296253739804, 0.07524908644379787, 0.07529521272081174, 0.07534134136842758, 0.07538747238663326, 0.07543360577541113, 0.07547974153475091, 0.07549305850523434, 0.07553919787711525, 0.07558533961958203, 0.07563148373262168, 0.07567763021622009, 0.07572377907036429, 0.07576993029503988, 0.07581608389023348, 0.07582941007557711, 0.07587556728368495, 0.07592172686233532, 0.07596788881151522, 0.07601405313120845, 0.07606021982140311, 0.07610638888208233, 0.07615256031323309, 0.07616589571670900, 0.07621207076114736, 0.07625824817608157, 0.07630442796149829, 0.07635061011738248, 0.07639679464371901, 0.07644298154049424, 0.07648917080769300, 0.07650251543256793, 0.07654870831342259, 0.07659490356472421, 0.07664110118645945, 0.07668730117861299, 0.07673350354117021, 0.07677970827411538, 0.07682591537743475, 0.07687212485111222, 0.07688547994431147, 0.07693169303204877, 0.07697790849016823, 0.07702412631865458, 0.07707034651749224, 0.07711656908666681, 0.07716279402616145, 0.07720902133596369, 0.07726861658172179, 0.07731484987627418, 0.07736108554114042, 0.07740732357630273, 0.07745356398174900, 0.07749980675746083, 0.07754605190342313, 0.07759229941962148, 0.07760567421729068, 0.07765192534830927, 0.07769817884958472, 0.07774443472110177, 0.07779069296284453, 0.07783695357479667, 0.07788321655694187, 0.07792948190926663, 0.07797574963175295, 0.07798913490968634, 0.07803540624738598, 0.07808167995526873, 0.07812795603331763, 0.07817423448151701, 0.07822051529985106, 0.07826679848830444, 0.07831308404685831, 0.07835937197549726, 0.07841905928206250, 0.07846535319641196, 0.07851164948084998, 0.07855794813536050, 0.07860424915992795, 0.07865055255453473, 0.07869685831916589, 0.07874316645380237, 0.07878947695842875, 0.07880288445525202, 0.07884919857590276, 0.07889551506656288, 0.07894183392721510, 0.07898815515784230, 0.07903447875842837, 0.07908080472895504, 0.07912713306940679, 0.07917346377976421, 0.07921979686001367, 0.07923321609643040, 0.07927955279312039, 0.07932589185971900, 0.07937223329620915, 0.07941857710257278, 0.07946492327879339, 0.07951127182485296, 0.07955762274073473, 0.07960397602642057, 0.07965033168189406, 0.07966376266298446, 0.07971012193531100, 0.07975648357744264, 0.07980284758935943, 0.07984921397104616, 0.07989558272248408, 0.07994195384365522, 0.07998832733454186, 0.08003470319512680, 0.08008108142539230, 0.08012746202531880, 0.08014090600375370, 0.08018729022097680, 0.08023367680787730, 0.08028006576443950, 0.08032645709064240, 0.08037285078646990, 0.08041924685190390, 0.08046564528692470, 0.08051204609151520, 0.08055844926565680, 0.08060485480933200, 0.08061831179125070, 0.08066472095265590, 0.08071113248361040, 0.08075754638409280, 0.08080396265408680, 0.08085038129357360, 0.08089680230253370, 0.08094322568094900, 0.08098965142880120, 0.08103607954607030, 0.08108251003273870, 0.08109598002426900, 0.08114241412909870, 0.08118885060334110, 0.08123528944697810, 0.08128173065999000, 0.08132817424235780, 0.08137462019406290, 0.08142106851508570, 0.08146751920540780, 0.08151397226501050, 0.08156042769387170, 0.08160688549197560, 0.08162036974857350, 0.08166683116529470, 0.08171329495126900, 0.08175976110647880, 0.08180622963090420, 0.08185270052452550, 0.08189917378732370, 0.08194564941927830, 0.08199212742036890, 0.08203860779057840, 0.08208509052988650, 0.08213157563827080, 0.08217806311571440, 0.08219156289466110, 0.08223805399120240, 0.08228454745681400, 0.08233104329147630, 0.08237754149516780, 0.08242404206786910, 0.08247054500956180, 0.08251705032022440, 0.08256355799983550, 0.08261006804837780, 0.08265658046582910, 0.08270309525216850, 0.08274961240737840, 0.08276312771720380, 0.08280964849198350, 0.08285617163564230, 0.08290269714815980, 0.08294922502951560, 0.08299575527969040, 0.08304228789866150, 0.08308882288641010, 0.08313536024291430, 0.08318189996815380, 0.08322844206210810, 0.08327498652475510, 0.08332153335607620, 0.08336808255604870, 0.08338161465664020, 0.08342816747667700, 0.08347472266537540, 0.08352128022271330, 0.08356784014867120, 0.08361440244322640, 0.08366096710635830, 0.08370753413804690, 0.08375410353826920, 0.08380067530700420, 0.08384724944423130, 0.08389382594992850, 0.08394040482407480, 0.08398698606664870, 0.08403356967762860, 0.08404711983097890, 0.08409370706253630, 0.08414029666250810, 0.08418688863087170, 0.08423348296760530, 0.08428007967268820, 0.08432667874609780, 0.08437328018781280, 0.08441988399780960, 0.08446649017606910, 0.08451309872256700, 0.08455970963728310, 0.08460632292019380, 0.08465293857127780, 0.08469955659051310, 0.08474617697787740, 0.08475974644822220, 0.08480637045669430, 0.08485299683330200, 0.08489962557802270, 0.08494625669083360, 0.08499289017171290, 0.08503952602063810, 0.08508616423758560, 0.08513280482253440, 0.08517944777546090, 0.08522609309634250, 0.08527274078515700, 0.08531939084188080, 0.08536604326649290, 0.08541269805896810, 0.08545935521928670, 0.08550601474742350, 0.08555267664335540, 0.08559934090706020, 0.08561293346878040, 0.08565960135419460, 0.08570627160738630, 0.08575294422833110, 0.08579961921700770, 0.08584629657339190, 0.08589297629746030, 0.08593965838919030, 0.08598634284855800, 0.08603302967554010, 0.08607971887011360, 0.08612641043225570, 0.08617310436194010, 0.08621980065914620, 0.08626649932384980, 0.08631320035602520, 0.08635990375565080, 0.08640660952270260, 0.08645331765715640, 0.08650002815898900, 0.08654674102817610, 0.08656035920917000, 0.08660707570069930, 0.08665379455958620, 0.08670051578580530, 0.08674723937933340, 0.08679396534014640, 0.08684069366822040, 0.08688742436353000, 0.08693415742605190, 0.08698089285576180, 0.08702763065263620, 0.08707437081664850, 0.08712111334777650, 0.08716785824599490, 0.08721460551127940, 0.08726135514360510, 0.08730810714294730, 0.08735486150928200, 0.08740161824258520, 0.08744837734282970, 0.08749513880999290, 0.08754190264405080, 0.08758866884497490, 0.08763543741274360, 0.08768220834733160, 0.08769585719407450, 0.08772898164871260, 0.08774263175171510, 0.08778940867617440, 0.08783618796742750, 0.08788296962544830, 0.08792975365021290, 0.08797654004169610, 0.08802332879987190, 0.08807011992471470, 0.08811691341619970, 0.08816370927430230, 0.08821050749899580, 0.08825730809025520, 0.08830411104805510, 0.08835091637236980, 0.08839772406317340, 0.08844453412044110, 0.08849134654414640, 0.08853816133426450, 0.08858497849076880, 0.08863179801363300, 0.08867861990283310, 0.08872544415834080, 0.08877227078013320, 0.08881909976818130, 0.08886593112245990, 0.08891276484294350, 0.08895960092960540, 0.08900643938242110, 0.08905328020136270, 0.08910012338640340, 0.08914696893751860, 0.08919381685468100, 0.08924066713786350, 0.08928751978704080, 0.08930121190770480, 0.08933437480218770, 0.08934806818084550, 0.08938123218327430, 0.08939492681997610, 0.08944178782507140, 0.08948865119610470, 0.08953551693304890, 0.08958238503587710, 0.08962925550456340, 0.08967612833908000, 0.08972300353940120, 0.08976988110549860, 0.08981676103734710, 0.08986364333491810, 0.08991052799818530, 0.08995741502712200, 0.09000430442169950, 0.09005119618189220, 0.09009809030767300, 0.09014498679901350, 0.09019188565588770, 0.09023878687826730, 0.09028569046612470, 0.09033259641943350, 0.09037950473816470, 0.09042641542229260, 0.09047332847178860, 0.09052024388662530, 0.09056716166677540, 0.09061408181221020, 0.09066100432290340, 0.09070792919882620, 0.09075485643995030, 0.09080178604624930, 0.09084871801769410, 0.09089565235425760, 0.09094258905591080, 0.09098952812262690, 0.09103646955437670, 0.09108341335113300, 0.09113035951286640, 0.09117730803954940, 0.09122425893115410, 0.09127121218765120, 0.09131816780901420, 0.09136512579521300, 0.09141208614621910, 0.09145904886200440, 0.09150601394254090, 0.09155298138779900, 0.09159995119775090, 0.09164692337236770, 0.09169389791162070, 0.09174087481548030, 0.09178785408391960, 0.09183483571690750, 0.09188181971441750, 0.09192880607641900, 0.09197579480288260, 0.09202278589378050, 0.09206977934908380, 0.09211677516876200, 0.09216377335278760, 0.09221077390112940, 0.09225777681376000, 0.09230478209064910, 0.09235178973176720, 0.09239879973708600, 0.09244581210657520, 0.09249282684020570, 0.09253984393794730, 0.09258686339977140, 0.09263388522564800, 0.09268090941554690, 0.09272793596943870, 0.09277496488729450, 0.09282199616908310, 0.09286902981477570, 0.09291606582434160, 0.09296310419775240, 0.09301014493497590, 0.09305718803598390, 0.09310423350074650, 0.09315128132923260, 0.09319833152141150, 0.09324538407725370, 0.09329243899672910, 0.09333949627980800, 0.09338655592645910, 0.09343361793665230, 0.09348068231035780, 0.09352774904754350, 0.09357481814818100, 0.09362188961223790, 0.09366896343968490, 0.09371603963049010, 0.09376311818462430, 0.09381019910205600, 0.09385728238275490, 0.09390436802668930, 0.09395145603382800, 0.09399854640414170, 0.09404563913759900, 0.09409273423416800, 0.09413983169381820, 0.09418693151651780, 0.09423403370223700, 0.09428113825094380, 0.09432824516260740, 0.09437535443719610, 0.09440863654445480, 0.09442246607467860, 0.09445574928149670, 0.09446958007502340, 0.09450286438132340, 0.09454998184390030, 0.09459710166919810, 0.09464422385718410, 0.09469134840782740, 0.09473847532109690, 0.09478560459696000, 0.09483273623538580, 0.09487987023634020, 0.09492700659979550, 0.09497414532571690, 0.09502128641407210, 0.09506842986483160, 0.09511557567796120, 0.09516272385343060, 0.09520987439120660, 0.09525702729125670, 0.09530418255354960, 0.09535134017805340, 0.09539850016473490, 0.09544566251356220, 0.09549282722450340, 0.09553999429752530, 0.09558716373259610, 0.09563433552968300, 0.09568150968875310, 0.09572868620977520, 0.09577586509271540, 0.09582304633754120, 0.09587022994422000, 0.09591741591271950, 0.09596460424300660, 0.09601179493504840, 0.09604511475418220, 0.09605898798881170, 0.09609230890470780, 0.09613950541684210, 0.09618670429055200, 0.09623390552580420, 0.09628110912256580, 0.09632831508080350, 0.09637552340048440, 0.09642273408157430, 0.09646994712404150, 0.09651716252785190, 0.09656438029297170, 0.09661160041936810, 0.09665882290700730, 0.09670604775585570, 0.09675327496588030, 0.09680050453704680, 0.09684773646932190, 0.09689497076267220, 0.09694220741706330, 0.09698944643246180, 0.09703668780883390, 0.09708393154614560, 0.09713117764436360, 0.09717842610345310, 0.09722567692338030, 0.09725902450675180, 0.09730627878214150, 0.09735353541822090, 0.09740079441495330, 0.09744805577230730, 0.09749531949024590, 0.09754258556873640, 0.09758985400774390, 0.09763712480723390, 0.09768439796717230, 0.09773167348752480, 0.09777895136825560, 0.09782623160933200, 0.09787351421071780, 0.09792079917237890, 0.09796808649428120, 0.09801537617638860, 0.09806266821866760, 0.09810996262108240, 0.09815725938359850, 0.09819062811929310, 0.09820455850618030, 0.09823792833490320, 0.09828523091046260, 0.09833253584593660, 0.09837984314128940, 0.09842715279648680, 0.09847446481149270, 0.09852177918627290, 0.09856909592079020, 0.09861641501501080, 0.09866373646889980, 0.09871106028242050, 0.09875838645553780, 0.09880571498821650, 0.09885304588042050, 0.09890037913211370, 0.09894771474326200, 0.09899505271382900, 0.09902844038605340, 0.09907578180755160, 0.09912312558831420, 0.09917047172830500, 0.09921782022748960, 0.09926517108583000, 0.09931252430329190, 0.09935987987983790, 0.09940723781543330, 0.09945459811004080, 0.09950196076362460, 0.09954932577614830, 0.09959669314757490, 0.09964406287786980, 0.09969143496699590, 0.09973880941491600, 0.09977221381657600, 0.09981959171348000, 0.09986697196902220, 0.09991435458316680, 0.09996173955587640, 0.10000912688711460, 0.10005651657684530, 0.10010390862503170, 0.10015130303163520, 0.10019869979662080, 0.10024609891995060, 0.10029350040158800, 0.10034090424149680, 0.10038831043963820, 0.10043571899597610, 0.10046913901685520, 0.10051655102033080, 0.10056396538184470, 0.10061138210136000, 0.10065880117883980, 0.10070622261424550, 0.10075364640754150, 0.10080107255868940, 0.10084850106765160, 0.10089593193439000, 0.10094336515886770, 0.10099080074104730, 0.10103823868089000, 0.10107167212652390, 0.10108567897835990, 0.10111911351188460, 0.10116655725474930, 0.10121400335508160, 0.10126145181284210, 0.10130890262799460, 0.10135635580049870, 0.10140381133031880, 0.10145126921741470, 0.10149872946174920, 0.10154619206328450, 0.10159365702198170, 0.10164112433780300, 0.10167457119403140, 0.10172204195373820, 0.10176951507040870, 0.10181699054400220, 0.10186446837448320, 0.10191194856181140, 0.10195943110594860, 0.10200691600685600, 0.10205440326449500, 0.10210189287882670, 0.10214938484981340, 0.10219687917741490, 0.10223033834422980, 0.10227783611419550, 0.10232533624061510, 0.10237283872344790, 0.10242034356265640, 0.10246785075820020, 0.10251536031004170, 0.10256287221814020, 0.10261038648245720, 0.10265790310295340, 0.10270542207958960, 0.10273889245996910, 0.10275294341232700, 0.10278641487756130, 0.10283393965113100, 0.10288146678063700, 0.10292899626604010, 0.10297652810730130, 0.10302406230438060, 0.10307159885723870, 0.10311913776583460, 0.10316667903013000, 0.10321422265008480, 0.10324770423376720, 0.10329525129326170, 0.10334280070825060, 0.10339035247869400, 0.10343790660455140, 0.10348546308578260, 0.10353302192234830, 0.10358058311420770, 0.10362814666132090, 0.10367571256364730, 0.10372328082114700, 0.10375677359783590, 0.10380434529344980, 0.10385191934407090, 0.10389949574965930, 0.10394707451017320, 0.10399465562557140, 0.10404223909581500, 0.10408982492086270, 0.10413741310067350, 0.10418500363520660, 0.10421850651244100, 0.10426610048378180, 0.10431369680967730, 0.10436129549008720, 0.10440889652497110, 0.10445649991428640, 0.10450410565799220, 0.10455171375604900, 0.10459932420841410, 0.10464693701504670, 0.10468044998425960, 0.10472806622638520, 0.10477568482260970, 0.10482330577289170, 0.10487092907719010, 0.10491855473546280, 0.10496618274766930, 0.10501381311376710, 0.10506144583371420, 0.10509496780581910, 0.10514260396006540, 0.10519024246799210, 0.10523788332955780, 0.10528552654471960, 0.10533317211343640, 0.10538082003566530, 0.10542847031136470, 0.10547612294049420, 0.10550965390851080, 0.10555730997073960, 0.10560496838622510, 0.10565262915492670, 0.10570029227680190, 0.10574795775180810, 0.10579562557990410, 0.10584329576104630, 0.10589096829519250, 0.10592450825212160, 0.10597218421816080, 0.10601986253703330, 0.10606754320869420, 0.10611522623310300, 0.10616291161021580, 0.10621059933999030, 0.10625828942238330, 0.10629183728296810, 0.10633953079617360, 0.10638722666182440, 0.10643492487987820, 0.10648262545029180, 0.10653032837302230, 0.10657803364802630, 0.10662574127526180, 0.10667345125468430, 0.10670700809090610, 0.10675472149992400, 0.10680243726095480, 0.10685015537395570, 0.10689787583888420, 0.10694559865569510, 0.10699332382434560, 0.10704105134479290, 0.10707461607284310, 0.10712234702179380, 0.10717008032236590, 0.10721781597451580, 0.10726555397819870, 0.10731329433337230, 0.10736103703999120, 0.10740878209801280, 0.10744235471230430, 0.10749010319773400, 0.10753785403438920, 0.10758560722222710, 0.10763336276120310, 0.10768112065127260, 0.10772888089239200, 0.10777664348451670, 0.10781022397944800, 0.10785798999787990, 0.10790575836714050, 0.10795352908718510, 0.10800130215796920, 0.10804907757944830, 0.10809685535157800, 0.10813044264680480, 0.10817822384426990, 0.10822600739220690, 0.10827379329057250, 0.10832158153932140, 0.10836937213840850, 0.10841716508778820, 0.10846496038741700, 0.10849855555274830, 0.10854635427660220, 0.10859415535052710, 0.10864195877447600, 0.10868976454840430, 0.10873757267226730, 0.10878538314601890, 0.10881898510241020, 0.10886679899940810, 0.10891461524611570, 0.10896243384248750, 0.10901025478847790, 0.10905807808404100, 0.10910590372913140, 0.10913951247226050, 0.10918734153961330, 0.10923517295631510, 0.10928300672231700, 0.10933084283757460, 0.10937868130204180, 0.10942652211567260, 0.10946013764120610, 0.10950798187611420, 0.10955582846000440, 0.10960367739283110, 0.10965152867454810, 0.10969938230510990, 0.10974723828446850, 0.10978086058806660, 0.10982871998771200, 0.10987658173597370, 0.10992444583280530, 0.10997231227815960, 0.11002018107199020, 0.11006805221425150, 0.11010168129156300, 0.11014955585311640, 0.11019743276291790, 0.11024531202091940, 0.11029319362707500, 0.11034107758133730, 0.11038896388365950, 0.11042259973032460, 0.11047048945094330, 0.11051838151943760, 0.11056627593576190, 0.11061417269986770, 0.11066207181170840, 0.11069571335361570, 0.11074361588288920, 0.11079152075971350, 0.11083942798404110, 0.11088733755582460, 0.11093524947501720, 0.11098316374157050, 0.11101681204471490, 0.11106472972769690, 0.11111264975785590, 0.11116057213514230, 0.11120849685950940, 0.11125642393090980, 0.11129007792233150, 0.11133800840929130, 0.11138594124309830, 0.11143387642370500, 0.11148181395106230, 0.11152975382512260, 0.11157769604583810, 0.11161135679034930, 0.11165930242561430, 0.11170725040734790, 0.11175520073550160, 0.11180315341002650, 0.11185110843087530, 0.11188477485667320, 0.11193273329119780, 0.11198069407185830, 0.11202865719860600, 0.11207662267139230, 0.11212459049016930, 0.11215826259402050, 0.11220623382559610, 0.11225420740297310, 0.11230218332610460, 0.11235016159493990, 0.11239814220943060, 0.11243181998809680, 0.11247980401450650, 0.11252779038638310, 0.11257577910367760, 0.11262377016634020, 0.11267176357432190, 0.11270544702455860, 0.11275344384357840, 0.11280144300772650, 0.11284944451695590, 0.11289744837121640, 0.11294545457045850, 0.11297914368901520, 0.11302715329841000, 0.11307516525259510, 0.11312317955152240, 0.11317119619514180, 0.11321921518340370, 0.11325290996702480, 0.11330093236455120, 0.11334895710653050, 0.11339698419291020, 0.11344501362364080, 0.11349304539867410, 0.11352674584409860, 0.11357478102750680, 0.11362281855502480, 0.11367085842660280, 0.11371890064218940, 0.11375260568248370, 0.11380065130569670, 0.11384869927272560, 0.11389674958352230, 0.11394480223803410, 0.11399285723621260, 0.11402656793232200, 0.11407462633723110, 0.11412268708561250, 0.11417075017741680, 0.11421881561259220, 0.11426688339108830, 0.11430059973973480, 0.11434867092406450, 0.11439674445152160, 0.11444482032205450, 0.11449289853561190, 0.11452661947140830, 0.11457470109004440, 0.11462278505151120, 0.11467087135575650, 0.11471896000273050, 0.11476705099238100, 0.11480077757469720, 0.11484887196852450, 0.11489696870483430, 0.11494506778357380, 0.11499316920469150, 0.11502690036914550, 0.11507500519368040, 0.11512311236039920, 0.11517122186924860, 0.11521933372017800, 0.11525306946448710, 0.11530118471807260, 0.11534930231354140, 0.11539742225084150, 0.11544554452992060, 0.11549366915072730, 0.11552741053277360, 0.11557553855532810, 0.11562366891941310, 0.11567180162497700, 0.11571993667196620, 0.11575368262883300, 0.11580182107680470, 0.11584996186600520, 0.11589810499638070, 0.11594625046788080, 0.11598000099727740, 0.11602814986899280, 0.11607630108163260, 0.11612445463514540, 0.11617261052947850, 0.11620636562911030, 0.11625452492289020, 0.11630268655729150, 0.11635085053226080, 0.11639901684774610, 0.11648094622947560, 0.11652911828395270, 0.11657729267869250, 0.11662546941364270, 0.11670741377970320, 0.11675559625256660, 0.11680378106538600, 0.11685196821810930, 0.11690015771068200, 0.11693392756450250, 0.11698212045405840, 0.11703031568326300, 0.11707851325206250, 0.11712671316040470, 0.11716048757478470, 0.11720869087933270, 0.11725689652322140, 0.11730510450639680, 0.11738709380143360, 0.11743530751927090, 0.11748352357613790, 0.11753174197198190, 0.11756552444467150, 0.11761374623531370, 0.11766197036473020, 0.11771019683286640, 0.11775842563966870, 0.11779221266644650, 0.11784044486726530, 0.11788867940654740, 0.11793691628423750, 0.11798515550028130, 0.11801894707882780, 0.11806718968810630, 0.11811543463553480, 0.11816368192105860, 0.11821193154462350, 0.11824572767261750, 0.11829398068863190, 0.11834223604248330, 0.11839049373411590, 0.11843875376347580, 0.11847255443859190, 0.11852081785961480, 0.11856908361816000, 0.11861735171417190, 0.11865115588046580, 0.11869942736750430, 0.11874770119180410, 0.11879597735330960, 0.11884425585196550, 0.11887806456119400, 0.11892634645008830, 0.11897463067592670, 0.11902291723865400, 0.11907120613821470, 0.11910501938804360, 0.11915331167705190, 0.11920160630268680, 0.11924990326489260, 0.11928372000069560, 0.11933202035170650, 0.11938032303908170, 0.11942862806276570, 0.11947693542270130, 0.11951075669490300, 0.11955906744284930, 0.11960738052684130, 0.11965569594682180, 0.11968952070164320, 0.11973783950899100, 0.11978616065211890, 0.11983448413097110, 0.11988280994549030, 0.11991663923249790, 0.11996496843358830, 0.12001329997013710, 0.12006163384208830, 0.12009546660835560, 0.12014380386623090, 0.12019214345929920, 0.12024048538750430, 0.12028882965078820, 0.12032266694501930, 0.12037101459342770, 0.12041936457670570, 0.12046771689479640, 0.12050155766491780, 0.12054991336748400, 0.12059827140465290, 0.12064663177636640, 0.12069499448256870, 0.12072883977642210, 0.12077720586629610, 0.12082557429044720, 0.12087394504881790, 0.12090779381518540, 0.12095616795657740, 0.12100454443197800, 0.12105292324132930, 0.12108677547871080, 0.12113515767043150, 0.12118354219589080, 0.12123192905503100, 0.12128031824779500, 0.12131417500278140, 0.12136256757710670, 0.12141096248484210, 0.12145935972593150, 0.12149321994854510, 0.12154162057054070, 0.12159002352567610, 0.12163842881389380, 0.12167229250262790, 0.12172070117109680, 0.12176911217243410, 0.12181752550658090, 0.12189980937367250, 0.12194822842001000, 0.12199664979888550, 0.12204507351024030, 0.12207894517315630, 0.12212737226329120, 0.12217580168569080, 0.12222423344029570, 0.12225810856442520, 0.12230654369715270, 0.12235498116186990, 0.12240342095852030, 0.12243729954235150, 0.12248574271646300, 0.12253418822229110, 0.12258263605977540, 0.12261651810179730, 0.12266496931608240, 0.12271342286180850, 0.12276187873891700, 0.12279576423761540, 0.12284422349086120, 0.12289268507527240, 0.12294114899079000, 0.12297503794464850, 0.12302350523564090, 0.12307197485752220, 0.12312044681023300, 0.12320281454525620, 0.12325129220338870, 0.12329977219207370, 0.12338215141453120, 0.12343063710769460, 0.12347912513113220, 0.12352761548478500, 0.12356151583828150, 0.12361000956525340, 0.12365850562222100, 0.12370700400912390, 0.12374090781131550, 0.12378940957087000, 0.12383791366014120, 0.12392032732843150, 0.12396883711934090, 0.12401734923968720, 0.12409977438441960, 0.12414829220545380, 0.12419681235564440, 0.12427924897406100, 0.12432777482398760, 0.12437630300278890, 0.12441021954319900, 0.12445875109212900, 0.12450728496971200, 0.12455582117588940, 0.12458974115775420, 0.12463828073338650, 0.12468682263739040, 0.12473536686970460, 0.12476929029149410, 0.12481783789258900, 0.12486638782177300, 0.12491494007898460, 0.12494886693916670, 0.12499742256448350, 0.12504598051760590, 0.12509454079847200, 0.12512847109551360, 0.12517703474380810, 0.12522560071962420, 0.12527416902289870, 0.12530810275526520, 0.12535667442529110, 0.12540524842255340, 0.12548776191314430, 0.12553634160365330, 0.12558492362111330, 0.12561886318085110, 0.12566744856386570, 0.12571603627360690, 0.12576462631001180, 0.12579856930085470, 0.12584716270213410, 0.12589575842985350, 0.12594435648394970, 0.12597830290435760, 0.12602690432264740, 0.12607550806708900, 0.12612411413761990, 0.12615806398605050, 0.12620667342009200, 0.12625528517999720, 0.12628923741771920, 0.12633785254061480, 0.12638646998914840, 0.12643508976325620, 0.12646904542630870, 0.12651766856272250, 0.12656629402448540, 0.12661492181153420, 0.12664888089837050, 0.12669751204703950, 0.12674614552076660, 0.12682874382856280, 0.12687738298821940, 0.12692602447264410, 0.12695998936670100, 0.12700863421153530, 0.12705728138091000, 0.12710593087476190, 0.12713989918835400, 0.12718855204192670, 0.12723720721974940, 0.12727117791631300, 0.12731983645333100, 0.12736849731436980, 0.12741716049936540, 0.12745113461275760, 0.12749980115625890, 0.12754847002348770, 0.12759714121437980, 0.12763111874304590, 0.12767979329175320, 0.12772847016389390, 0.12776245007236060, 0.12781113030178910, 0.12785981285442150, 0.12790849773019330, 0.12794248105122110, 0.12799116928358790, 0.12803985983886380, 0.12807384553767300, 0.12812253944901390, 0.12817123568303470, 0.12821993423966890, 0.12825392334832050, 0.12830262526032510, 0.12835132949471340, 0.12843402856835340, 0.12848273847973360, 0.12853145071320030, 0.12856544560473160, 0.12861416119234200, 0.12866287910180640, 0.12874559763014950, 0.12879432121484800, 0.12884304712110460, 0.12887704779076310, 0.12892577704993260, 0.12897450863042690, 0.12900851167178990, 0.12905724660466520, 0.12910598385863080, 0.12915472343362230, 0.12918872987664710, 0.12923747280331880, 0.12928621805078240, 0.12932022686348010, 0.12936897546208950, 0.12941772638125700, 0.12946647962091560, 0.12950049183254020, 0.12954924842264290, 0.12959800733300260, 0.12963202191226430, 0.12968078417253250, 0.12972954875282300, 0.12977831565307020, 0.12981233362851820, 0.12986110387796900, 0.12990987644714010, 0.12994389678818740, 0.12999267270602690, 0.13004145094335070, 0.13007547364912720, 0.13012425523458160, 0.13017303913928500, 0.13022182536317060, 0.13025585146121800, 0.13030464103252640, 0.13035343292278100, 0.13038746138351480, 0.13043625662065360, 0.13048505417650120, 0.13056788590124400, 0.13061668912190950, 0.13066549466097930, 0.13069952887187350, 0.13074833775657840, 0.13079714895945080, 0.13083118553011270, 0.13088000007808030, 0.13092881694397640, 0.13101167608398370, 0.13106049861212440, 0.13110932345788840, 0.13114336577185510, 0.13119219396146030, 0.13124102446844960, 0.13127506913925980, 0.13132390298954780, 0.13137273915698080, 0.13140678618375810, 0.13145562569394730, 0.13150446752104210, 0.13155331166497350, 0.13158736207221820, 0.13163620955819110, 0.13168505936076060, 0.13171911212191630, 0.13176796526598220, 0.13181682072640550, 0.13185087584059500, 0.13189973464196970, 0.13194859575946000, 0.13198265322580680, 0.13203151768370260, 0.13208038445747460, 0.13216331438873000, 0.13221218681799550, 0.13226106156282480, 0.13229512475459640, 0.13234400283856720, 0.13239288323785980, 0.13242694877884660, 0.13247583251673270, 0.13252471856969910, 0.13255878645901940, 0.13260767585003170, 0.13265656755588080, 0.13269063779265490, 0.13273953283600110, 0.13278843019394200, 0.13287140347217670, 0.13292030648141630, 0.13296921180493730, 0.13300328775609080, 0.13305219641583640, 0.13310110738961870, 0.13313518568527360, 0.13318409999473020, 0.13323301661798000, 0.13326709725725300, 0.13331601721562550, 0.13336493948754690, 0.13339902246955370, 0.13344794807604620, 0.13349687599584290, 0.13353096131970020, 0.13357989257351510, 0.13362882614038920, 0.13371185070555190, 0.13376078991870490, 0.13384382246967310, 0.13389276732830600, 0.13394171449943550, 0.13397580786339360, 0.13402475836670660, 0.13407371118226860, 0.13410780688422580, 0.13415676303141720, 0.13420572149061150, 0.13423981952968060, 0.13428878131994810, 0.13433774542197170, 0.13437184579726490, 0.13442081322980570, 0.13446978297385500, 0.13450388568448380, 0.13455285875849370, 0.13460183414376470, 0.13463593918883980, 0.13468491790351500, 0.13473389892920200, 0.13476800630783440, 0.13481699066236830, 0.13486597732766490, 0.13490008703896420, 0.13494907703254960, 0.13499806933665000, 0.13503218137972600, 0.13508117701155560, 0.13513017495365060, 0.13516428932761140, 0.13521329059687720, 0.13526229417615820, 0.13529641088011190, 0.13534541778600410, 0.13539442700166130, 0.13542854603471620, 0.13547755857642420, 0.13552657342764660, 0.13556069478890960, 0.13560971296562150, 0.13565873345159780, 0.13569285714017560, 0.13574188095107950, 0.13579090707099680, 0.13582503308599490, 0.13587406253027770, 0.13592309428332260, 0.13595722262384690, 0.13600625770069380, 0.13605529508605170, 0.13608942575120670, 0.13613846645980400, 0.13618750947665920, 0.13622164246554920, 0.13627068880507960, 0.13631973745261560, 0.13635387276434500, 0.13640292473399210, 0.13645197901139190, 0.13648611664506350, 0.13653517424400940, 0.13658423415045440, 0.13661837410517050, 0.13666743733259640, 0.13671650286726760, 0.13675064514213090, 0.13679971399721660, 0.13684878515929370, 0.13688292975340510, 0.13693200423533090, 0.13698108102399330, 0.13701522793645440, 0.13706430804439750, 0.13714753968873390, 0.13719662542187150, 0.13727986500769800, 0.13732895636520800, 0.13736310921553410, 0.13741220389079980, 0.13746130087185720, 0.13749545603724460, 0.13754455633548840, 0.13759365893926710, 0.13762781641881490, 0.13767692233921070, 0.13772603056488470, 0.13776019035769030, 0.13780930189941100, 0.13785841574615390, 0.13789257785131440, 0.13794169501353200, 0.13799081448051480, 0.13802497889712750, 0.13807410167901390, 0.13815739349256870, 0.13820652189329360, 0.13824068992040710, 0.13828982163507320, 0.13833895565380630, 0.13837312598997380, 0.13842226332207490, 0.13847140295798450, 0.13850557560230080, 0.13855471855100470, 0.13860386380325860, 0.13863803875481740, 0.13868718731929140, 0.13873633818705590, 0.13877051544495080, 0.13881966962436120, 0.13890300567012690, 0.13895216546363760, 0.13898634632357870, 0.13903550942776690, 0.13908467483454270, 0.13911885799841420, 0.13916802671529050, 0.13921719773449460, 0.13925138320138770, 0.13930055753011630, 0.13934973416091090, 0.13938392192991720, 0.13943310186965760, 0.13951647418141460, 0.13956565973132860, 0.13959985109540170, 0.13964903995329140, 0.13969823111253980, 0.13973242477631280, 0.13978161924295640, 0.13983081601069680, 0.13986501197325940, 0.13991421204781520, 0.13999761268364630, 0.14004681836527300, 0.14008101791740990, 0.14013022690487730, 0.14017943819273040, 0.14021364004123890, 0.14026285463435110, 0.14031207152758610, 0.14034627567155220, 0.14039549586946540, 0.14047892480574830, 0.14052815060761520, 0.14056235833565260, 0.14061158744121880, 0.14066081884619290, 0.14069502886726560, 0.14074426357535570, 0.14082771289578210, 0.14087695320554770, 0.14091116680668860, 0.14096041041858920, 0.14100965632918050, 0.14104387222092990, 0.14109312143307150, 0.14114237294363850, 0.14117659112507910, 0.14122584593661130, 0.14126006540441970, 0.14130932351651810, 0.14135858392658890, 0.14139280568257410, 0.14144206939262460, 0.14149133540038110, 0.14152555944362530, 0.14157482875077500, 0.14160905407880430, 0.14165832668494840, 0.14170760158834300, 0.14174182920211460, 0.14179110740391530, 0.14184038790269860, 0.14187461780129380, 0.14192390159789520, 0.14195813277968950, 0.14200741987371010, 0.14205670926425550, 0.14209094272935430, 0.14214023541672900, 0.14218953040036100, 0.14222376614784270, 0.14227306442771370, 0.14230730145680800, 0.14235660303251750, 0.14240590690402580, 0.14244014621398150, 0.14248945338073750, 0.14257300443291840, 0.14262231718985930, 0.14265656005977770, 0.14270587611097330, 0.14275519445723800, 0.14278943960557180, 0.14283876124549910, 0.14287300767286470, 0.14292233260605130, 0.14297165983384670, 0.14300590853810270, 0.14305523905856440, 0.14313882285358650, 0.14318815896045850, 0.14322241121811930, 0.14327175061666050, 0.14332109230907700, 0.14335534684117660, 0.14340469182466700, 0.14343894763321250, 0.14348829590737360, 0.14353764647494690, 0.14357190455640160, 0.14362125841404940, 0.14370487491827500, 0.14375423435854100, 0.14378849598682670, 0.14383785871616630, 0.14388722373818130, 0.14392148763691840, 0.14397085594740910, 0.14400512112000020, 0.14405449271856170, 0.14410386660933250, 0.14413813405084200, 0.14418751122908560, 0.14422177994345260, 0.14427116040876280, 0.14432054316581560, 0.14435481414756660, 0.14440420019108680, 0.14443847244469930, 0.14448786177428090, 0.14453725339513760, 0.14457152791459790, 0.14462092282091520, 0.14470459680261030, 0.14475399728478740, 0.14478827533942230, 0.14483767910605270, 0.14492136548122850, 0.14497077482224020, 0.14500505640951350, 0.14505446903396870, 0.14513816779759790, 0.14518758599495350, 0.14522187111232460, 0.14527129259211360, 0.14535500373916120, 0.14540443079036740, 0.14543871943529540, 0.14548814976792140, 0.14557187329334920, 0.14562130919590620, 0.14565560136584720, 0.14570504054881050, 0.14578877644757220, 0.14583822119897860, 0.14587251689138640, 0.14592196492218310, 0.14600571318922530, 0.14605516678697490, 0.14608946599930070, 0.14613892287542280, 0.14622268350568780, 0.14627214594726970, 0.14630644867696240, 0.14635591439589930, 0.14639021838844180, 0.14643968738432080, 0.14648915866722200, 0.14652346491172800, 0.14657293947096320, 0.14660724697731450, 0.14665672481247080, 0.14670620493417230, 0.14674051469093690, 0.14678999808795000, 0.14682430910555380, 0.14687379577746610, 0.14695759800191140, 0.14700709023417950, 0.14704140476047620, 0.14709090026661970, 0.14717471483195720, 0.14722421589695260, 0.14725853392938190, 0.14730803826722720, 0.14734235755808310, 0.14739186516836440, 0.14744137506355560, 0.14747569659955400, 0.14752520976656790, 0.14755953255998310, 0.14760904899840620, 0.14769289275825830, 0.14774241475190400, 0.14777674104531300, 0.14782626630933820, 0.14786059385875760, 0.14791012239274660, 0.14795965321048220, 0.14799398300131570, 0.14804351708840090, 0.14807784813423340, 0.14812738549025160, 0.14821125841521970, 0.14826080132281730, 0.14829513586249120, 0.14834468203798950, 0.14837901783125190, 0.14842856727423400, 0.14847811899979430, 0.14851245703073530, 0.14856201202316230, 0.14859635130667820, 0.14864590956555390, 0.14872981162615360, 0.14877937543295210, 0.14881371820414490, 0.14886328527635710, 0.14889762929871080, 0.14894719963591720, 0.14903111851081760, 0.14908069439380360, 0.14911504190023920, 0.14916462104718110, 0.14919896980336520, 0.14924855221384390, 0.14933248789297300, 0.14938207584708350, 0.14941642808374890, 0.14946601930035610, 0.14950037278535310, 0.14954996726403730, 0.14959956402274550, 0.14963391973730640, 0.14968351975746930, 0.14971787671934420, 0.14976748000054120, 0.14980183820932950, 0.14985144475114050, 0.14990105357228240, 0.14993541400844560, 0.14998502608957760, 0.15001938777163580, 0.15006900311233690, 0.15010336603988880, 0.15015298463973720, 0.15023697067095700, 0.15028659480796480, 0.15032096120517380, 0.15037058860028230, 0.15040495624156400, 0.15045458689435130, 0.15053858968934810, 0.15058822587712760, 0.15062259698444930, 0.15067223642885860, 0.15070660877883000, 0.15075625147944600, 0.15084027102806580, 0.15088991926150210, 0.15092429507389260, 0.15097394656248450, 0.15100832361610040, 0.15105797835942490, 0.15109235665386520, 0.15114201465149680, 0.15122605543787390, 0.15127571896552060, 0.15131010071772960, 0.15135976749863080, 0.15139415049023670, 0.15144382052396740, 0.15152787804070360, 0.15157755360226630, 0.15161194004801000, 0.15166161886134730, 0.15169600654506000, 0.15174568860974480, 0.15178007753102430, 0.15182976284663130, 0.15191384157117670, 0.15196353241179680, 0.15199792478255170, 0.15204761887303570, 0.15208201247992620, 0.15213170981984780, 0.15216610466247060, 0.15221580525140200, 0.15229990516686800, 0.15234961127798650, 0.15238400956541550, 0.15243371892448240, 0.15246811844621130, 0.15251783105279940, 0.15255223180842490, 0.15260194766210680, 0.15268606875157120, 0.15273579012460580, 0.15277019432036010, 0.15281991893942360, 0.15285432436763970, 0.15290405223230500, 0.15293845889257820, 0.15298819000241470, 0.15307233224891980, 0.15312206887526690, 0.15315647897098620, 0.15320621884143880, 0.15324063016777820, 0.15329037328190660, 0.15332478583846130, 0.15337453219583520, 0.15340894598220080, 0.15345869558239000, 0.15354286344073410, 0.15359261855394510, 0.15362703577003240, 0.15367679412498900, 0.15371121256944730, 0.15376097416571910, 0.15379539383814230, 0.15384515867529760, 0.15387957957528080, 0.15392934765288750, 0.15401354109765180, 0.15406331468478030, 0.15409773900875050, 0.15414751583525810, 0.15418194138534620, 0.15423172145080140, 0.15426614822660070, 0.15431593153056960, 0.15435035953167300, 0.15440014607372440, 0.15448436507942520, 0.15453415712748630, 0.15456858854683310, 0.15461838383189940, 0.15465281647510620, 0.15470261499674490, 0.15473704886340470, 0.15478685062118190, 0.15482128571088790, 0.15487109070436880, 0.15490552701671310, 0.15495533524546410, 0.15503958424362610, 0.15508939797421970, 0.15512383769801180, 0.15517365466279560, 0.15520809560777950, 0.15525791580631830, 0.15529235797208520, 0.15534218140394360, 0.15537662479008600, 0.15542645145482880, 0.15546089606093740, 0.15551072595812930, 0.15559500491300200, 0.15567928831860070, 0.15572912694481600, 0.15576357617408100, 0.15581341803122510, 0.15584786847859820, 0.15589771356623370, 0.15593216523130540, 0.15598201354899680, 0.15601646643135790, 0.15606631797866670, 0.15610077207790870, 0.15615062685439840, 0.15623494017534410, 0.15631925794065660, 0.15636912143804660, 0.15640358014948870, 0.15645344687453250, 0.15648790680099140, 0.15653777675325200, 0.15657223789431800, 0.15662211107335570, 0.15665657342861930, 0.15670644983399560, 0.15674091340304610, 0.15679079303432150, 0.15682525781674900, 0.15687514067348500, 0.15695949275063530, 0.15704384926492290, 0.15712821021549690, 0.15717810500781050, 0.15721257560150630, 0.15726247361730640, 0.15729694542210010, 0.15734684666094680, 0.15738131967642680, 0.15743122413787890, 0.15746569836363420, 0.15751560604725130, 0.15755008148287080, 0.15759999238821100, 0.15763446903328300, 0.15768438315990530, 0.15771886101401860, 0.15776877836148100, 0.15780325742422330, 0.15785317799208530, 0.15793758205086360, 0.15802199053696120, 0.15810640344952510, 0.15815633593530290, 0.15819082078769940, 0.15824075649189020, 0.15827524255062940, 0.15832518147279040, 0.15835966873745910, 0.15840961087714680, 0.15844409934733190, 0.15849404470410410, 0.15852853437939330, 0.15857848295280480, 0.15861297383278520, 0.15866292562239360, 0.15869741770665160, 0.15874737271201180, 0.15878186600013570, 0.15883182422080280, 0.15886631871237790, 0.15891628014790900, 0.15895077584252250, 0.15900074049247110, 0.15903523738970950, 0.15908520525363130, 0.15911970335308140, 0.15916967443053160, 0.15925414802231120, 0.15933862602811140, 0.15942310844707240, 0.15950759527833370, 0.15959208652103540, 0.15964207591502090, 0.15967658217431580, 0.15972657477893470, 0.15976108223731370, 0.15981107805211870, 0.15984558670916780, 0.15989558573371260, 0.15993009558901670, 0.15998009782285280, 0.16001460887599670, 0.16006461431867760, 0.16009912656924670, 0.16014913522032390, 0.16018364866790250, 0.16023366052692870, 0.16026817517110190, 0.16031819023762830, 0.16035270607798070, 0.16040272435155890, 0.16043724138767490, 0.16048726286785620, 0.16052178109932000, 0.16057180578565550, 0.16060632521205150, 0.16065635310409290, 0.16069087372500510, 0.16074090482230210, 0.16077542663731500, 0.16082546093941750, 0.16085998394811470, 0.16091002145457390, 0.16094454565653910, 0.16099458636690480, 0.16102911176172170, 0.16107915567554390, 0.16111368226279580, 0.16116372937962360, 0.16119825715889400, 0.16124830747827700, 0.16128283644914960, 0.16133288997063660, 0.16136742013269400, 0.16141747685583390, 0.16145200820865950, 0.16150206813300120, 0.16153660067617720, 0.16158666380126930, 0.16162119753437930, 0.16167126385977070, 0.16170579878239670, 0.16175586830763340, 0.16179040441935870, 0.16184047714399050, 0.16187501444439680, 0.16192509036797060, 0.16195962885664050, 0.16200970797870320, 0.16204424765521900, 0.16209432997531770, 0.16212887083926170, 0.16217895635694380, 0.16221349840789770, 0.16226358712270940, 0.16229813036025500, 0.16234822227174330, 0.16238276669546240, 0.16243286180317320, 0.16246740741264680, 0.16251750571612640, 0.16255205251093700, 0.16260215400973050, 0.16263670198945860, 0.16272135584733970, 0.16280601408370620, 0.16289067669768400, 0.16297534368839910, 0.16306001505497710, 0.16314469079654320, 0.16317924611334660, 0.16322937091222180, 0.16326392741082050, 0.16331405540113770, 0.16334861308111240, 0.16339874426241430, 0.16343330312334540, 0.16348343749517600, 0.16351799753664360, 0.16356813509854580, 0.16360269632012960, 0.16365283707164690, 0.16368739947292690, 0.16373754341360160, 0.16377210699415760, 0.16382225412353290, 0.16385681888294480, 0.16390696920056300, 0.16394153513840980, 0.16399168864381280, 0.16402625575967370, 0.16407641245240360, 0.16411098074585850, 0.16419571009608480, 0.16428044380947350, 0.16436518188514400, 0.16444992432221670, 0.16448449755529810, 0.16453467111981110, 0.16456924552819170, 0.16461942227704620, 0.16465399786030510, 0.16470417779304120, 0.16473875455075620, 0.16478893766691380, 0.16482351559866340, 0.16487370189778290, 0.16490828100314510, 0.16495847048476620, 0.16499305076331930, 0.16504324342698060, 0.16507782487830190, 0.16512802072354390, 0.16516260334721180, 0.16524738616916460, 0.16533217334327690, 0.16536675854186300, 0.16541696486866440, 0.16545155123814040, 0.16550176074444320, 0.16553634828438630, 0.16558656096972790, 0.16562114967971520, 0.16567136554363410, 0.16570595542324260, 0.16575617446527630, 0.16579076551408290, 0.16584098773376850, 0.16587557995134980, 0.16596039873415780, 0.16604522186162020, 0.16613004933284950, 0.16616464528392450, 0.16621488114695920, 0.16624947826492540, 0.16629971730306130, 0.16633431558749490, 0.16638455780026850, 0.16641915725074540, 0.16646940263769200, 0.16650400325378840, 0.16655425181444360, 0.16658885359573470, 0.16667370827569640, 0.16675856729278230, 0.16679317163149200, 0.16684343064610460, 0.16687803614854600, 0.16692829833477200, 0.16696290500052060, 0.16701317035789490, 0.16704777818652570, 0.16709804671458210, 0.16713265570567010, 0.16718292740394250, 0.16721753755706300, 0.16730242373981200, 0.16733703528162120, 0.16738731425302610, 0.16742192695582700, 0.16747220909581280, 0.16750682295917930, 0.16755710826727960, 0.16759172329078670, 0.16764201176653340, 0.16767662794975520, 0.16772691959268090, 0.16776153693519130, 0.16784645024620250, 0.16788106897343600, 0.16793136788189340, 0.16796598776737380, 0.16801628984137030, 0.16805091088467090, 0.16810121612373840, 0.16813583832443240, 0.16818614672810280, 0.16822077008576440, 0.16830570616776960, 0.16839064656955380, 0.16842527246450780, 0.16847559129021950, 0.16851021834066970, 0.16856054032887070, 0.16859516853439060, 0.16864549368461060, 0.16868012304477260, 0.16876508187091930, 0.16885004501193140, 0.16888467690370050, 0.16893501246691270, 0.16896964551185070, 0.16901998423496370, 0.16905461843264400, 0.16910496031518640, 0.16913959566518020, 0.16922457720856090, 0.16930956306188700, 0.16934420093779390, 0.16939455322425710, 0.16942919225100340, 0.16947954769477270, 0.16951418787192950, 0.16956454647253230, 0.16959918779967200, 0.16968419203332840, 0.16971883473174600, 0.16976920057199880, 0.16980384441935000, 0.16985421341478140, 0.16988885841063750, 0.16993923056077360, 0.16997387670470640, 0.17005889930065360, 0.17009354681311130, 0.17014392619757590, 0.17017857485706100, 0.17022895739457140, 0.17026360720065380, 0.17031399289073550, 0.17034864384298580, 0.17043368478315400, 0.17046833710117460, 0.17051873002025310, 0.17055338348339080, 0.17060377955337890, 0.17063843416120400, 0.17068883338162660, 0.17072348913370940, 0.17080854840000070, 0.17084320551509570, 0.17089361195917250, 0.17092827021747340, 0.17097867981031980, 0.17101333921139520, 0.17106375195253390, 0.17109841249595450, 0.17118349007024450, 0.17121815197391610, 0.17126857193335820, 0.17130323497832150, 0.17135365808438750, 0.17138832227021140, 0.17147341384867810, 0.17155850971281360, 0.17159317639655440, 0.17164360986170880, 0.17167827768482500, 0.17172871429445470, 0.17176338325651480, 0.17184849311071440, 0.17188316342811840, 0.17193360724651430, 0.17196827870180710, 0.17201872566300380, 0.17205339825575350, 0.17213852208904730, 0.17217319603499560, 0.17222365020077760, 0.17225832528312660, 0.17230878259003240, 0.17234345880835010, 0.17239391925590080, 0.17242859660975500, 0.17251373868642860, 0.17254841739070960, 0.17259888503745840, 0.17263356487621830, 0.17268403566193160, 0.17271871663473840, 0.17280387266535580, 0.17283855498644050, 0.17288903296715700, 0.17292371642122980, 0.17297419753922820, 0.17300888212585560, 0.17309405209940420, 0.17312873803215910, 0.17317922634096090, 0.17321391340521140, 0.17326440484960980, 0.17329909304492300, 0.17338427695037780, 0.17341896648966530, 0.17346946512066080, 0.17350415578995050, 0.17355465755485480, 0.17358934935371280, 0.17367454718003620, 0.17370924032071460, 0.17375974926800370, 0.17379444353718940, 0.17387965101395590, 0.17391434662343300, 0.17396486275009710, 0.17399955948702010, 0.17405007874469470, 0.17408477660862880, 0.17416999798734010, 0.17420469718940880, 0.17425522362223590, 0.17428992395025290, 0.17434045351239710, 0.17437515496592730, 0.17446039023551170, 0.17449509302501740, 0.17454562975808570, 0.17458033367204160, 0.17463087353272930, 0.17466557857069980, 0.17475082772007230, 0.17478553409185750, 0.17483608111923640, 0.17487078861397190, 0.17495604738452080, 0.17499075621153760, 0.17504131040258260, 0.17507602035148490, 0.17512657766723530, 0.17516128873758650, 0.17524656136892040, 0.17528127376938950, 0.17533183824456190, 0.17536655176541450, 0.17545183400438810, 0.17548654885382360, 0.17553712048538600, 0.17557183645413830, 0.17562241120748480, 0.17565712829511660, 0.17569184559091510, 0.17574242437583330, 0.17577714278988200, 0.17582772469536470, 0.17586244422722520, 0.17594774990201980, 0.17598247075875890, 0.17603305981333970, 0.17606778178682330, 0.17615309705004940, 0.17618782034687390, 0.17623841654751030, 0.17627314096001010, 0.17632374027827960, 0.17635846580601700, 0.17639319154031900, 0.17644379488396760, 0.17647852173287500, 0.17652912819293270, 0.17656385615600880, 0.17664919480879090, 0.17668392409149710, 0.17673453769029400, 0.17676926808609740, 0.17685461630805110, 0.17688934802194380, 0.17693996875642890, 0.17697470158234770, 0.17706005936780760, 0.17709479351027390, 0.17714542137739260, 0.17718015663081400, 0.17726552397411070, 0.17730026054253580, 0.17735089553923130, 0.17738563321753980, 0.17743627132524550, 0.17747101011299780, 0.17750574910476790, 0.17755639122797920, 0.17759113132855870, 0.17764177656155040, 0.17767651777050060, 0.17771125918299710, 0.17776190842966160, 0.17779665094989440, 0.17784730330510800, 0.17788204693263720, 0.17791679076324130, 0.17796744713029270, 0.17800219206755950, 0.17805285154192790, 0.17808759758541630, 0.17812234383150850, 0.17817300731587820, 0.17820775466755750, 0.17825842125801020, 0.17829316971483690, 0.17832791837379450, 0.17837858897241120, 0.17841333873588120, 0.17846401243934530, 0.17849876330688680, 0.17853351437608730, 0.17858419208587600, 0.17861894425851270, 0.17866962507191290, 0.17870437834754520, 0.17873913182436360, 0.17878981664224690, 0.17882457122142520, 0.17891001482277900, 0.17894477070459040, 0.17899546262748790, 0.17903021961058090, 0.17911567271854720, 0.17915043100272300, 0.17920113002755140, 0.17923588941193160, 0.17932135202079700, 0.17935611270470890, 0.17940681882838210, 0.17944158061141900, 0.17952705271546680, 0.17956181579648310, 0.17961252901591270, 0.17964729319497520, 0.17973277478848270, 0.17976754026397260, 0.17981826057606550, 0.17985302714852170, 0.17988779391952320, 0.17993851822576280, 0.17997328609309240, 0.18005878245797030, 0.18009355161925720, 0.18014428301321460, 0.18017905326974900, 0.18026455910922190, 0.18029933065815850, 0.18035006913673350, 0.18038484177983650, 0.18047035708816740, 0.18050513102211750, 0.18055587658220820, 0.18059065160924180, 0.18062542683312110, 0.18067617638068840, 0.18071095269701280, 0.18079648274383860, 0.18083126034853520, 0.18088201697265550, 0.18091679566871350, 0.18100233516949350, 0.18103711515236600, 0.18108787884992970, 0.18112265992308000, 0.18115744119184890, 0.18120820887205980, 0.18124299123046650, 0.18132854544596020, 0.18136332908870440, 0.18141410383738350, 0.18144888856868010, 0.18148367349484190, 0.18153445222319380, 0.18156923823726770, 0.18165480715283920, 0.18168959444877090, 0.18174038024060940, 0.18177516862336690, 0.18186074696876850, 0.18189553663182200, 0.18194632948402570, 0.18198112023281980, 0.18201591117524930, 0.18206670800227920, 0.18210150002980710, 0.18218709305143190, 0.18222188635677340, 0.18227269023917470, 0.18230748462852700, 0.18234227921076050, 0.18239308706500200, 0.18242788273060410, 0.18251349041377240, 0.18254828735470310, 0.18259910225931550, 0.18263390028252640, 0.18266869849786320, 0.18271951737132580, 0.18275431666830010, 0.18283993899831570, 0.18287473956813140, 0.18292556548695710, 0.18296036713732110, 0.18299516897905480, 0.18304599886373740, 0.18308080178537670, 0.18316643874752470, 0.18320124293951600, 0.18328688513535200, 0.18332169059677190, 0.18337253148466140, 0.18340733802425140, 0.18349298960380210, 0.18352779741125370, 0.18361345421899940, 0.18364826329338800, 0.18369911517645900, 0.18373392532728250, 0.18376873566768350, 0.18381959150948800, 0.18385440292567900, 0.18394007433058120, 0.18397488701121550, 0.18406056363676570, 0.18409537758091760, 0.18414624440686170, 0.18418105942506590, 0.18421587463181000, 0.18426674541235370, 0.18430156169250570, 0.18438725289493480, 0.18442207043610740, 0.18447294823813960, 0.18450776685162550, 0.18454258565289300, 0.18459346740651220, 0.18462828727944750, 0.18471399304396230, 0.18474881417541990, 0.18483452514750920, 0.18486934753656210, 0.18492024025519000, 0.18495506371416890, 0.18498988735989090, 0.18504078402596000, 0.18507560874096080, 0.18511043364242320, 0.18516133425480400, 0.18519616022489890, 0.18528189093873720, 0.18531671816299810, 0.18540245407477330, 0.18543728255227310, 0.18548819411553790, 0.18552302365992570, 0.18555785338973570, 0.18560876889515620, 0.18564359969120610, 0.18572935011884170, 0.18576418216562490, 0.18584993778360380, 0.18588477108019140, 0.18597053188645200, 0.18600536643191440, 0.18605629681508600, 0.18609113242439390, 0.18612596821780190, 0.18617690253783120, 0.18621173939443650, 0.18624657643486020, 0.18629751469061300, 0.18633235279358500, 0.18641813327043540, 0.18645297261884330, 0.18653875827430270, 0.18657359886721600, 0.18662454804550440, 0.18665938969921680, 0.18669423153570460, 0.18674518464554250, 0.18678002754217990, 0.18681487062131180, 0.18686582766156100, 0.18690067180019220, 0.18693551612103620, 0.18698647709055970, 0.18702132247025300, 0.18710713292953770, 0.18714197954936190, 0.18722779517549230, 0.18726264303451440, 0.18734846382542000, 0.18738331292270800, 0.18743428872258240, 0.18746913887631640, 0.18750398921093760, 0.18755496893475940, 0.18758982032517580, 0.18762467189619740, 0.18767565554282630, 0.18771050816899140, 0.18774536097547990, 0.18779634854377450, 0.18783120240475590, 0.18786605644577770, 0.18791704793459680, 0.18795190302946020, 0.18803775371228260, 0.18807261004009420, 0.18815846587382220, 0.18819332343364760, 0.18827918441620260, 0.18831404320710770, 0.18839990933641190, 0.18843476935746190, 0.18852064063143590, 0.18855550188169670, 0.18860651599787350, 0.18864137829826000, 0.18867624077679530, 0.18872725880585960, 0.18876212233386870, 0.18879698603974300, 0.18884800798054830, 0.18888287273524360, 0.18891773766752230, 0.18896876351892160, 0.18900362949936720, 0.18903849565711350, 0.18908952541796140, 0.18912439262322120, 0.18915926000549910, 0.18921029367464680, 0.18924516210378470, 0.18928003070965720, 0.18933106828595730, 0.18936593793803600, 0.18940080776656660, 0.18945184924887090, 0.18948672012295340, 0.18952159117320540, 0.18957263656036390, 0.18960750865551320, 0.18964238092654900, 0.18969343021741250, 0.18972830353269110, 0.18976317702357340, 0.18981423021699090, 0.18984910475146150, 0.18988397946125260, 0.18993503655607390, 0.18996991230879820, 0.19000478823655940, 0.19005584923163360, 0.19009072620167350, 0.19017666824064110, 0.19021154642705790, 0.19024642478794510, 0.19029749358006750, 0.19033237298192240, 0.19036725255796420, 0.19041832524688230, 0.19045320586323630, 0.19048808665349400, 0.19053916323805390, 0.19057404506796750, 0.19060892707150150, 0.19066000755054880, 0.19069489059308320, 0.19072977380895320, 0.19078085818133500, 0.19081574243554920, 0.19085062686281630, 0.19090171512737570, 0.19093660059233040, 0.19097148623005510, 0.19102257838563640, 0.19105746506039130, 0.19109235190763200, 0.19114344795308010, 0.19117833583669430, 0.19121322389251070, 0.19126432382666880, 0.19129921291820130, 0.19133410218165260, 0.19138520600336330, 0.19142009630187370, 0.19145498677201840, 0.19150609448012360, 0.19154098598467020, 0.19157587766056710, 0.19162698925390860, 0.19166188196354980, 0.19169677484425730, 0.19178278423547070, 0.19181767832004650, 0.19190369279738850, 0.19193858808489080, 0.19202460764625940, 0.19205950413574580, 0.19214552877903700, 0.19218042646956510, 0.19226645619267610, 0.19230135508330180, 0.19238738988412800, 0.19242228997390900, 0.19245719023296720, 0.19250832985034450, 0.19254323113833720, 0.19257813259532200, 0.19262927608827550, 0.19266417857353570, 0.19269908122750440, 0.19275022859487010, 0.19278513227645400, 0.19282003612646190, 0.19290609224404060, 0.19294099728914310, 0.19302705847324140, 0.19306196471249470, 0.19314803096100230, 0.19318293839346120, 0.19326900970426840, 0.19330391832898780, 0.19333882712090820, 0.19338999469998330, 0.19342490451601810, 0.19345981449896870, 0.19351098594508970, 0.19354589695149420, 0.19358080812452950, 0.19363198343652930, 0.19366689563235700, 0.19370180799453110, 0.19378790055554730, 0.19382281410591400, 0.19390891171800460, 0.19394382645561790, 0.19402992911666680, 0.19406484504057950, 0.19409976112989870, 0.19415095274847120, 0.19418586985773580, 0.19422078713212330, 0.19427198261035330, 0.19430690090402360, 0.19434181936253110, 0.19442793817637720, 0.19446285781805680, 0.19454898167173010, 0.19458390249563510, 0.19461882348372100, 0.19467003138701540, 0.19470495339219690, 0.19473987556127440, 0.19479108731916490, 0.19482601050467520, 0.19486093385379570, 0.19494707382999880, 0.19498199835821390, 0.19506814336509800, 0.19510306907145870, 0.19513799494077490, 0.19518921910690090, 0.19522414599045810, 0.19525907303668560, 0.19531030105233500, 0.19534522911213940, 0.19538015733432800, 0.19546631843342800, 0.19550124783062810, 0.19558741395124880, 0.19562234452251110, 0.19565727525550150, 0.19570851566252630, 0.19574344740689990, 0.19577837931271590, 0.19586455648071770, 0.19589948955840900, 0.19598567174088600, 0.19602060598950140, 0.19605554039890280, 0.19610679318432450, 0.19614172860291390, 0.19617666418200250, 0.19622792080795330, 0.19626285739556480, 0.19629779414338960, 0.19638399236437310, 0.19641893027998270, 0.19645386835543500, 0.19650513350625560, 0.19654007258869780, 0.19657501183069660, 0.19662628081812880, 0.19666122106645160, 0.19669616147404460, 0.19678237571015800, 0.19681731728239320, 0.19685225901352790, 0.19690353651673170, 0.19693847925265620, 0.19697342214719340, 0.19705964738174510, 0.19709459143873240, 0.19718082166657280, 0.19721576688505630, 0.19725071226149520, 0.19730200210404850, 0.19733694848307560, 0.19737189501977110, 0.19745813622969870, 0.19749308392569730, 0.19757933012183430, 0.19761427897618140, 0.19764922798753950, 0.19773548016813080, 0.19777043033659580, 0.19785668749845050, 0.19789163882306950, 0.19792659030404010, 0.19797790096404550, 0.19801285344386270, 0.19804780607974500, 0.19813407419588050, 0.19816902798571850, 0.19820398193125110, 0.19825530107602430, 0.19829025601886340, 0.19832521111710950, 0.19841149017608010, 0.19844644642608470, 0.19853273045426960, 0.19856768785507540, 0.19860264541062890, 0.19868893540098170, 0.19872389410609360, 0.19881018906070010, 0.19884514891441480, 0.19888010892221780, 0.19896640983248830, 0.19900137098764890, 0.19908767685721080, 0.19912263915877210, 0.19915760161376260, 0.19924391343247970, 0.19927887703262590, 0.19936519380566670, 0.19940015855001120, 0.19943512344712520, 0.19952144616280880, 0.19955641220287500, 0.19964273986791000, 0.19967770704997090, 0.19971267438414100, 0.19979900798530140, 0.19983397646021990, 0.19986894508687530, 0.19992031500575540, 0.19995528462046320, 0.19999025438661990, 0.20007659886175860, 0.20011156976645820, 0.20014654082223400, 0.20019791918099230, 0.20023289122327530, 0.20026786341634600, 0.20035421875395590, 0.20038919208336260, 0.20042416556318500, 0.20047555235538410, 0.20051052682016690, 0.20054550143507690, 0.20063186762364210, 0.20066684337267960, 0.20070181927147120, 0.20078819137287380, 0.20082316840454480, 0.20085814558559720, 0.20090954543253990, 0.20094452359612890, 0.20097950190881100, 0.20106588484310410, 0.20110086428645460, 0.20113584387852600, 0.20122223271540570, 0.20125721343689630, 0.20134360719254060, 0.20137858904248820, 0.20141357104049450, 0.20149997069217860, 0.20153495381739210, 0.20156993709029030, 0.20162135838284110, 0.20165634263429960, 0.20169132703315410, 0.20177773748809100, 0.20181272301193950, 0.20184770868281060, 0.20193412502351700, 0.20196911181813110, 0.20200409875939440, 0.20209052098215250, 0.20212550904590630, 0.20221193617174440, 0.20224692535702570, 0.20228191468829350, 0.20236834768962090, 0.20240333814116340, 0.20243832873831850, 0.20252476761141230, 0.20255975932758960, 0.20259475118900620, 0.20264620309590700, 0.20268119593014230, 0.20271618890932710, 0.20280263854284040, 0.20283763263882980, 0.20287262687939480, 0.20295908237437760, 0.20299407773049310, 0.20302907323081040, 0.20311553458353410, 0.20315053119814760, 0.20318552795658800, 0.20323699743537840, 0.20327199516332280, 0.20330699303480510, 0.20339346512319700, 0.20342846410675520, 0.20346346323347640, 0.20354994116929710, 0.20358494140683900, 0.20361994178717030, 0.20370642556668510, 0.20374142705658140, 0.20377642868889240, 0.20386291830836550, 0.20389792104898510, 0.20393292393164520, 0.20398441553937820, 0.20401941938734010, 0.20405442337705240, 0.20414092370081090, 0.20417592879660840, 0.20421093403378170, 0.20429744018716640, 0.20433244652916770, 0.20436745301217000, 0.20445396499143920, 0.20448897257801220, 0.20452398030521090, 0.20461049810662230, 0.20464550693613410, 0.20468051590589680, 0.20476703952570690, 0.20480204959652420, 0.20483705980721710, 0.20492358924167980, 0.20495860055216880, 0.20499361200215840, 0.20508014724752720, 0.20511515979605410, 0.20515017248370700, 0.20520169989013720, 0.20523671353623230, 0.20527172732116270, 0.20530674124484310, 0.20535827321953750, 0.20539328810077620, 0.20542830312047470, 0.20546331827854840, 0.20551485481939000, 0.20554987093413710, 0.20558488718696870, 0.20567144468267200, 0.20570646202929200, 0.20574147951362070, 0.20582804280235780, 0.20586306137921380, 0.20589808009340280, 0.20598464917141800, 0.20601966897687360, 0.20605468891928700, 0.20614126378282400, 0.20617628481524220, 0.20621130598424180, 0.20629788662954170, 0.20633290888728460, 0.20636793128123370, 0.20645451770453640, 0.20648954118596640, 0.20652456480322610, 0.20661115700077040, 0.20664618170424860, 0.20668120654318090, 0.20671623151748240, 0.20676780451120390, 0.20680283043509180, 0.20683785649405760, 0.20687288268801640, 0.20692446022879470, 0.20695948737145250, 0.20699451464881250, 0.20702954206078880, 0.20708112414649840, 0.20711615250628640, 0.20715118100040100, 0.20718620962875520, 0.20727282583254620, 0.20730785554177380, 0.20734288538486520, 0.20742950734318150, 0.20746453826588220, 0.20749956932207110, 0.20758619703114070, 0.20762122916567320, 0.20765626143331690, 0.20774289488936910, 0.20777792823409190, 0.20781296171154920, 0.20789960091081020, 0.20793463546408120, 0.20796967014970990, 0.20805631508840490, 0.20809135084858170, 0.20812638674073960, 0.20821303741509170, 0.20824807438053090, 0.20828311147757450, 0.20831814870613740, 0.20840480605286520, 0.20843984435315190, 0.20847488278457990, 0.20856154585851860, 0.20859658536040300, 0.20863162499305300, 0.20871829379042100, 0.20875333449225990, 0.20878837532448670, 0.20887504984150230, 0.20891009174165050, 0.20894513377180970, 0.20898017593189380, 0.20903181400468830, 0.20906685710150030, 0.20910190032794660, 0.20913694368394100, 0.20922363056473410, 0.20925867498582160, 0.20929371953607990, 0.20938041212427280, 0.20941545773835480, 0.20945050348123070, 0.20953720177303530, 0.20957224857846590, 0.20960729551231250, 0.20964234257449020, 0.20972904749907020, 0.20976409562224110, 0.20979914387336480, 0.20988585449308230, 0.20992090380392930, 0.20995595324235180, 0.21004266955341370, 0.21007772005028900, 0.21011277067436240, 0.21014782142554780, 0.21019949267297360, 0.21023454435422860, 0.21026959616230370, 0.21030464809711420, 0.21039137670865560, 0.21042642969908380, 0.21046148281586940, 0.21054821710647350, 0.21058327127760550, 0.21061832557471680, 0.21065337999772050, 0.21074012089077060, 0.21077517636655750, 0.21081023196785990, 0.21089697853147840, 0.21093203518429100, 0.21096709196224060, 0.21100214886524160, 0.21105384419262530, 0.21108890202081280, 0.21112395997375910, 0.21115901805137950, 0.21124577686901810, 0.21128083599530990, 0.21131589524589710, 0.21140265972179810, 0.21143772001978390, 0.21147278044168630, 0.21150784098742000, 0.21159461204007030, 0.21162967363163580, 0.21166473534665450, 0.21175151204905550, 0.21178657480863190, 0.21182163769128260, 0.21185670069692180, 0.21194348396555910, 0.21197854801418850, 0.21201361218542830, 0.21210040109529870, 0.21213546630825360, 0.21217053164343990, 0.21220559710077210, 0.21229239256635710, 0.21232745906383590, 0.21236252568308160, 0.21239759242400870, 0.21244932678137540, 0.21248439443949230, 0.21251946221899720, 0.21255453011980480, 0.21264133776328360, 0.21267640670139300, 0.21271147576042620, 0.21274654494029710, 0.21283335912314010, 0.21286842933874270, 0.21290349967480480, 0.21299031947710720, 0.21302539084762400, 0.21306046233822070, 0.21309553394881120, 0.21318236027993590, 0.21321743292341100, 0.21325250568650120, 0.21328757856912030, 0.21337441142323910, 0.21340948533717110, 0.21344455937025390, 0.21353139783056710, 0.21356647289368430, 0.21360154807557180, 0.21363662337614470, 0.21372346834889770, 0.21375854467793320, 0.21379362112527410, 0.21382869769083460, 0.21391554917019370, 0.21395062676264450, 0.21398570447293550, 0.21407256154520700, 0.21410764028110870, 0.21414271913447140, 0.21417779810520880, 0.21426466167351790, 0.21429974166829290, 0.21433482178006310, 0.21436990200874240, 0.21445677206724870, 0.21449185331839140, 0.21452693468606350, 0.21456201617017970, 0.21464889271304020, 0.21468397521804540, 0.21471905783911430, 0.21475414057616110, 0.21484102359752930, 0.21487610735389060, 0.21491119122584960, 0.21499807981735710, 0.21503316470734920, 0.21506824971255920, 0.21510333483290190, 0.21519022989232830, 0.21522531602912730, 0.21526040228067910, 0.21529548864689730, 0.21538239016839000, 0.21541747754948850, 0.21545256504487310, 0.21548765265445800, 0.21557456063216200, 0.21560964925505060, 0.21564473799175970, 0.21567982684220280, 0.21576674127026050, 0.21580183113242990, 0.21583692110795300, 0.21587201119674420, 0.21595893206929620, 0.21599402316823580, 0.21602911438006310, 0.21606420570469170, 0.21615113301587580, 0.21618622534907520, 0.21622131779469540, 0.21625641035265010, 0.21634334409660200, 0.21637843766154880, 0.21641353133845050, 0.21644862512722010, 0.21653556529807260, 0.21657066009225470, 0.21660575499792500, 0.21664085001499750, 0.21672779660688070, 0.21676289262778540, 0.21679798875971160, 0.21683308500257280, 0.21692003800961540, 0.21695513525472920, 0.21699023261039720, 0.21702533007653350, 0.21711228949286150, 0.21714738795966990, 0.21718248653656570, 0.21721758522346270, 0.21730455104319980, 0.21733965072918760, 0.21737475052479590, 0.21740985042993850, 0.21749682264720550, 0.21753192354985740, 0.21756702456166240, 0.21760212568253480, 0.21772420640825010, 0.21775930863373550, 0.21779441096782120, 0.21782951341042050, 0.21791649929093280, 0.21795160272758150, 0.21798670627236270, 0.21802180992519080, 0.21810880218446640, 0.21814390682976070, 0.21817901158271990, 0.21821411644325870, 0.21830111507541000, 0.21833622092683100, 0.21837132688545000, 0.21840643295118090, 0.21849343795031650, 0.21852854500534570, 0.21856365216710490, 0.21859875943550870, 0.21863386681047010, 0.21872087905185210, 0.21875598741423210, 0.21879109588278830, 0.21882620445743440, 0.21891322305289500, 0.21894833261337490, 0.21898344227956310, 0.21901855205137370, 0.21910557699501350, 0.21914068775107260, 0.21917579861237200, 0.21921090957882550, 0.21924602065034740, 0.21933305281385990, 0.21936816486774790, 0.21940327702632270, 0.21943838928949770, 0.21952542778826700, 0.21956054103222160, 0.21959565438039440, 0.21963076783269910, 0.21975292709231770, 0.21978804162756580, 0.21982315626647710, 0.21985827100896720, 0.21994532303455820, 0.21998043875435680, 0.22001555457735080, 0.22005067050345490, 0.22017284574728420, 0.22020796275183660, 0.22024307985902930, 0.22027819706877700, 0.22036526259285950, 0.22040038077644390, 0.22043549906220110, 0.22047061745004380, 0.22059280863768100, 0.22062792809947550, 0.22066304766288750, 0.22069816732783130, 0.22078524632205000, 0.22082036695735530, 0.22085548769380940, 0.22089060853132660, 0.22092572946981990, 0.22101281562233820, 0.22104793752930690, 0.22108305953686930, 0.22111818164493920, 0.22120527408091730, 0.22124039715587220, 0.22127552033095260, 0.22131064360607100, 0.22134576698114220, 0.22143286655999400, 0.22146799090006220, 0.22150311533970060, 0.22153823987882190, 0.22157336451734000, 0.22166047123068350, 0.22169559683231130, 0.22173072253295340, 0.22176584833252330, 0.22188808807038270, 0.22192321493001450, 0.22195834188810470, 0.22199346894456800, 0.22208058904038790, 0.22211571705647880, 0.22215084517055910, 0.22218597338254240, 0.22222110169234250, 0.22230822889881550, 0.22234335816635380, 0.22237848753132550, 0.22241361699364450, 0.22244874655322410, 0.22253588086195390, 0.22257101137738190, 0.22260614198968680, 0.22264127269878300, 0.22267640350458490, 0.22276354490717010, 0.22279867666692840, 0.22283380852300820, 0.22286894047532290, 0.22290407252378730, 0.22299122101182400, 0.22302635401235300, 0.22306148710864760, 0.22309662030062110, 0.22321890915326760, 0.22325404339100670, 0.22328917772395530, 0.22332431215202710, 0.22344660930884680, 0.22348174478023430, 0.22351688034627570, 0.22355201600688310, 0.22367432145589890, 0.22370945815737320, 0.22374459495294330, 0.22377973184252400, 0.22381486882602830, 0.22390204557175440, 0.22393718349975100, 0.22397232152128760, 0.22400745963627760, 0.22404259784463500, 0.22412978163373690, 0.22416492078469150, 0.22420006002862930, 0.22423519936546420, 0.22427033879510920, 0.22435752961916090, 0.22439266998950810, 0.22442781045228230, 0.22446295100739630, 0.22449809165476430, 0.22458528950533570, 0.22462043109150970, 0.22465557276955290, 0.22469071453937940, 0.22472585640090250, 0.22484820406799500, 0.22488334695774040, 0.22491848993871220, 0.22495363301082320, 0.22507598889625800, 0.22511113299413700, 0.22514627718268500, 0.22518142146181540, 0.22521656583144170, 0.22530378555358350, 0.22533893085602710, 0.22537407624858230, 0.22540922173116230, 0.22544436730368100, 0.22556674052068790, 0.22560188711368000, 0.22563703379613970, 0.22567218056798080, 0.22570732742911600, 0.22579456196538990, 0.22582970975524750, 0.22586485763401510, 0.22590000560160650, 0.22593515365793500, 0.22605754415054630, 0.22609269322204990, 0.22612784238181910, 0.22616299162976800, 0.22619814096580980, 0.22628539027683170, 0.22632054053749760, 0.22635569088587140, 0.22639084132186750, 0.22642599184539820, 0.22654839955760470, 0.22658355109100920, 0.22661870271147780, 0.22665385441892340, 0.22668900621325880, 0.22677627025961130, 0.22681142297447100, 0.22684657577583670, 0.22688172866362100, 0.22691688163773850, 0.22703930651348750, 0.22707446049217430, 0.22710961455672180, 0.22714476870704360, 0.22717992294305340, 0.22730235683771370, 0.22733751207544680, 0.22737266739839640, 0.22740782280647530, 0.22744297829959690, 0.22753026478967140, 0.22756542119701180, 0.22760057768900990, 0.22763573426557970, 0.22767089092663370, 0.22770604767208600, 0.22779334189862470, 0.22782849955609260, 0.22786365729757360, 0.22789881512298060, 0.22793397303222650, 0.22796913102522620, 0.22805643297684350, 0.22809159187965550, 0.22812675086583500, 0.22816190993529510, 0.22819706908794940, 0.22831953798901750, 0.22835469813238790, 0.22838985835848060, 0.22842501866720900, 0.22846017905848600, 0.22858265689982410, 0.22861781827896710, 0.22865297974018640, 0.22868814128339570, 0.22872330290850860, 0.22884578967392910, 0.22888095228405660, 0.22891611497561490, 0.22895127774851760, 0.22898644060267840, 0.22902160353800940, 0.22910893627598790, 0.22914410011231120, 0.22917926402941950, 0.22921442802722620, 0.22924959210564460, 0.22928475626458820, 0.22937209667064350, 0.22940726172837220, 0.22944242686624010, 0.22947759208416030, 0.22951275738204640, 0.22954792275981180, 0.22967043709687080, 0.22970560345070640, 0.22974076988394860, 0.22977593639651030, 0.22981110298830530, 0.22993362618242630, 0.22996879374743710, 0.23000396139120820, 0.23003912911365240, 0.23007429691468350, 0.23010946479421500, 0.23019682894964690, 0.23023199772103870, 0.23026716657054390, 0.23030233549807670, 0.23033750450355000, 0.23037267358687630, 0.23049521533610670, 0.23053038538655150, 0.23056555551437660, 0.23060072571949550, 0.23063589600182160, 0.23067106636126860, 0.23075844655722580, 0.23079361780381280, 0.23082878912713370, 0.23086396052710190, 0.23089913200363070, 0.23093430355663320, 0.23105686378690070, 0.23109203630091900, 0.23112720889093820, 0.23116238155687080, 0.23119755429863030, 0.23123272711613010, 0.23135529700029250, 0.23139047077556240, 0.23142564462609950, 0.23146081855181650, 0.23149599255262660, 0.23161857118980190, 0.23165374614552230, 0.23168892117586280, 0.23172409628073600, 0.23175927146005580, 0.23179444671373470, 0.23191703496535380, 0.23195221117069560, 0.23198738744992300, 0.23202256380294970, 0.23205774022968830, 0.23209291673005240, 0.23221551457512140, 0.23225069202389980, 0.23228586954582970, 0.23232104714082410, 0.23235622480879700, 0.23239140254966100, 0.23251400996717740, 0.23254918865320590, 0.23258436741165160, 0.23261954624242780, 0.23265472514544760, 0.23268990412062500, 0.23281252108957790, 0.23284770100666850, 0.23288288099544180, 0.23291806105581140, 0.23295324118769070, 0.23298842139099140, 0.23311104789036200, 0.23314622903232510, 0.23318141024523680, 0.23321659152901010, 0.23325177288355750, 0.23328695430879280, 0.23332213580462880, 0.23344477267819690, 0.23347995510905520, 0.23351513761004040, 0.23355032018106490, 0.23358550282204270, 0.23362068553288640, 0.23374333189228840, 0.23377851553490060, 0.23381369924690410, 0.23384888302821240, 0.23388406687873910, 0.23391925079839670, 0.23404190662258750, 0.23407709147075830, 0.23411227638758630, 0.23414746137298340, 0.23418264642686370, 0.23421783154914000, 0.23425301673972530, 0.23437568286459940, 0.23441086898005450, 0.23444605516334430, 0.23448124141438170, 0.23451642773307950, 0.23455161411935120, 0.23458680057310950, 0.23470947697226110, 0.23474466434724500, 0.23477985178924150, 0.23481503929816260, 0.23485022687392220, 0.23488541451643350, 0.23500810031214120, 0.23504328887261960, 0.23507847749937490, 0.23511366619231970, 0.23514885495136710, 0.23518404377643000, 0.23521923266742210, 0.23534192868738570, 0.23537711849269840, 0.23541230836346490, 0.23544749829959890, 0.23548268830101180, 0.23551787836761830, 0.23555306849933100, 0.23567577471711190, 0.23571096575949700, 0.23574615686651300, 0.23578134803807310, 0.23581653927409060, 0.23585173057447800, 0.23588692193914880, 0.23604483059999110, 0.23608002293549330, 0.23611521533471600, 0.23615040779757280, 0.23618560032397720, 0.23622079291384100, 0.23637871294113430, 0.23641390649735600, 0.23644910011647580, 0.23648429379840620, 0.23651948754306000, 0.23655468135035150, 0.23658987522019220, 0.23671261270985520, 0.23674780747902890, 0.23678300231027720, 0.23681819720351260, 0.23685339215864880, 0.23688858717559830, 0.23692378225427400, 0.23708172580741670, 0.23711692184302340, 0.23715211793979400, 0.23718731409764110, 0.23722251031647840, 0.23725770659621840, 0.23729290293677350, 0.23741566140940060, 0.23745085864159340, 0.23748605593412630, 0.23752125328691250, 0.23755645069986480, 0.23759164817289570, 0.23762684570591880, 0.23766204329884640, 0.23778481263284350, 0.23782001111336450, 0.23785520965331510, 0.23789040825260780, 0.23792560691115520, 0.23796080562887030, 0.23799600440566700, 0.23803120324145710, 0.23815398340434000, 0.23818918312367820, 0.23822438290153450, 0.23825958273782170, 0.23829478263245270, 0.23832998258534070, 0.23836518259639770, 0.23840038266553750, 0.23852317362480870, 0.23855837457345010, 0.23859357557969800, 0.23862877664346560, 0.23866397776466570, 0.23869917894321090, 0.23873438017901490, 0.23876958147198930, 0.23892758536356450, 0.23896278758868780, 0.23899798987041850, 0.23903319220867060, 0.23906839460335640, 0.23910359705438880, 0.23913879956168090, 0.23929681539487380, 0.23933201882935320, 0.23936722231952850, 0.23940242586531330, 0.23943762946661980, 0.23947283312336100, 0.23950803683545060, 0.23954324060280040, 0.23970126920251400, 0.23973647389161200, 0.23977167863540700, 0.23980688343381230, 0.23984208828674040, 0.23987729319410390, 0.23991249815581690, 0.23994770317179070, 0.24010574448745380, 0.24014095041973520, 0.24017615640571450, 0.24021136244530420, 0.24024656853841800, 0.24028177468496810, 0.24031698088486760, 0.24035218713802920, 0.24051024111904960, 0.24054544828307590, 0.24058065549980030, 0.24061586276913640, 0.24065107009099650, 0.24068627746529330, 0.24072148489194010, 0.24075669237084910, 0.24091475896661530, 0.24094996735094510, 0.24098517578697340, 0.24102038427461330, 0.24105559281377750, 0.24109080140437900, 0.24112601004633060, 0.24116121873954470, 0.24119642748393450, 0.24135450749261170, 0.24138971713649900, 0.24142492683099840, 0.24146013657602190, 0.24149534637148240, 0.24153055621729320, 0.24156576611336690, 0.24160097605961620, 0.24163618605595380, 0.24179427941760390, 0.24182949030751430, 0.24186470124694860, 0.24189991223582050, 0.24193512327404190, 0.24197033436152580, 0.24200554549818610, 0.24204075668393390, 0.24207596791868260, 0.24223407457334200, 0.24226928669573670, 0.24230449886656810, 0.24233971108574900, 0.24237492335319250, 0.24241013566881080, 0.24244534803251680, 0.24248056044422320, 0.24251577290384290, 0.24267389279152410, 0.24270910613286130, 0.24274431952154660, 0.24277953295749400, 0.24281474644061650, 0.24284995997082580, 0.24288517354803510, 0.24292038717215740, 0.24295560084310440, 0.24299081456079060, 0.24314894845052680, 0.24318416304352150, 0.24321937768269000, 0.24325459236794440, 0.24328980709919820, 0.24332502187636390, 0.24336023669935430, 0.24339545156808250, 0.24343066648246030, 0.24346588144240140, 0.24362402926407580, 0.24365924509291510, 0.24369446096675270, 0.24372967688550120, 0.24376489284907330, 0.24380010885738150, 0.24383532491033890, 0.24387054100785840, 0.24390575714985240, 0.24394097333623340, 0.24413435206856530, 0.24416956916125480, 0.24420478629767980, 0.24424000347775200, 0.24427522070138490, 0.24431043796849150, 0.24434565527898400, 0.24438087263277510, 0.24441609002977720, 0.24445130746990400, 0.24460948375792980, 0.24464470205364990, 0.24467992039192890, 0.24471513877267960, 0.24475035719581500, 0.24478557566124740, 0.24482079416889050, 0.24485601271865580, 0.24489123131045650, 0.24492644994420510, 0.24496166861981510, 0.24515507895562930, 0.24519029852123290, 0.24522551812804450, 0.24526073777597710, 0.24529595746494380, 0.24533117719485620, 0.24536639696562800, 0.24540161677717120, 0.24543683662939910, 0.24547205652222420, 0.24566548251072310, 0.24570070328538050, 0.24573592409998260, 0.24577114495444210, 0.24580636584867110, 0.24584158678258240, 0.24587680775608920, 0.24591202876910380, 0.24594724982153870, 0.24598247091330680, 0.24601769204432120, 0.24624635642461990, 0.24628157846733010, 0.24631680054854630, 0.24635202266818080, 0.24638724482614610, 0.24642246702235580, 0.24645768925672100, 0.24649291152915560, 0.24652813383957190, 0.24656335618788260, 0.24659857857400040, 0.24682726130060350, 0.24686248458768030, 0.24689770791182380, 0.24693293127294660, 0.24696815467096170, 0.24700337810578050, 0.24703860157731710, 0.24707382508548360, 0.24710904863019310, 0.24714427221135720, 0.24717949582888910, 0.24740819674906510, 0.24744342125681600, 0.24747864580019390, 0.24751387037911180, 0.24754909499348190, 0.24758431964321770, 0.24761954432823120, 0.24765476904843520, 0.24768999380374230, 0.24772521859406540, 0.24776044341931630, 0.24779566827940900, 0.24802438808499820, 0.24805961382391160, 0.24809483959692540, 0.24813006540395200, 0.24816529124490390, 0.24820051711969390, 0.24823574302823470, 0.24827096897043900, 0.24830619494621950, 0.24834142095548880, 0.24837664699815850, 0.24841187307414290, 0.24844709918335320, 0.24867583853651480, 0.24871106551249140, 0.24874629252095370, 0.24878151956181460, 0.24881674663498590, 0.24885197374038030, 0.24888720087791100, 0.24892242804748940, 0.24895765524903040, 0.24899288248244470, 0.24902810974764570, 0.24906333704454480, 0.24909856437305650, 0.24913379173309210, 0.24936255126458180, 0.24939777947867080, 0.24943300772354320, 0.24946823599911070, 0.24950346430528660, 0.24953869264198340, 0.24957392100911370, 0.24960914940659000, 0.24964437783432510, 0.24967960629223160, 0.24971483478022200, 0.24975006329820840, 0.24978529184610400, 0.24982052042382160, 0.24985574903127300, 0.25011975878685980, 0.25015498826398640, 0.25019021777001850, 0.25022544730486820, 0.25026067686844890, 0.25029590646067310, 0.25033113608145270, 0.25036636573070040, 0.25040159540832940, 0.25043682511425190, 0.25047205484838080, 0.25050728461062750, 0.25054251440090640, 0.25057774421912890, 0.25061297406520810, 0.25087700638414160, 0.25091223708398740, 0.25094746781086030, 0.25098269856467340, 0.25101792934533910, 0.25105316015276950, 0.25108839098687790, 0.25112362184757680, 0.25115885273477810, 0.25119408364839480, 0.25122931458833970, 0.25126454555452510, 0.25129977654686360, 0.25133500756526790, 0.25137023860965080, 0.25140546967992380, 0.25144070077600080, 0.25170475698071410, 0.25173998891316000, 0.25177522087058030, 0.25181045285288720, 0.25184568485999310, 0.25188091689181100, 0.25191614894825330, 0.25195138102923210, 0.25198661313466080, 0.25202184526445140, 0.25205707741851670, 0.25209230959676900, 0.25212754179912110, 0.25216277402548530, 0.25219800627577400, 0.25223323854990050, 0.25226847084777690, 0.25230370316931580, 0.25233893551442950, 0.25263824999772830, 0.25267348318306930, 0.25270871639106840, 0.25274394962163820, 0.25277918287469090, 0.25281441615013930, 0.25284964944789580, 0.25288488276787290, 0.25292011610998350, 0.25295534947414000, 0.25299058286025480, 0.25302581626824070, 0.25306104969801010, 0.25309628314947550, 0.25313151662254910, 0.25316675011714410, 0.25320198363317300, 0.25323721717054750, 0.25327245072918040, 0.25330768430898560, 0.25364226064990060, 0.25367749506740310, 0.25371272950507230, 0.25374796396282060, 0.25378319844056050, 0.25381843293820450, 0.25385366745566520, 0.25388890199285500, 0.25392413654968670, 0.25395937112607280, 0.25399460572192490, 0.25402984033715700, 0.25406507497168060, 0.25410030962540870, 0.25413554429825430, 0.25417077899012870, 0.25420601370094500, 0.25424124843061580, 0.25427648317905410, 0.25431171794617160, 0.25434695273188100, 0.25438218753609480, 0.25441742235872700, 0.25482250119700320, 0.25485773686320270, 0.25489297254663980, 0.25492820824722640, 0.25496344396487530, 0.25499867969949890, 0.25503391545100980, 0.25506915121932000, 0.25510438700434260, 0.25513962280599020, 0.25517485862417490, 0.25521009445880920, 0.25524533030980590, 0.25528056617707770, 0.25531580206053680, 0.25535103796009540, 0.25538627387566650, 0.25542150980716270, 0.25545674575449600, 0.25549198171757900, 0.25552721769632520, 0.25556245369064570, 0.25559768970045390, 0.25563292572566180, 0.25566816176618250, 0.25570339782192830, 0.25573863389281110, 0.25621422388587020, 0.25624946078720500, 0.25628469770232220, 0.25631993463113420, 0.25635517157355300, 0.25639040852949160, 0.25642564549886250, 0.25646088248157790, 0.25649611947755060, 0.25653135648669290, 0.25656659350891740, 0.25660183054413660, 0.25663706759226320, 0.25667230465320940, 0.25670754172688760, 0.25674277881321080, 0.25677801591209090, 0.25681325302344060, 0.25684849014717320, 0.25688372728319990, 0.25691896443143410, 0.25695420159178790, 0.25698943876417400, 0.25702467594850500, 0.25705991314469280, 0.25709515035265070, 0.25713038757229040, 0.25716562480352500, 0.25720086204626740, 0.25723609930042860, 0.25727133656592320, 0.25730657384266090, 0.25734181113055690, 0.25737704842952260, 0.25741228573947050, 0.25809935016282630, 0.25813458829947010, 0.25816982644521540, 0.25820506459997450, 0.25824030276366000, 0.25827554093618430, 0.25831077911746030, 0.25834601730739990, 0.25838125550591590, 0.25841649371292050, 0.25845173192832690, 0.25848697015204670, 0.25852220838399280, 0.25855744662407810, 0.25859268487221420, 0.25862792312831430, 0.25866316139229070, 0.25869839966405550, 0.25873363794352220, 0.25876887623060210, 0.25880411452520820, 0.25883935282725350, 0.25887459113664960, 0.25890982945330950, 0.25894506777714570, 0.25898030610807040, 0.25901554444599630, 0.25905078279083590, 0.25908602114250160, 0.25912125950090590, 0.25915649786596130, 0.25919173623758030, 0.25922697461567520, 0.25926221300015900, 0.25929745139094340, 0.25933268978794180, 0.25936792819106550, 0.25940316660022860, 0.25943840501534220, 0.25947364343631980, 0.25950888186307270, 0.25954412029551490, 0.25957935873355750, 0.25961459717711330, 0.25964983562609570, 0.25968507408041590, 0.25972031253998700, 0.25975555100472190, 0.25979078947453240, 0.25982602794933160, 0.25986126642903140, 0.25989650491354430, 0.25993174340278390, 0.25996698189666060, 0.26000222039508940, 0.26003745889798050, 0.26007269740524720, 0.26010793591680280, 0.26014317443255880, 0.26017841295242830, 0.26021365147632350, 0.26024889000415680, 0.26028412853584060, 0.26031936707128750, 0.26035460561041040, 0.26038984415312100, 0.26042508269933260, 0.26046032124895670, 0.26049555980190700, 0.26053079835809530, 0.26056603691743410, 0.26060127547983590, 0.26299750011846300, 0.26303273868086470, 0.26306797724020350, 0.26310321579639190, 0.26313845434934220, 0.26317369289896620, 0.26320893144517780, 0.26324416998788840, 0.26327940852701140, 0.26331464706245830, 0.26334988559414200, 0.26338512412197530, 0.26342036264587060, 0.26345560116574000, 0.26349083968149600, 0.26352607819305160, 0.26356131670031830, 0.26359655520320940, 0.26363179370163820, 0.26366703219551500, 0.26370227068475450, 0.26373750916926740, 0.26377274764896720, 0.26380798612376640, 0.26384322459357690, 0.26387846305831180, 0.26391370151788290, 0.26394893997220320, 0.26398417842118550, 0.26401941686474130, 0.26405465530278390, 0.26408989373522610, 0.26412513216197900, 0.26416037058295660, 0.26419560899807020, 0.26423084740723330, 0.26426608581035710, 0.26430132420735530, 0.26433656259813980, 0.26437180098262370, 0.26440703936071850, 0.26444227773233750, 0.26447751609739290, 0.26451275445579720, 0.26454799280746290, 0.26458323115230250, 0.26461846949022840, 0.26465370782115320, 0.26468894614498930, 0.26472418446164920, 0.26475942277104530, 0.26479466107309060, 0.26482989936769670, 0.26486513765477660, 0.26490037593424340, 0.26493561420600820, 0.26497085246998450, 0.26500609072608460, 0.26504132897422070, 0.26507656721430600, 0.26511180544625210, 0.26514704366997190, 0.26518228188537840, 0.26521752009238300, 0.26525275829089900, 0.26528799648083850, 0.26532323466211460, 0.26535847283463880, 0.26539371099832440, 0.26542894915308350, 0.26546418729882880, 0.26549942543547260, 0.26618648985882840, 0.26622172716877620, 0.26625696446774190, 0.26629220175563790, 0.26632743903237570, 0.26636267629787020, 0.26639791355203140, 0.26643315079477370, 0.26646838802600840, 0.26650362524564810, 0.26653886245360600, 0.26657409964979380, 0.26660933683412480, 0.26664457400651090, 0.26667981116686470, 0.26671504831509890, 0.26675028545112560, 0.26678552257485820, 0.26682075968620800, 0.26685599678508800, 0.26689123387141120, 0.26692647094508940, 0.26696170800603560, 0.26699694505416220, 0.26703218208938140, 0.26706741911160590, 0.26710265612074830, 0.26713789311672090, 0.26717313009943630, 0.26720836706880720, 0.26724360402474590, 0.26727884096716470, 0.26731407789597660, 0.26734931481109380, 0.26738455171242860, 0.26786014170548770, 0.26789537777637060, 0.26793061383211640, 0.26796584987263700, 0.26800108589784500, 0.26803632190765310, 0.26807155790197360, 0.26810679388071980, 0.26814202984380280, 0.26817726579113610, 0.26821250172263240, 0.26824773763820340, 0.26828297353776200, 0.26831820942122110, 0.26835344528849290, 0.26838868113948960, 0.26842391697412400, 0.26845915279230860, 0.26849438859395620, 0.26852962437897880, 0.26856486014728900, 0.26860009589880000, 0.26863533163342350, 0.26867056735107250, 0.26870580305165900, 0.26874103873509610, 0.26877627440129560, 0.26918135323957180, 0.26921658806220400, 0.26925182286641780, 0.26928705765212730, 0.26932229241924470, 0.26935752716768300, 0.26939276189735380, 0.26942799660817010, 0.26946323130004450, 0.26949846597289010, 0.26953370062661820, 0.26956893526114180, 0.26960416987637390, 0.26963940447222610, 0.26967463904861210, 0.26970987360544370, 0.26974510814263360, 0.26978034266009430, 0.26981557715773830, 0.26985081163547820, 0.26988604609322660, 0.26992128053089570, 0.26995651494839820, 0.27029109128931320, 0.27032632486911840, 0.27036155842775140, 0.27039679196512580, 0.27043202548115470, 0.27046725897574970, 0.27050249244882330, 0.27053772590028870, 0.27057295933005810, 0.27060819273804400, 0.27064342612415880, 0.27067865948831530, 0.27071389283042600, 0.27074912615040300, 0.27078435944815960, 0.27081959272360790, 0.27085482597666060, 0.27089005920723050, 0.27092529241522950, 0.27096052560057050, 0.27125984008386930, 0.27129507242898300, 0.27133030475052200, 0.27136553704839830, 0.27140076932252470, 0.27143600157281350, 0.27147123379917780, 0.27150646600152980, 0.27154169817978210, 0.27157693033384740, 0.27161216246363800, 0.27164739456906670, 0.27168262665004550, 0.27171785870648790, 0.27175309073830570, 0.27178832274541160, 0.27182355472771850, 0.27185878668513880, 0.27189401861758470, 0.27215807482229800, 0.27219330591837500, 0.27222853698864810, 0.27226376803303090, 0.27229899905143520, 0.27233423004377370, 0.27236946100995920, 0.27240469194990400, 0.27243992286352080, 0.27247515375072200, 0.27251038461142090, 0.27254561544552920, 0.27258084625295970, 0.27261607703362540, 0.27265130778743850, 0.27268653851431150, 0.27272176921415730, 0.27298580153309080, 0.27302103137916990, 0.27305626119739240, 0.27309149098767130, 0.27312672074991800, 0.27316195048404700, 0.27319718018996950, 0.27323240986759840, 0.27326763951684610, 0.27330286913762580, 0.27333809872984990, 0.27337332829343060, 0.27340855782828030, 0.27344378733431250, 0.27347901681143900, 0.27374302656702590, 0.27377825517447720, 0.27381348375219480, 0.27384871230009050, 0.27388394081807680, 0.27391916930606730, 0.27395439776397370, 0.27398962619170890, 0.27402485458918510, 0.27406008295631540, 0.27409531129301220, 0.27413053959918810, 0.27416576787475570, 0.27420099611962800, 0.27423622433371700, 0.27446498386520670, 0.27450021122524230, 0.27453543855375400, 0.27457066585065310, 0.27460589311585410, 0.27464112034926840, 0.27467634755080940, 0.27471157472038790, 0.27474680185791860, 0.27478202896331290, 0.27481725603648430, 0.27485248307734510, 0.27488771008580750, 0.27492293706178400, 0.27515167641494560, 0.27518690252415590, 0.27522212860014030, 0.27525735464281000, 0.27529258065207930, 0.27532780662785990, 0.27536303257006410, 0.27539825847860490, 0.27543348435339500, 0.27546871019434680, 0.27550393600137340, 0.27553916177438730, 0.27557438751330070, 0.27580310731888980, 0.27583833217898240, 0.27587355700423330, 0.27590878179455650, 0.27594400654986360, 0.27597923127006760, 0.27601445595508110, 0.27604968060481690, 0.27608490521918710, 0.27612012979810490, 0.27615535434148290, 0.27619057884923380, 0.27641927976940970, 0.27645450338694160, 0.27648972696810570, 0.27652495051281520, 0.27656017402098170, 0.27659539749251830, 0.27663062092733710, 0.27666584432535220, 0.27670106768647500, 0.27673629101061860, 0.27677151429769540, 0.27700019702429840, 0.27703541941041620, 0.27707064175872700, 0.27710586406914330, 0.27714108634157780, 0.27717630857594300, 0.27721153077215270, 0.27724675293011800, 0.27728197504975250, 0.27731719713096870, 0.27735241917367890, 0.27758108355397760, 0.27761630468499200, 0.27765152577676000, 0.27768674682919500, 0.27772196784220960, 0.27775718881571640, 0.27779240974962770, 0.27782763064385670, 0.27786285149831620, 0.27789807231291830, 0.27793329308757560, 0.27812671907607460, 0.27816193896889980, 0.27819715882112760, 0.27823237863267080, 0.27826759840344260, 0.27830281813335510, 0.27833803782232170, 0.27837325747025440, 0.27840847707706600, 0.27844369664266950, 0.27863710697848370, 0.27867232565409370, 0.27870754428784230, 0.27874276287964290, 0.27877798142940830, 0.27881319993705140, 0.27884841840248380, 0.27888363682561930, 0.27891885520636990, 0.27895407354464900, 0.27898929184036900, 0.27914746812839480, 0.27918268556852150, 0.27921790296552370, 0.27925312031931480, 0.27928833762980730, 0.27932355489691390, 0.27935877212054680, 0.27939398930061910, 0.27942920643704400, 0.27946442352973350, 0.27965780226206540, 0.27969301844844650, 0.27972823459044040, 0.27976345068795990, 0.27979866674091740, 0.27983388274922550, 0.27986909871279760, 0.27990431463154610, 0.27993953050538370, 0.27997474633422300, 0.28013289415589740, 0.28016810911583850, 0.28020332403021640, 0.28023853889894460, 0.28027375372193490, 0.28030896849910060, 0.28034418323035440, 0.28037939791560880, 0.28041461255477730, 0.28044982714777200, 0.28060796103750820, 0.28064317475519440, 0.28067838842614140, 0.28071360205026380, 0.28074881562747310, 0.28078402915768230, 0.28081924264080480, 0.28085445607675220, 0.28088966946543760, 0.28092488280677480, 0.28108300269445590, 0.28111821515407560, 0.28115342756578200, 0.28118863992948810, 0.28122385224510640, 0.28125906451254980, 0.28129427673173070, 0.28132948890256200, 0.28136470102495680, 0.28152280767961630, 0.28155801891436490, 0.28159323010011270, 0.28162844123677300, 0.28166365232425690, 0.28169886336247830, 0.28173407435135020, 0.28176928529078450, 0.28180449618069490, 0.28196258954234510, 0.28199779953868260, 0.28203300948493190, 0.28206821938100560, 0.28210342922681630, 0.28213863902227700, 0.28217384876730040, 0.28220905846179990, 0.28224426810568710, 0.28240234811436430, 0.28243755685875400, 0.28247276555196830, 0.28250797419391980, 0.28254318278452130, 0.28257839132368550, 0.28261359981132550, 0.28264880824735370, 0.28268401663168350, 0.28284208322744970, 0.28287729070635870, 0.28291249813300550, 0.28294770550730230, 0.28298291282916250, 0.28301812009849860, 0.28305332731522290, 0.28308853447924920, 0.28324658846026960, 0.28328179471343120, 0.28331700091333070, 0.28335220705988090, 0.28338741315299470, 0.28342261919258420, 0.28345782517856350, 0.28349303111084500, 0.28365107242650820, 0.28368627744248190, 0.28372148240419490, 0.28375668731155840, 0.28379189216448650, 0.28382709696289190, 0.28386230170668680, 0.28389750639578480, 0.28405553499549850, 0.28409073876284820, 0.28412594247493780, 0.28416114613167910, 0.28419634973298560, 0.28423155327877040, 0.28426675676894560, 0.28430196020342500, 0.28445997603661790, 0.28449517854391000, 0.28453038099494240, 0.28456558338962830, 0.28460078572788040, 0.28463598800961110, 0.28467119023473430, 0.28482919412630950, 0.28486439541928390, 0.28489959665508800, 0.28493479783363310, 0.28496999895483330, 0.28500520001860080, 0.28504040102484880, 0.28507560197349000, 0.28519839293276130, 0.28523359300190110, 0.28526879301295810, 0.28530399296584620, 0.28533919286047720, 0.28537439269676430, 0.28540959247462070, 0.28544479219395880, 0.28556757235684170, 0.28560277119263180, 0.28563796996942850, 0.28567316868714360, 0.28570836734569110, 0.28574356594498380, 0.28577876448493420, 0.28581396296545540, 0.28593673229945240, 0.28597192989238000, 0.28600712742540320, 0.28604232489843410, 0.28607752231138630, 0.28611271966417250, 0.28614791695670540, 0.28618311418889820, 0.28630587266152530, 0.28634106900208030, 0.28637626528182050, 0.28641146150065770, 0.28644665765850480, 0.28648185375527540, 0.28651704979088210, 0.28667499334402480, 0.28671018842270060, 0.28674538343965000, 0.28678057839478620, 0.28681577328802170, 0.28685096811926990, 0.28688616288844360, 0.28700890037810660, 0.28704409424794730, 0.28707928805523880, 0.28711448179989270, 0.28714967548182300, 0.28718486910094270, 0.28722006265716450, 0.28737798268445780, 0.28741317527432160, 0.28744836780072600, 0.28748356026358280, 0.28751875266280560, 0.28755394499830760, 0.28771185365915000, 0.28774704502382090, 0.28778223632420820, 0.28781742756022570, 0.28785261873178590, 0.28788780983880180, 0.28792300088118690, 0.28804570709896790, 0.28808089723068050, 0.28811608729728700, 0.28815127729870000, 0.28818646723483400, 0.28822165710560040, 0.28825684691091310, 0.28837954293087670, 0.28841473182186870, 0.28844992064693170, 0.28848510940597910, 0.28852029809892390, 0.28855548672567920, 0.28859067528615760, 0.28871336108186530, 0.28874854872437660, 0.28878373630013620, 0.28881892380905740, 0.28885411125105380, 0.28888929862603780, 0.28901197502518940, 0.28904716147894760, 0.28908234786521940, 0.28911753418391710, 0.28915272043495450, 0.28918790661824430, 0.28922309273369940, 0.28934575885857350, 0.28938094404915880, 0.28941612917143510, 0.28945131422531540, 0.28948649921071250, 0.28952168412754050, 0.28955686897571130, 0.28967952479990210, 0.28971470871955960, 0.28974989257008640, 0.28978507635139470, 0.28982026006339820, 0.28985544370601040, 0.28997809006541240, 0.29001327277625610, 0.29004845541723400, 0.29008363798825840, 0.29011882048924370, 0.29015400292010180, 0.29027663979367000, 0.29031182128950610, 0.29034700271474140, 0.29038218406928870, 0.29041736535306210, 0.29045254656597370, 0.29048772770793680, 0.29061035420730740, 0.29064553441060820, 0.29068071454248740, 0.29071589460285700, 0.29075107459163030, 0.29078625450872090, 0.29090887147767390, 0.29094405045285130, 0.29097922935587110, 0.29101440818664730, 0.29104958694509300, 0.29108476563112150, 0.29120737304863780, 0.29124255078950180, 0.29127772845747470, 0.29131290605246910, 0.29134808357439910, 0.29138326102317740, 0.29150585886824640, 0.29154103536861050, 0.29157621179534920, 0.29161138814837580, 0.29164656442760320, 0.29168174063294490, 0.29180432888456410, 0.29183950413824300, 0.29187467931756280, 0.29190985442243600, 0.29194502945277650, 0.29198020440849690, 0.29210278304567220, 0.29213795704648230, 0.29217313097219930, 0.29220830482273640, 0.29224347859800640, 0.29236604848216880, 0.29240122129966850, 0.29243639404142800, 0.29247156670736060, 0.29250673929737990, 0.29254191181139810, 0.29266447204166570, 0.29269964359466810, 0.29273481507119690, 0.29276998647116510, 0.29280515779448600, 0.29284032904107300, 0.29292770923703020, 0.29296287959647720, 0.29299804987880330, 0.29303322008392230, 0.29306839021174730, 0.29310356026219210, 0.29322610201142250, 0.29326127109474870, 0.29329644010022220, 0.29333160902775490, 0.29336677787726010, 0.29340194664865190, 0.29348931080408380, 0.29352447868361530, 0.29355964648464640, 0.29359481420709070, 0.29362998185086170, 0.29366514941587260, 0.29378767260999350, 0.29382283920178850, 0.29385800571435010, 0.29389317214759240, 0.29392833850142800, 0.29405085283848710, 0.29408601821625240, 0.29412118351413850, 0.29415634873205870, 0.29419151386992660, 0.29422667892765530, 0.29431401933371060, 0.29434918349265430, 0.29438434757107270, 0.29441951156887930, 0.29445467548598760, 0.29448983932231100, 0.29457717206028940, 0.29461233499562050, 0.29464749784978120, 0.29468266062268400, 0.29471782331424210, 0.29475298592436970, 0.29487547268979030, 0.29491063431490310, 0.29494579585811240, 0.29498095731933170, 0.29501611869847460, 0.29513859653981280, 0.29517375693108980, 0.29520891723981820, 0.29524407746591090, 0.29527923760928130, 0.29540170651034940, 0.29543686566300360, 0.29547202473246380, 0.29550718371864320, 0.29554234262145530, 0.29562964457307260, 0.29566480256607230, 0.29569996047531820, 0.29573511830072520, 0.29577027604220620, 0.29580543369967410, 0.29589272792621290, 0.29592788467166510, 0.29596304133271910, 0.29599819790928890, 0.29603335440128700, 0.29606851080862740, 0.29615579729870190, 0.29619095279182350, 0.29622610819990240, 0.29626126352285200, 0.29629641876058520, 0.29641885265524540, 0.29645400689125520, 0.29648916104157700, 0.29652431510612450, 0.29655946908481130, 0.29668189396056030, 0.29671704693467780, 0.29675219982246210, 0.29678735262382780, 0.29682250533868760, 0.29690976938504000, 0.29694492117937540, 0.29698007288682100, 0.29701522450728960, 0.29705037604069410, 0.29717278375290060, 0.29720793427643130, 0.29724308471242740, 0.29727823506080120, 0.29731338532146710, 0.29740063463248900, 0.29743578396853090, 0.29747093321647970, 0.29750608237624890, 0.29754123144775250, 0.29766362194036390, 0.29769876999669230, 0.29773391796428370, 0.29776906584305130, 0.29780421363290890, 0.29789144816918280, 0.29792659503031800, 0.29796174180215910, 0.29799688848461870, 0.29803203507761090, 0.29815440829461780, 0.29818955386713650, 0.29822469934971650, 0.29825984474227160, 0.29829499004471530, 0.29838220976685710, 0.29841735413648340, 0.29845249841561370, 0.29848764260416180, 0.29852278670204080, 0.29864514258747560, 0.29868028565958660, 0.29871542864055840, 0.29875057153030380, 0.29887291919739630, 0.29890806105891940, 0.29894320282874600, 0.29897834450678910, 0.29901348609296310, 0.29910068394353460, 0.29913582459090260, 0.29917096514601650, 0.29920610560879070, 0.29924124597913790, 0.29932843680318960, 0.29936357623283460, 0.29939871556966960, 0.29943385481360730, 0.29946899396456190, 0.29955617775366380, 0.29959131596202120, 0.29962645407701130, 0.29966159209854770, 0.29969673002654440, 0.29978390677227050, 0.29981904375577480, 0.29985418064535550, 0.29988931744092560, 0.29992445414239990, 0.30004675959141570, 0.30008189525202310, 0.30011703081806450, 0.30015216628945210, 0.30027446344627170, 0.30030959787434350, 0.30034473220729210, 0.30037986644503120, 0.30050215529767770, 0.30053728848965120, 0.30057242158594580, 0.30060755458647480, 0.30069470307451150, 0.30072983512297590, 0.30076496707529050, 0.30080009893137050, 0.30083523069112870, 0.30092237209371390, 0.30095750289951580, 0.30099263360861210, 0.30102776422091690, 0.30106289473634490, 0.30115002904507480, 0.30118515860465430, 0.30122028806697330, 0.30125541743194490, 0.30129054669948340, 0.30137767390595630, 0.30141280221575650, 0.30144793042773970, 0.30148305854182000, 0.30151818655791080, 0.30160530665373080, 0.30164043371019410, 0.30167556066828430, 0.30171068752791620, 0.30183292726577550, 0.30186805306534550, 0.30190317876598750, 0.30193830436761530, 0.30202541108095880, 0.30206053571947700, 0.30209566025859820, 0.30213078469823660, 0.30216590903830490, 0.30225300861715660, 0.30228813199222790, 0.30232325526734620, 0.30235837844242660, 0.30239350151738150, 0.30248059395335960, 0.30251571606142940, 0.30255083806899190, 0.30258595997596060, 0.30267304612847900, 0.30270816706697220, 0.30274328790448950, 0.30277840864094350, 0.30281352927624880, 0.30290060827046750, 0.30293572793541130, 0.30297084749882330, 0.30300596696061790, 0.30312815814825500, 0.30316327653609770, 0.30319839482185490, 0.30323351300543930, 0.30332057852952190, 0.30335569573926950, 0.30339081284646230, 0.30342592985101460, 0.30354810509484390, 0.30358322102094800, 0.30361833684394200, 0.30365345256374070, 0.30374050458933160, 0.30377561933182170, 0.30381073397073300, 0.30384584850598110, 0.30396800776559960, 0.30400312121790440, 0.30403823456607720, 0.30407334781003180, 0.30416038630880120, 0.30419549857197610, 0.30423061073055090, 0.30426572278443900, 0.30435275494795140, 0.30438786601947330, 0.30442297698592680, 0.30445808784722620, 0.30449319860328530, 0.30458022354692510, 0.30461533331873570, 0.30465044298492390, 0.30468555254540380, 0.30477257114086440, 0.30480767971551050, 0.30484278818406660, 0.30487789654644670, 0.30496490878782880, 0.30500001616279020, 0.30503512343119400, 0.30507023059295310, 0.30510533764798220, 0.30519234264711790, 0.30522744871284890, 0.30526255467146780, 0.30529766052288880, 0.30538465915504020, 0.30541976401557890, 0.30545486876853810, 0.30548997341383240, 0.30557696567310800, 0.30561206932593610, 0.30564717287071730, 0.30568227630736610, 0.30576926218787830, 0.30580436463047760, 0.30583946696456330, 0.30587456919004870, 0.30599664991576400, 0.30603175103663640, 0.30606685204844140, 0.30610195295109330, 0.30618892516836040, 0.30622402507350300, 0.30625912486911120, 0.30629422455509900, 0.30638119037483610, 0.30641628906173310, 0.30645138763862890, 0.30648648610543730, 0.30657344552176530, 0.30660854298790160, 0.30664364034356950, 0.30667873758868340, 0.30676569059572610, 0.30680078683858720, 0.30683588297051350, 0.30687097899141810, 0.30695792558330130, 0.30699302060037380, 0.30702811550604400, 0.30706321030022620, 0.30715015047107870, 0.30718524425984830, 0.30722033793675000, 0.30725543150169690, 0.30734236524564870, 0.30737745780360330, 0.30741255024922370, 0.30744764258242300, 0.30753456989360700, 0.30756966121823570, 0.30760475243006300, 0.30763984352900260, 0.30772676440155470, 0.30776185449034580, 0.30779694446586890, 0.30783203432803830, 0.30791894875609600, 0.30795403760653900, 0.30798912634324820, 0.30802421496613690, 0.30811112294384080, 0.30814621055342570, 0.30818129804881030, 0.30821638542990880, 0.30830328695140150, 0.30833837331761970, 0.30837345956917150, 0.30840854570597060, 0.30849544076539690, 0.30853052588573960, 0.30856561089094960, 0.30860069578094170, 0.30868758437244920, 0.30872266824440820, 0.30875775200076950, 0.30884463502213770, 0.30887971775918460, 0.30891480038025340, 0.30894988288525860, 0.30903675942811910, 0.30907184091223540, 0.30910692227990740, 0.30914200353105010, 0.30922887358955640, 0.30926395381823570, 0.30929903393000590, 0.30933411392478090, 0.30942097749308990, 0.30945605646382730, 0.30949113531719010, 0.30952621405309190, 0.30961307112536330, 0.30964814883565430, 0.30968322642810510, 0.30977007790746430, 0.30980515447302470, 0.30984023092036560, 0.30987530724940120, 0.30996215222215420, 0.30999722752272700, 0.31003230270461450, 0.31006737776773180, 0.31015421622804500, 0.31018929026112770, 0.31022436417505970, 0.31031119702917850, 0.31034626991179760, 0.31038134267488780, 0.31041641531836290, 0.31050324164948750, 0.31053831326007810, 0.31057338475067490, 0.31060845612119160, 0.31069527592349410, 0.31073034625955610, 0.31076541647515880, 0.31085223065800170, 0.31088729983787250, 0.31092236889690570, 0.31095743783501530, 0.31104424547849390, 0.31107931337930160, 0.31111438115880650, 0.31114944881692350, 0.31120118317429010, 0.31123624991521730, 0.31127131653446290, 0.31130638303194170, 0.31139317849752670, 0.31142824395485900, 0.31146330929004520, 0.31149837450300020, 0.31158516341287060, 0.31162022758411030, 0.31165529163273980, 0.31174207490137710, 0.31177713790701620, 0.31181220078966690, 0.31184726354924330, 0.31193404025164430, 0.31196910196666300, 0.31200416355822860, 0.31209093461087880, 0.31212599515661260, 0.31216105557851490, 0.31219611587650070, 0.31228288035240180, 0.31231793960298890, 0.31235299872928070, 0.31243975754691930, 0.31247481562453960, 0.31250987357748600, 0.31254493140567350, 0.31259662673305720, 0.31263168363605830, 0.31266674041400780, 0.31270179706682040, 0.31278854363043880, 0.31282359923174130, 0.31285865470752820, 0.31294539560057830, 0.31298045002358210, 0.31301550432069320, 0.31305055849182530, 0.31313729278242940, 0.31317234589921500, 0.31320739888964320, 0.31329412750118470, 0.31332917943599510, 0.31336423124407020, 0.31339928292532530, 0.31345095417275100, 0.31348600492393650, 0.31352105554800980, 0.31355610604488510, 0.31364282235594700, 0.31367787179436940, 0.31371292110521650, 0.31379963172493400, 0.31383467997605770, 0.31386972809922860, 0.31395643302380870, 0.31399148008598630, 0.31402652701983290, 0.31406157382526350, 0.31414827211706820, 0.31418331785994400, 0.31421836347402600, 0.31430505606221890, 0.31434010061247720, 0.31437514503356470, 0.31446183191435790, 0.31449687527035220, 0.31453191849679850, 0.31456696159361050, 0.31461859966640500, 0.31465364182648910, 0.31468868385664830, 0.31472372575679650, 0.31481040027381210, 0.31484544110603890, 0.31488048180787780, 0.31496715060524580, 0.31500219023789580, 0.31503722973978030, 0.31512389281371900, 0.31515893124514690, 0.31519396954543350, 0.31528062689216140, 0.31531566412072420, 0.31535070121776800, 0.31538573818320710, 0.31547238885755920, 0.31550742474971720, 0.31554246050989390, 0.31562910544858890, 0.31566414013421760, 0.31569917468748860, 0.31578581388674960, 0.31582084736420690, 0.31585588070892970, 0.31594251416498190, 0.31597754643262560, 0.31601257856715810, 0.31609920627622770, 0.31613423733241670, 0.31616926825511720, 0.31625589021343360, 0.31629092005652500, 0.31632594976575260, 0.31641256596954360, 0.31644759459789780, 0.31648262309201240, 0.31651765145180040, 0.31656923353751000, 0.31660426094948630, 0.31663928822684630, 0.31667431536950410, 0.31672589291028240, 0.31676091910424130, 0.31679594516320700, 0.31683097108709490, 0.31688254408081650, 0.31691756905511790, 0.31695259389405030, 0.31698761859752840, 0.31707421079507280, 0.31710923441233250, 0.31714425789376240, 0.31723084431706510, 0.31726586671101420, 0.31730088896875710, 0.31738746961405710, 0.31742249078305660, 0.31745751181547480, 0.31754408667901190, 0.31757910662142520, 0.31761412642688080, 0.31770069550489600, 0.31773571421908500, 0.31777073279594100, 0.31785729608467810, 0.31789231356900680, 0.31792733091562680, 0.31801388841133010, 0.31804890466416180, 0.31808392077890880, 0.31813545731975030, 0.31817047247782420, 0.31820548749752260, 0.31824050237876130, 0.31829203435345570, 0.31832704827713610, 0.31836206206206650, 0.31839707570816160, 0.31844860311459180, 0.31848361580224470, 0.31851862835077160, 0.31860516359614040, 0.31864017504613010, 0.31867518635661890, 0.31876171579108170, 0.31879672600177460, 0.31883173607259200, 0.31891825969240190, 0.31895326866216480, 0.31898827749167650, 0.31907479529308790, 0.31910980302028660, 0.31914481060685970, 0.31923132258612870, 0.31926632906913110, 0.31930133541113250, 0.31938784156451700, 0.31942284680169040, 0.31945785189748790, 0.31954435222124640, 0.31957935621095870, 0.31961436005892060, 0.31966585166665360, 0.31970085454931370, 0.31973585728993340, 0.31982234690940640, 0.31985734854171750, 0.31989235003161370, 0.31997883381112850, 0.32001383419145980, 0.32004883442900170, 0.32013531236482250, 0.32017031149154360, 0.32020531047510180, 0.32029178256349370, 0.32032678043497600, 0.32036177816292040, 0.32041324764171080, 0.32044824440015120, 0.32048324101476470, 0.32056970236748850, 0.32060469786780570, 0.32063969322392120, 0.32072614871890400, 0.32076114295946900, 0.32079613705545840, 0.32088258668897160, 0.32091757966815660, 0.32095257250239180, 0.32100402440929270, 0.32103901627070920, 0.32107400798688660, 0.32116044685998040, 0.32119543745713540, 0.32123042790867800, 0.32131686091000540, 0.32135185024127310, 0.32138683942655440, 0.32147326655239250, 0.32150825461614630, 0.32159467683890440, 0.32162966378016770, 0.32166465057478180, 0.32175106691548820, 0.32178605258635930, 0.32182103811020780, 0.32190744856514470, 0.32194243296399930, 0.32197741721545770, 0.32202883850800850, 0.32206382178090680, 0.32209880490612020, 0.32218520455780430, 0.32222018655581060, 0.32225516840575820, 0.32234156216140250, 0.32237654288289320, 0.32246293171977270, 0.32249791131184410, 0.32253289075519480, 0.32261927368948790, 0.32265425200216990, 0.32268923016575890, 0.32274063001270160, 0.32277560719375400, 0.32281058422542510, 0.32289695632682760, 0.32293193222561920, 0.32296690797465680, 0.32305327416322190, 0.32308824877813190, 0.32312322324291460, 0.32317461003511370, 0.32320958351493620, 0.32324455684434290, 0.32333091218195290, 0.32336588437502360, 0.32340085641730650, 0.32345223477606480, 0.32348720583184060, 0.32352217673654020, 0.32360852121167890, 0.32364349097783560, 0.32367846059254330, 0.32372983051142350, 0.32376479913807890, 0.32379976761299740, 0.32388610121415780, 0.32392106854832790, 0.32395603573038880, 0.32404236339542380, 0.32407732943549000, 0.32416365215117360, 0.32419861704828770, 0.32423358179263210, 0.32431989856567290, 0.32435486216581910, 0.32444117398453620, 0.32447613643952670, 0.32451109874108800, 0.32459740461064990, 0.32463236576581050, 0.32471866667608110, 0.32475362668388410, 0.32478858653759870, 0.32487488149220520, 0.32490984019731710, 0.32499613018767000, 0.32503108774322340, 0.32506604514402930, 0.32515232917221410, 0.32518728542221870, 0.32527356448118930, 0.32530851957943540, 0.32534347452227450, 0.32539479366704770, 0.32542974761258030, 0.32546470140241830, 0.32555096951855380, 0.32558592215443610, 0.32562087463425330, 0.32567218529425870, 0.32570713677522930, 0.32574208809984830, 0.32582834526170300, 0.32586329543016800, 0.32594954761075940, 0.32598449662211740, 0.32601944547646460, 0.32610569167260150, 0.32614063936860010, 0.32622688057852760, 0.32626182711522320, 0.32629677349425030, 0.32634806333680360, 0.32638300871324250, 0.32641795393172600, 0.32650418415956640, 0.32653912821655370, 0.32662535345110540, 0.32666029634564260, 0.32669523908156720, 0.32674651658477090, 0.32678145831590570, 0.32681639988814080, 0.32690261412425420, 0.32693755453184720, 0.32697249478017000, 0.32702376376760220, 0.32705870300960100, 0.32709364209204330, 0.32714490724286380, 0.32717984531831610, 0.32721478323392570, 0.32730098145490930, 0.32733591820273400, 0.32737085479034560, 0.32742211141629630, 0.32745704699538500, 0.32749198241397430, 0.32754323519939600, 0.32757816960879750, 0.32761310385741280, 0.32769928603988990, 0.32773421911758120, 0.32782039628558290, 0.32785532819139900, 0.32789025993577250, 0.32794150034279740, 0.32797643107578780, 0.32801136164705000, 0.32809752776767080, 0.32813245716487080, 0.32821861826397080, 0.32825354648615950, 0.32828847454596380, 0.32833970256161320, 0.32837462960784070, 0.32840955649139790, 0.32846078065752390, 0.32849570652684010, 0.32853063223320080, 0.32861677724008490, 0.32865170176830000, 0.32873784174450320, 0.32877276509362360, 0.32880768827913400, 0.32885890003702440, 0.32889382220610200, 0.32892874421128340, 0.32897995211457780, 0.32901487310266380, 0.32904979392656880, 0.32913591778024200, 0.32917083742192160, 0.32925695623576780, 0.32929187469427520, 0.32932679298794550, 0.32937798846617560, 0.32941290574056300, 0.32944782284982770, 0.32949901446840010, 0.32953393055771930, 0.32956884648163200, 0.32965494914268090, 0.32968986388029420, 0.32977596149238480, 0.32981087504275150, 0.32989696760376770, 0.32993187996594170, 0.32996679216176950, 0.33001796747376930, 0.33005287864680450, 0.33008778965320910, 0.33013896109933020, 0.33017387108228080, 0.33020878089831550, 0.33025994847739060, 0.33029485726931100, 0.33032976589403040, 0.33041583720483760, 0.33045074463729650, 0.33053681088580420, 0.33057171712505750, 0.33065777830915570, 0.33069268335425830, 0.33077873947183690, 0.33081364332184480, 0.33084854700342870, 0.33089969437079430, 0.33093459702476310, 0.33096949951002340, 0.33102064300297680, 0.33105554445996170, 0.33109044574795430, 0.33114158536533150, 0.33117648562438980, 0.33121138571417090, 0.33129742051499700, 0.33133231940562270, 0.33141834912873370, 0.33145324681926180, 0.33153927146255300, 0.33157416795203940, 0.33166018751340810, 0.33169508280091030, 0.33178109727825240, 0.33181599136282810, 0.33190200075404150, 0.33193689363474900, 0.33197178634439020, 0.33202289793773170, 0.33205778961362860, 0.33209268111817520, 0.33214378882628040, 0.33217867929642510, 0.33221356959493550, 0.33226467341664630, 0.33229956268009750, 0.33233445177163000, 0.33238555170578810, 0.33242043976160440, 0.33245532764521870, 0.33250642369066690, 0.33254131053790750, 0.33257619721266240, 0.33262728936824370, 0.33266217500596840, 0.33269706047092300, 0.33274814873548260, 0.33278303316274960, 0.33281791741696370, 0.33286900178934560, 0.33290388500521570, 0.33293876804775000, 0.33298984852679730, 0.33302473053033130, 0.33305961236024490, 0.33311068894480480, 0.33314556973506250, 0.33318045035141650, 0.33323152304033460, 0.33326640261637640, 0.33330128201823130, 0.33335235081035370, 0.33338722917124080, 0.33342210735765760, 0.33350804939662520, 0.33354292636666520, 0.33359398736173940, 0.33362886328950060, 0.33366373904222490, 0.33371479613704620, 0.33374967084683730, 0.33378454538130780, 0.33383559857472540, 0.33387047206560760, 0.33390534538088630, 0.33395639467174990, 0.33399126694278570, 0.33402613903793490, 0.33407718442509340, 0.33411205547534540, 0.33414692634942790, 0.33419796783173220, 0.33423283766026280, 0.33426770731234150, 0.33431874488864160, 0.33435361349451420, 0.33438848192365200, 0.33443951559279970, 0.33447438297507760, 0.33450925018033740, 0.33456027994118530, 0.33459514609893160, 0.33463001207937720, 0.33468103793077650, 0.33471590286305520, 0.33475076761775060, 0.33480178955855580, 0.33483665326443010, 0.33487151679243920, 0.33492253482150350, 0.33495739730003880, 0.33499225960042530, 0.33504327371660210, 0.33507813496686290, 0.33516400624083690, 0.33519886626188690, 0.33528473239119100, 0.33531959118209630, 0.33540545216465120, 0.33544030972447660, 0.33552616555820460, 0.33556102188601620, 0.33564687256883860, 0.33568172766370200, 0.33573271915252110, 0.33576757319354300, 0.33580242705452430, 0.33585341462281890, 0.33588826742930740, 0.33592312005547250, 0.33597410370210140, 0.33600895527312300, 0.33604380666353940, 0.33609478638736120, 0.33612963672198250, 0.33616448687571640, 0.33621546267559090, 0.33625031177287880, 0.33633613256378450, 0.33637098042280660, 0.33645679604893700, 0.33649164266876110, 0.33657745312804580, 0.33661229850773910, 0.33666325947726270, 0.33669810379810660, 0.33673294793673780, 0.33678390497698710, 0.33681874805611890, 0.33685359095275640, 0.33690454406259420, 0.33693938589908210, 0.33697422755279440, 0.33702517673108280, 0.33706001732399620, 0.33714580297945550, 0.33718064232786340, 0.33726642280471380, 0.33730126090768580, 0.33735219916343860, 0.33738703620386230, 0.33742187306046770, 0.33747280738049690, 0.33750764317390490, 0.33754247878321290, 0.33759340916638440, 0.33762824371184670, 0.33771400451810730, 0.33774883781469500, 0.33783459343267400, 0.33786942547945710, 0.33795517590709270, 0.33799000670314260, 0.33804092220856310, 0.33807575193837310, 0.33811058148276090, 0.33816149304602570, 0.33819632152352550, 0.33828205743530070, 0.33831688465956150, 0.33840261537339990, 0.33843744134349490, 0.33848834195587560, 0.33852316685733810, 0.33855799157233880, 0.33860888823840800, 0.33864371188412990, 0.33867853534310880, 0.33872942806173660, 0.33876425045078960, 0.33884996142287890, 0.33888478255433650, 0.33897048831885130, 0.33900530819178660, 0.33905618994540580, 0.33909100874667330, 0.33912582736015920, 0.33917670516219140, 0.33921152270336390, 0.33929721390579320, 0.33933203018594510, 0.33938290096648880, 0.33941771617323290, 0.33945253119143710, 0.33950339801738130, 0.33953821196153310, 0.33962388858708330, 0.33965870126771760, 0.33974437267261980, 0.33977918408881080, 0.33983003993061530, 0.33986485027101630, 0.33989966042183980, 0.33995051230491090, 0.33998532137929940, 0.34007097818704510, 0.34010578599449670, 0.34019143757404740, 0.34022624411363740, 0.34027708500152690, 0.34031189046294680, 0.34039753265878280, 0.34043233685077410, 0.34051797381292210, 0.34055277673456140, 0.34060360661924400, 0.34063840846097770, 0.34067321011134180, 0.34072403603016740, 0.34075883659998310, 0.34084445892999880, 0.34087925822697310, 0.34093007710043560, 0.34096487531577240, 0.34099967333898330, 0.34105048824359570, 0.34108528518452640, 0.34117089286769470, 0.34120568853329680, 0.34125649638753830, 0.34129129096977180, 0.34132608535912410, 0.34137688924152540, 0.34141168254686690, 0.34149727556849170, 0.34153206759601960, 0.34158286442304950, 0.34161765536547900, 0.34165244611427310, 0.34170323896647680, 0.34173802862953030, 0.34182360697493200, 0.34185839535768940, 0.34190918114952800, 0.34194396844545960, 0.34202953736103110, 0.34206432337510510, 0.34211510210345690, 0.34214988702961870, 0.34218467176091530, 0.34223544650959450, 0.34227023015233860, 0.34235578436783230, 0.34239056672623900, 0.34244133440644990, 0.34247611567521880, 0.34251089674836910, 0.34256166044593290, 0.34259644042880530, 0.34268197992958530, 0.34271675862564330, 0.34276751524976370, 0.34280229285446020, 0.34288782290128600, 0.34292259921761040, 0.34297334876517770, 0.34300812398905700, 0.34304289901609060, 0.34309364457618130, 0.34312841851013140, 0.34321393381846230, 0.34324870646156530, 0.34329944494014030, 0.34333421648907690, 0.34341972232854980, 0.34345449258508420, 0.34350522397904160, 0.34353999314032850, 0.34362548950520640, 0.34366025737253600, 0.34371098167877570, 0.34374574844977710, 0.34378051502223330, 0.34383123533432620, 0.34386600080981610, 0.34395148240332360, 0.34398624658238610, 0.34403695980181570, 0.34407172288283200, 0.34415719498687980, 0.34419195676991670, 0.34424266289359000, 0.34427742357750180, 0.34436288618636720, 0.34439764557074740, 0.34444834459557590, 0.34448310287975160, 0.34456855598771790, 0.34460331297081090, 0.34465400489370840, 0.34468876077551980, 0.34477420437687360, 0.34480895895605190, 0.34485964377393520, 0.34489439725075370, 0.34492915052638590, 0.34497983133978610, 0.34501458351242280, 0.34506526122221150, 0.34510001229141190, 0.34513476315895350, 0.34518543686241760, 0.34522018662588760, 0.34527085722450440, 0.34530560588346190, 0.34534035434028860, 0.34539102093074140, 0.34542576828242050, 0.34547643176679030, 0.34551117801288260, 0.34554592405637100, 0.34559658353073930, 0.34563132846800610, 0.34568198483505750, 0.34571672866566150, 0.34575147229319080, 0.34580212464840440, 0.34583686716863720, 0.34588751641530170, 0.34592225782779820, 0.34595699903674840, 0.34600764426974000, 0.34604238437031970, 0.34609302649353090, 0.34612776548530100, 0.34616250427305330, 0.34621314238075890, 0.34624788005906750, 0.34629851505576300, 0.34633325162418820, 0.34641861896748480, 0.34645335422090620, 0.34650398208802490, 0.34653871623049120, 0.34662407401595110, 0.34665880684186990, 0.34670942757635500, 0.34674415929024760, 0.34682950751220140, 0.34686423790800490, 0.34691485150680170, 0.34694958078950790, 0.34703491944229010, 0.34706964740536600, 0.34712025386542380, 0.34715498071433120, 0.34720558405797980, 0.34724030979228180, 0.34727503532001920, 0.34732563463828870, 0.34736035905078850, 0.34741095525142500, 0.34744567854824950, 0.34753099381147560, 0.34756571578495910, 0.34761630483953980, 0.34765102569627900, 0.34773633137107360, 0.34777105090293410, 0.34782163280841690, 0.34785635122246550, 0.34790693000738380, 0.34794164730318220, 0.34797636439081400, 0.34802693914416050, 0.34806165511291280, 0.34811222674447520, 0.34814694159391070, 0.34823222383288430, 0.34826693735373700, 0.34831750182890930, 0.34835221422937850, 0.34843748686071230, 0.34847219793106350, 0.34852275524681390, 0.34855746519571620, 0.34860801938676120, 0.34864272821377810, 0.34872798698432690, 0.34876269447906250, 0.34881324150644130, 0.34884794787822650, 0.34893319702759890, 0.34896790206556950, 0.34901844192625720, 0.34905314584021310, 0.34910368257328140, 0.34913838536278720, 0.34922362063237160, 0.34925832208590180, 0.34930885164804600, 0.34934355197606290, 0.34939407840889000, 0.34942877761095870, 0.34951399898967010, 0.34954869685360410, 0.34959921611127870, 0.34963391284820170, 0.34968442897486580, 0.34971912458434300, 0.34980433206110940, 0.34983902633029510, 0.34988953527758420, 0.34992422841826270, 0.35000942624458610, 0.35004411804344400, 0.35009461980834830, 0.35012931047763800, 0.35017980910863340, 0.35021449864792100, 0.35029968255337580, 0.35033437074868900, 0.35038486219308740, 0.35041954925733790, 0.35047003756613970, 0.35050472349889460, 0.35058989347244320, 0.35062457805907060, 0.35067505917706900, 0.35070974263114190, 0.35076022061185830, 0.35079490293294300, 0.35088005896356040, 0.35091473993636720, 0.35096521072208050, 0.35099989056084050, 0.35105035820758920, 0.35108503691187030, 0.35117017898854370, 0.35120485634239800, 0.35125531678994870, 0.35128999300826650, 0.35134045031517220, 0.35137512539752120, 0.35142557956330320, 0.35146025350925150, 0.35154537734254540, 0.35158004993529500, 0.35163049689649170, 0.35166516835178450, 0.35171561217018040, 0.35175028248758440, 0.35183539234178410, 0.35187006130384410, 0.35192049791347380, 0.35195516573659000, 0.35200559920174440, 0.35204026588548520, 0.35212536174962070, 0.35221045332808740, 0.35224511751391130, 0.35229554061997740, 0.35233020366494070, 0.35238062362438270, 0.35241528552805430, 0.35250036310234430, 0.35253502364576490, 0.35258543638690370, 0.35262009578797900, 0.35267050538082540, 0.35270516363912630, 0.35275557008320310, 0.35279022719829810, 0.35287528646458940, 0.35290994221667220, 0.35296034143709490, 0.35299499604491990, 0.35304539211490800, 0.35308004557804570, 0.35313043849712420, 0.35316509081514480, 0.35325013175531300, 0.35328478270756340, 0.35333516839764500, 0.35336981820372740, 0.35342020074123780, 0.35345484940072290, 0.35350522878518750, 0.35353987629764520, 0.35362489889359240, 0.35365954503752530, 0.35370991718766130, 0.35374456218351740, 0.35379493117894880, 0.35382957502630000, 0.35387994086655280, 0.35391458356497040, 0.35399958779862680, 0.35403422912576650, 0.35408458772636930, 0.35411922790352610, 0.35416958334729540, 0.35420422237404180, 0.35425457466050490, 0.35428921253641190, 0.35437419838973790, 0.35445917993311860, 0.35449381528311240, 0.35454415716565480, 0.35457879136333510, 0.35462913008644810, 0.35466376313138610, 0.35471409869459830, 0.35474873058636740, 0.35483369372737950, 0.35491865255352630, 0.35495328191368820, 0.35500360706390820, 0.35503823526942810, 0.35508855725762920, 0.35512318430807930, 0.35517350313379100, 0.35520812902874500, 0.35529306943052920, 0.35537800551253440, 0.35541262887019600, 0.35546293727386630, 0.35549755947456040, 0.35554786471362790, 0.35558248575692850, 0.35563278783092500, 0.35566740771640550, 0.35571770662486280, 0.35575232535209630, 0.35583723866310760, 0.35587185600561790, 0.35592214764854370, 0.35595676383176540, 0.35600705230751220, 0.35604166733101930, 0.35609195263911950, 0.35612656650248600, 0.35617684864247180, 0.35621146134527270, 0.35626174031667760, 0.35629635185848680, 0.35638123804123580, 0.35641584819435630, 0.35646611989262880, 0.35650072888371680, 0.35655099741177310, 0.35658560524040400, 0.35663587059777820, 0.35667047726352680, 0.35672073944975280, 0.35675534495219430, 0.35680560396680680, 0.35684020830551650, 0.35692506732260250, 0.35700992200256410, 0.35704452378385520, 0.35709477234451040, 0.35712937296060680, 0.35717961834755340, 0.35721421779803030, 0.35726446001080390, 0.35729905829523760, 0.35734929733337340, 0.35738389445133970, 0.35743413031437430, 0.35746872626544940, 0.35755355373667860, 0.35763837686414100, 0.35772319564694900, 0.35775778786453030, 0.35780801008421590, 0.35784260113302250, 0.35789282017505620, 0.35792741005466460, 0.35797762591858360, 0.35801221462857090, 0.35806242731391250, 0.35809701485385560, 0.35814722436015840, 0.35818181072963440, 0.35823201705643580, 0.35826660225502190, 0.35835138942913420, 0.35843617225108700, 0.35847075487475500, 0.35852095071999690, 0.35855553217131820, 0.35860572483497950, 0.35864030511353270, 0.35869049459515370, 0.35872507370051600, 0.35877525999963540, 0.35880983793138500, 0.35886002104754270, 0.35889459780525760, 0.35894477773799370, 0.35897935332125260, 0.35902953007010700, 0.35906410447848770, 0.35911427804300080, 0.35914885127608210, 0.35923359371315480, 0.35931833178882530, 0.35940306550221400, 0.35948779485244040, 0.35952236314589520, 0.35957251983862510, 0.35960708695448610, 0.35965724045988900, 0.35969180639773580, 0.35974195671535400, 0.35977652147476590, 0.35982666860414120, 0.35986123218469720, 0.35991137612537200, 0.35994593852665190, 0.35999607927816920, 0.36003064049975300, 0.36008077806165510, 0.36011533810312280, 0.36016547247495350, 0.36020003133588450, 0.36025016251718640, 0.36028472019716110, 0.36033484818747830, 0.36036940468607700, 0.36041952948495220, 0.36045408480175560, 0.36053876054332170, 0.36062343190989980, 0.36070809890061480, 0.36079276151459270, 0.36087741975095910, 0.36096207360884020, 0.36099662158856830, 0.36104672308736190, 0.36108126988217250, 0.36113136818565210, 0.36116591379512560, 0.36121600890283640, 0.36125055332655550, 0.36130064523804380, 0.36133518847558940, 0.36138527719040110, 0.36141981924135500, 0.36146990475903710, 0.36150444562298110, 0.36155452794307980, 0.36158906761959560, 0.36163914674165830, 0.36167368523032830, 0.36172376115390200, 0.36175829845430830, 0.36180837117894010, 0.36184290729066540, 0.36189297681590200, 0.36192751173852810, 0.36197757806391950, 0.36201211179702950, 0.36206217492212160, 0.36209670746529760, 0.36214676738963940, 0.36218129874246500, 0.36223135546560480, 0.36226588562766220, 0.36231593914914920, 0.36235046812002180, 0.36240051843940480, 0.36243504621867520, 0.36248509333550300, 0.36251961992275490, 0.36256966383657720, 0.36260418923139400, 0.36265422994175970, 0.36268875414372490, 0.36273879165018420, 0.36277331465888130, 0.36282334896098380, 0.36285787077599670, 0.36290790187329370, 0.36294242249420590, 0.36299245038624730, 0.36302696981264320, 0.36307699449897880, 0.36311151273044270, 0.36316153421062390, 0.36319605124674000, 0.36324606952031810, 0.36328058536067060, 0.36333060042719690, 0.36336511507137010, 0.36341512693039630, 0.36344964037797490, 0.36349964902905220, 0.36353416127962120, 0.36358416672230210, 0.36361867777544600, 0.36366868000928210, 0.36370318986458620, 0.36375318888913100, 0.36378769754618010, 0.36383769336098520, 0.36387220081936400, 0.36392219342398300, 0.36395669968327790, 0.36400668907726350, 0.36409118031996510, 0.36417566715122640, 0.36426014957018740, 0.36434462757598760, 0.36442910116776720, 0.36447907224521750, 0.36451357034466750, 0.36456353820858930, 0.36459803510582760, 0.36464799975577630, 0.36468249545038990, 0.36473245688592090, 0.36476695137749600, 0.36481690959816320, 0.36485140288628700, 0.36490135789164720, 0.36493584997590520, 0.36498580176551370, 0.36502029264549400, 0.36507024121890550, 0.36510473089419480, 0.36515467625096690, 0.36518916472115200, 0.36523910686083970, 0.36527359412550840, 0.36532353304766940, 0.36535801910640860, 0.36540795481059950, 0.36544243966299600, 0.36549237214877370, 0.36557678506133760, 0.36566119354743520, 0.36574559760621360, 0.36579551817407550, 0.36582999723681770, 0.36587991458428030, 0.36591439243839360, 0.36596430656501580, 0.36599878321008780, 0.36604869411542800, 0.36608316955104750, 0.36613307723466460, 0.36616755146041990, 0.36621745592187200, 0.36625192893735200, 0.36630183017619870, 0.36633630198099240, 0.36638619999679240, 0.36642067059048830, 0.36647056538280190, 0.36655492633337600, 0.36663928284766360, 0.36672363492481390, 0.36677351778154980, 0.36680798256397730, 0.36685786219525270, 0.36689232576430320, 0.36694220216967950, 0.36697666452494320, 0.36702653770398090, 0.36706099884504680, 0.36711086879730740, 0.36714532872376630, 0.36719519544881010, 0.36722965416025220, 0.36727951765764220, 0.36736383542295470, 0.36744814874390040, 0.36749800352039010, 0.36753245761963210, 0.36758230916694090, 0.36761676204930200, 0.36766661036699340, 0.36770106203206510, 0.36775090711970070, 0.36778535756707370, 0.36783519942421780, 0.36786964865348280, 0.36791948727969810, 0.36800377068529680, 0.36808804964016950, 0.36813787953736150, 0.36817232414347000, 0.36822215080821280, 0.36825659419435520, 0.36830641762621360, 0.36834085979198060, 0.36839067999051930, 0.36842512093550320, 0.36847493790028710, 0.36850937762407910, 0.36855919135467280, 0.36864344035283470, 0.36869324858158570, 0.36872768489393000, 0.36877748988741090, 0.36881192497711690, 0.36886172673489410, 0.36889616060155400, 0.36894595912319260, 0.36898039176639940, 0.36903018705146580, 0.36906461847081240, 0.36911441051887360, 0.36919862952457440, 0.36924841606662580, 0.36928284406772920, 0.36933262737169810, 0.36936705414749750, 0.36941683421295260, 0.36945125976304070, 0.36950103658954840, 0.36953546091351850, 0.36958523450064710, 0.36966942794541130, 0.36971919602301800, 0.36975361692300130, 0.36980338176015650, 0.36983780143257960, 0.36988756302885160, 0.36992198147330980, 0.36997173982826630, 0.37000615704435380, 0.37005591215756470, 0.37014008001590870, 0.37018982961609800, 0.37022424340246360, 0.37027398975983750, 0.37030840231639220, 0.37035814543052060, 0.37039255675686000, 0.37044229662731270, 0.37047670672303190, 0.37052644334937900, 0.37061058559588410, 0.37066031670572070, 0.37069472336599390, 0.37074445123065920, 0.37077885665887520, 0.37082858127793870, 0.37086298547369310, 0.37091270684672760, 0.37099682793619200, 0.37104654378987390, 0.37108094454549940, 0.37113065715208750, 0.37116505667381640, 0.37121476603288330, 0.37124916432031240, 0.37129887043143080, 0.37138297034689690, 0.37143267093582820, 0.37146706577845100, 0.37151676311837260, 0.37155115672526310, 0.37160085081574710, 0.37163524318650200, 0.37168493402712220, 0.37176901275166750, 0.37181869806727450, 0.37185308698855400, 0.37190276905323880, 0.37193715673695150, 0.37198683555028890, 0.37202122199603260, 0.37207089755759520, 0.37215495507433140, 0.37220462510806220, 0.37223900809966800, 0.37228867488056930, 0.37232305663277820, 0.37237272016042490, 0.37245676094680200, 0.37250641894443360, 0.37254079723887390, 0.37259045198219840, 0.37262482903581430, 0.37267448052440620, 0.37270885633679670, 0.37275850457023290, 0.37284252411885290, 0.37289216681946880, 0.37292653916944030, 0.37297617861384960, 0.37301054972117130, 0.37306018590895070, 0.37314418870394750, 0.37319381935673480, 0.37322818699801650, 0.37327781439312500, 0.37331218079033400, 0.37336180492734180, 0.37344579095856160, 0.37349540955841000, 0.37352977248596190, 0.37357938782666300, 0.37361374950872130, 0.37366336158985320, 0.37369772202601650, 0.37374733084715830, 0.37379693738896930, 0.37383129559775760, 0.37388089887895460, 0.37391525584082950, 0.37396485586099250, 0.37399921157555330, 0.37404880833426150, 0.37409840281294570, 0.37413275629794280, 0.37418234751454990, 0.37421669975121530, 0.37426628770532580, 0.37435022338445490, 0.37439980579493360, 0.37443415455111770, 0.37448373369805970, 0.37451808120449520, 0.37456765708748120, 0.37465157596238160, 0.37470114629958800, 0.37473549032194180, 0.37478505739415400, 0.37481940016534670, 0.37486896397214520, 0.37495286603274490, 0.37500242429162060, 0.37503676357513650, 0.37508631856756360, 0.37512065659850440, 0.37517020832406480, 0.37521975776704700, 0.37525409356030930, 0.37530363973580760, 0.37533797427548150, 0.37538751718307920, 0.37547139010804720, 0.37552092746406540, 0.37555525850989790, 0.37560479259698310, 0.37563912238781660, 0.37568865320555220, 0.37573818173954120, 0.37577250928896060, 0.37582203455298580, 0.37585636084639480, 0.37590588284004060, 0.37598972659989260, 0.37603924303831570, 0.37607356583173090, 0.37612307899874480, 0.37615740053474320, 0.37620691042993440, 0.37625641804021570, 0.37629073733107170, 0.37634024166891690, 0.37637455970134610, 0.37642406076634160, 0.37650787533167910, 0.37655737083782270, 0.37659168536411930, 0.37664117759638740, 0.37672497982083270, 0.37677446649274500, 0.37680877751034880, 0.37685826090736190, 0.37689257066412650, 0.37694205078582800, 0.37699152862098430, 0.37702583612733560, 0.37707531068657080, 0.37710961693107680, 0.37715908821397800, 0.37720855720985700, 0.37724286120239950, 0.37729232692133640, 0.37732662965102910, 0.37737609209261100, 0.37745985272287610, 0.37750930959899810, 0.37754360881132380, 0.37759306240907350, 0.37767681067611570, 0.37772625870691240, 0.37776055439932020, 0.37780999915072660, 0.37789373504948830, 0.37794317423245160, 0.37797746640239260, 0.37802690230494960, 0.37811062583037750, 0.37816005616300340, 0.37819434480793150, 0.37824377185913760, 0.37832748300618530, 0.37837690448597420, 0.37841118960334530, 0.37846060780070090, 0.37854430656433010, 0.37859371918878540, 0.37862800077605860, 0.37867741011707030, 0.37876109649224610, 0.37881050025887650, 0.37884477831351140, 0.37889417879568850, 0.37897785277738370, 0.37902724768370090, 0.37906152220316120, 0.37911091382401800, 0.37916030315359950, 0.37919457540721200, 0.37924396145073220, 0.37927823243248320, 0.37932761518953600, 0.37937699565484620, 0.37941126436921330, 0.37946064154745680, 0.37949490898896630, 0.37954428287973710, 0.37959365447829860, 0.37962791965088970, 0.37967728796138040, 0.37971155186011750, 0.37976091688213250, 0.37981027961147210, 0.37984454123975770, 0.37989390068002380, 0.37997751718424940, 0.38002687104189730, 0.38006112912335190, 0.38011047969092520, 0.38015982796508640, 0.38019408377363190, 0.38024342875712230, 0.38027768328922190, 0.38032702498163830, 0.38037636438017950, 0.38041061663784030, 0.38045995274471230, 0.38054353653973440, 0.38059286706019610, 0.38062711576445210, 0.38067644299224760, 0.38072576792543410, 0.38076001435279960, 0.38080933599272700, 0.38084358114106070, 0.38089289948732550, 0.38094221553852120, 0.38097645840843950, 0.38102577116538040, 0.38110932221756140, 0.38115862938431730, 0.38119286869427300, 0.38124217256578130, 0.38129147414149080, 0.38132571117058510, 0.38137500945045620, 0.38140924519793780, 0.38145854018156980, 0.38150783286894450, 0.38154206633404330, 0.38159135572458870, 0.38164064281860930, 0.38167487400040370, 0.38172415779700500, 0.38175838769560020, 0.38180766819438360, 0.38185694639618410, 0.38189117400995580, 0.38194044891335040, 0.38198972151949450, 0.38202394684752380, 0.38207321615467350, 0.38210744019791770, 0.38215670620567430, 0.38220596991572470, 0.38224019167170990, 0.38228945208178080, 0.38233871019387910, 0.38237292966168750, 0.38242218447321980, 0.38245640265466040, 0.38250565416522730, 0.38255490337736900, 0.38258911926911830, 0.38263836517970960, 0.38268760879161020, 0.38272182239275110, 0.38277106270251670, 0.38285451202294310, 0.38290374673103320, 0.38293795675210590, 0.38298718815708010, 0.38303641726264620, 0.38307062499068360, 0.38311985079255060, 0.38320327972883340, 0.38325249992674660, 0.38328670407071270, 0.38333592096394770, 0.38338513555705990, 0.38341933740556840, 0.38346854869342150, 0.38351775768088890, 0.38355195723302580, 0.38360116291465250, 0.38368456355048370, 0.38373376362503940, 0.38376795958760200, 0.38381715635534250, 0.38386635082198600, 0.38390054448575910, 0.38394973564500750, 0.38399892450289700, 0.38403311586697020, 0.38408230141688420, 0.38416567372864120, 0.38421485366838160, 0.38424904143738800, 0.38429821806818250, 0.38434739239691100, 0.38438157786380420, 0.38443074888300830, 0.38447991759988470, 0.38451410076375620, 0.38456326617053190, 0.38461242927472020, 0.38464661013466120, 0.38469576992817190, 0.38477910597393760, 0.38482826015334800, 0.38486243741124290, 0.38491158827900740, 0.38496073684348140, 0.38499491179504020, 0.38504405704729420, 0.38509319999599800, 0.38512737264031440, 0.38517651227622390, 0.38522564960832510, 0.38525981994449250, 0.38530895396322560, 0.38535808567789180, 0.38539225370500520, 0.38544138210573010, 0.38552467391928490, 0.38557379670117140, 0.38560796111778400, 0.38565708058476690, 0.38570619774698440, 0.38574035985214490, 0.38578947369888780, 0.38583858524060850, 0.38587274503341410, 0.38592185325908810, 0.38597095917948390, 0.38600511665903170, 0.38605421926281050, 0.38610331956105430, 0.38613747472644160, 0.38618657170749900, 0.38623566638276470, 0.38626981923309080, 0.38631891059060090, 0.38640215017642720, 0.38645123590956490, 0.38653446755390130, 0.38658354766184440, 0.38661769457430550, 0.38666677136296790, 0.38671584584489370, 0.38674999043900510, 0.38679906160108230, 0.38684813045616800, 0.38688227273103110, 0.38693133826570250, 0.38698040149312830, 0.38701454144784440, 0.38706360135428940, 0.38711265895323530, 0.38714679658690690, 0.38719585086430670, 0.38724490283395370, 0.38727903814568320, 0.38732808679321920, 0.38737713313274960, 0.38741126612163960, 0.38746030913849480, 0.38750934984709210, 0.38754348051224710, 0.38759251789760500, 0.38764155297445190, 0.38767568131497620, 0.38772471306802110, 0.38777374251230400, 0.38780786852730200, 0.38785689464721930, 0.38790591845812330, 0.38794004214670110, 0.38798906263267730, 0.38803808080938930, 0.38807220217065220, 0.38812121702187460, 0.38817022956358270, 0.38820434859663750, 0.38825335781229470, 0.38830236471818690, 0.38833648142214060, 0.38838548500142170, 0.38843448627068740, 0.38846860064464830, 0.38851759858674320, 0.38856659421857290, 0.38860070626164880, 0.38864969856574920, 0.38869868855933460, 0.38873279827063390, 0.38878178493593050, 0.38883076929046450, 0.38886487666909670, 0.38891385769478380, 0.38896283640945890, 0.38899694145453410, 0.38904591683980520, 0.38909488991381500, 0.38912899262444390, 0.38917796236849310, 0.38922692980103390, 0.38926103017632720, 0.38930999427835070, 0.38935895606861820, 0.38939305410768730, 0.38944201256688160, 0.38949096871407300, 0.38952506441603020, 0.38957401723159220, 0.38962296773490520, 0.38965706109886340, 0.38970600826999280, 0.38975495312862570, 0.38983798567959390, 0.38988692489274690, 0.38996994945790960, 0.39001888302478370, 0.39006781427859860, 0.39010189960245590, 0.39015082752225260, 0.39019975312874510, 0.39023383611075190, 0.39028275838267330, 0.39033167834104580, 0.39036575898031880, 0.39041467560356860, 0.39046358991302520, 0.39049766820868020, 0.39054657918246240, 0.39059548784220800, 0.39062956379336140, 0.39067846911688250, 0.39072737212612200, 0.39081034540435680, 0.39085924276229770, 0.39090813780564390, 0.39094220804241800, 0.39099109974826720, 0.39103998913927950, 0.39107405702859970, 0.39112294308156610, 0.39117182681945230, 0.39120589236043900, 0.39125477275973170, 0.39130365084370240, 0.39133771403547400, 0.39138658878030330, 0.39143546120956880, 0.39151839114082420, 0.39156725791459620, 0.39161612237249200, 0.39165017983883880, 0.39169904095632910, 0.39174789975770390, 0.39178195487189340, 0.39183081033231660, 0.39187966347638250, 0.39191371623753830, 0.39196256604010770, 0.39201141352608060, 0.39204546393332530, 0.39209430807725670, 0.39214314990435150, 0.39219198941454070, 0.39222603644131800, 0.39227487260875100, 0.39232370645903900, 0.39235775112984920, 0.39240658163683850, 0.39245540982644370, 0.39248945214041040, 0.39253827698617450, 0.39258709951431520, 0.39266995865432240, 0.39271877552021850, 0.39276759006818620, 0.39280162663884800, 0.39285043784172040, 0.39289924672642530, 0.39293328093731950, 0.39298208647638930, 0.39303088969705490, 0.39311372142179760, 0.39316251897764530, 0.39321131421478400, 0.39324534267551780, 0.39329413456577240, 0.39334292413708080, 0.39337695023512820, 0.39342573645901380, 0.39347452036371720, 0.39352330194917150, 0.39355732465494810, 0.39360610289227190, 0.39365487881011150, 0.39368889915115870, 0.39373767172032980, 0.39378644196978070, 0.39382045994522860, 0.39386922684547580, 0.39391799142576640, 0.39396675368603450, 0.39400076826529630, 0.39404952717565590, 0.39409828376575870, 0.39413229597738320, 0.39418104921704180, 0.39422980013620940, 0.39427854873481870, 0.39431255754751640, 0.39436130279498010, 0.39441004572165170, 0.39444405216467650, 0.39449279173966800, 0.39454152899363360, 0.39459026392650890, 0.39462426696787190, 0.39467299854836620, 0.39472172780753570, 0.39475572847719430, 0.39480445438345080, 0.39485317796814930, 0.39493589649649240, 0.39498461440595680, 0.39503332999356720, 0.39506732488509850, 0.39511603711856530, 0.39516474702994540, 0.39524744610358540, 0.39529615033797370, 0.39534485224997830, 0.39537884135862990, 0.39542753991526410, 0.39547623614928500, 0.39552493006062580, 0.39555891575943500, 0.39560760631471090, 0.39565629454707770, 0.39569027786810550, 0.39573896274387730, 0.39578764529650970, 0.39583632552593830, 0.39587030543440490, 0.39591898230654560, 0.39596765685525300, 0.39600163438391900, 0.39605030557481110, 0.39609897444203990, 0.39614764098554120, 0.39618161509893350, 0.39623027828392900, 0.39627893914496790, 0.39632759768198580, 0.39636156837854930, 0.39641022355637210, 0.39645887640994480, 0.39649284472353700, 0.39654149421738880, 0.39659014138676350, 0.39663878623159780, 0.39667275112565470, 0.39672139261007940, 0.39677003176973600, 0.39685263007753220, 0.39690126355125930, 0.39694989469992830, 0.39698385378676460, 0.39703248157381340, 0.39708110703557640, 0.39712973017199010, 0.39716368583504260, 0.39721230560915050, 0.39726092305768400, 0.39730953818057970, 0.39734349041830170, 0.39739210217820680, 0.39744071161224830, 0.39747466146067890, 0.39752326753120980, 0.39757187127565140, 0.39762047269394120, 0.39765441911434910, 0.39770301716844530, 0.39775161289616470, 0.39780020629744420, 0.39783414928828700, 0.39788273932469200, 0.39793132703443310, 0.39797991241744770, 0.39801385197718550, 0.39806243399464560, 0.39811101368515450, 0.39819352717574540, 0.39824210117300770, 0.39829067284303360, 0.39832460657540010, 0.39837317487867460, 0.39842174085449060, 0.39847030450278530, 0.39850423479982680, 0.39855279508069290, 0.39860135303381530, 0.39864990865913210, 0.39868383551931420, 0.39873238777652580, 0.39878093770570990, 0.39882948530680470, 0.39886340872859420, 0.39891195296090840, 0.39896049486491230, 0.39900903444054460, 0.39904295442240940, 0.39909149062858690, 0.39914002450616990, 0.39918855605509980, 0.39922247259551000, 0.39927100077431120, 0.39931952662423780, 0.39940196324265440, 0.39945048339284490, 0.39949900121387930, 0.39958142635861170, 0.39962993847895790, 0.39967844826986740, 0.39976086193815760, 0.39980936602742880, 0.39985786778698330, 0.39989177158917490, 0.39994026997607790, 0.39998876603304540, 0.40003725976001720, 0.40007116011351390, 0.40011965046716660, 0.40016813849060430, 0.40021662418376760, 0.40029900340622510, 0.40034748339491010, 0.40039596105304260, 0.40047832878806580, 0.40052680074077660, 0.40057527036265790, 0.40062373765365040, 0.40065762660750870, 0.40070609052302650, 0.40075455210743760, 0.40080301136068350, 0.40083689685938180, 0.40088535273649030, 0.40093380628221640, 0.40098225749650160, 0.40101613953852340, 0.40106458737600780, 0.40111303288183570, 0.40116147605594730, 0.40119535463977860, 0.40124379443642880, 0.40129223190114600, 0.40134066703387360, 0.40137454215800310, 0.40142297391260810, 0.40147140333500760, 0.40151983042514260, 0.40155370208805850, 0.40160212579941330, 0.40165054717828890, 0.40169896622462630, 0.40178125009171790, 0.40182966342586470, 0.40187807442720200, 0.40192648309567090, 0.40196034678440500, 0.40200875207262270, 0.40205715502775810, 0.40210555564975370, 0.40213941587236730, 0.40218781311345670, 0.40223620802119210, 0.40228460059551740, 0.40231845735050380, 0.40236684654326790, 0.40241523340240800, 0.40246361792786730, 0.40251200011958800, 0.40254585235696960, 0.40259423116632080, 0.40264260764172150, 0.40269098178311330, 0.40272483054948090, 0.40277320130785160, 0.40282156973200270, 0.40286993582187670, 0.40290378111573020, 0.40295214382193250, 0.40300050419364590, 0.40304886223081480, 0.40309721793338100, 0.40313105870350250, 0.40317941102159320, 0.40322776100487110, 0.40327610865327960, 0.40330994594751060, 0.40335829021079460, 0.40340663213899970, 0.40345497173206800, 0.40350330898994320, 0.40353714175621050, 0.40358547562816160, 0.40363380716471050, 0.40368213636580080, 0.40371596565280850, 0.40376429146732780, 0.40381261494618000, 0.40386093608930780, 0.40390925489665560, 0.40394307965147700, 0.40399139507145750, 0.40403970815544950, 0.40408801890339590, 0.40412184017559750, 0.40417014753553320, 0.40421845255921700, 0.40426675524659230, 0.40431505559760320, 0.40434887233340620, 0.40439716929561200, 0.40444546392124700, 0.40449375621025520, 0.40452756946008410, 0.40457585835964490, 0.40462414492237210, 0.40467242914821050, 0.40472071103710490, 0.40475451974633330, 0.40480279824498920, 0.40485107440649470, 0.40489934823079460, 0.40494761971783310, 0.40498142388412690, 0.40502969198013880, 0.40507795773868410, 0.40512622115970690, 0.40516002183482310, 0.40520828186418290, 0.40525653955581560, 0.40530479490966700, 0.40535304792568130, 0.40538684405367530, 0.40543509367724020, 0.40548334096276400, 0.40553158591019240, 0.40557982851947100, 0.40561362009801750, 0.40566185931406120, 0.40571009619175140, 0.40575833073103360, 0.40580656293185240, 0.40584034995863000, 0.40588857876543240, 0.40593680523356850, 0.40598502936298510, 0.40603325115362740, 0.40606703362631690, 0.40611525202216100, 0.40616346807902790, 0.40621168179686520, 0.40629367109190190, 0.40634187907507750, 0.40639008471896610, 0.40643828802351410, 0.40647206243789410, 0.40652026234623640, 0.40656845991503580, 0.40661665514424040, 0.40666484803379630, 0.40669861788761670, 0.40674680738018950, 0.40679499453291280, 0.40684317934573220, 0.40689136181859560, 0.40697330618465620, 0.40702148291960630, 0.40706965731434610, 0.40711782936882320, 0.40719975875055270, 0.40724792506603800, 0.40729608904100730, 0.40734425067540860, 0.40739240996918850, 0.40742616506882030, 0.40747432096315340, 0.40752247451666620, 0.40757062572930600, 0.40761877460102140, 0.40765252513041800, 0.40770067060191810, 0.40774881373229370, 0.40779695452149410, 0.40784509296946580, 0.40787883892633270, 0.40792697397332180, 0.40797510667888570, 0.40802323704297070, 0.40807136506552520, 0.40810510644757150, 0.40815323106837830, 0.40820135334745730, 0.40824947328475740, 0.40829759088022630, 0.40834570613381180, 0.40837944187812070, 0.40842755372905020, 0.40847566323789960, 0.40852377040461840, 0.40857187522915330, 0.40860560639360730, 0.40865370781472500, 0.40870180689346450, 0.40874990362977430, 0.40879799802360160, 0.40883172460591780, 0.40887981559556830, 0.40892790424254230, 0.40897599054678770, 0.40902407450825440, 0.40907215612689050, 0.40910587706268690, 0.40915395527624430, 0.40920203114677710, 0.40925010467423440, 0.40929817585856400, 0.40933189220721060, 0.40937995998570660, 0.40942802542088210, 0.40947608851268630, 0.40952414926106770, 0.40957220766597690, 0.40960591836208620, 0.40965397336026470, 0.40970202601477640, 0.40975007632557330, 0.40979812429260210, 0.40984616991581500, 0.40987987495610940, 0.40992791717169600, 0.40997595704327400, 0.41002399457079200, 0.41007202975420030, 0.41010573019962480, 0.41015376197465800, 0.41020179140538870, 0.41024981849176830, 0.41029784323374760, 0.41034586563127400, 0.41037956041489510, 0.41042757940315710, 0.41047559604677650, 0.41052361034570370, 0.41057162229988890, 0.41061963190928360, 0.41065332102784020, 0.41070132722708240, 0.41074933108134290, 0.41079733259057230, 0.41084533175472040, 0.41089332857374020, 0.41092701202397690, 0.41097500543195860, 0.41102299649462120, 0.41107098521191570, 0.41111897158379240, 0.41116695561020200, 0.41120063338886830, 0.41124861400335900, 0.41129659227219420, 0.41134456819532570, 0.41139254177270260, 0.41144051300427830, 0.41147418510812950, 0.41152215292690650, 0.41157011839969280, 0.41161808152644050, 0.41166604230710110, 0.41171400074162550, 0.41174766716742350, 0.41179562218827220, 0.41184357486279720, 0.41189152519095100, 0.41193947317268450, 0.41198741880794940, 0.41202107955246070, 0.41206902177317620, 0.41211696164723650, 0.41216489917459370, 0.41221283435520050, 0.41226076718900750, 0.41230869767596730, 0.41234235166738900, 0.41239027873878940, 0.41243820346315660, 0.41248612584044300, 0.41253404587060190, 0.41258196355358400, 0.41261561185672840, 0.41266352612328160, 0.41271143804247420, 0.41275934761425770, 0.41280725483858530, 0.41285515971540970, 0.41290306224468310, 0.41293670378659040, 0.41298460289843120, 0.41303249966253690, 0.41308039407886120, 0.41312828614735550, 0.41317617586797420, 0.41320981171463930, 0.41325769801696150, 0.41330558197122380, 0.41335346357737950, 0.41340134283538090, 0.41344921974518250, 0.41349709430673580, 0.41353072338404730, 0.41357859452630860, 0.41362646332013920, 0.41367432976549350, 0.41372219386232510, 0.41377005561058680, 0.41381791501023230, 0.41385153731383020, 0.41389939329318890, 0.41394724692375070, 0.41399509820546770, 0.41404294713829440, 0.41409079372218460, 0.41413863795709260, 0.41417225348262620, 0.41422009429625710, 0.41426793276072420, 0.41431576887598180, 0.41436360264198370, 0.41441143405868550, 0.41445926312603830, 0.41449287186916730, 0.41454069751425780, 0.41458852080982100, 0.41463634175581130, 0.41468416035218310, 0.41473197659889070, 0.41477979049588860, 0.41481339245227990, 0.41486120292603150, 0.41490901104989450, 0.41495681682382280, 0.41500462024777180, 0.41505242132169670, 0.41510022004555060, 0.41513381521088180, 0.41518161051051050, 0.41522940345989040, 0.41527719405897750, 0.41532498230772630, 0.41537276820609200, 0.41542055175402890, 0.41546833295149400, 0.41550192024672090, 0.41554969801885060, 0.41559747344032960, 0.41564524651111370, 0.41569301723115830, 0.41574078560041890, 0.41578855161885080, 0.41582213211378210, 0.41586989470590680, 0.41591765494702620, 0.41596541283709580, 0.41601316837607170, 0.41606092156390960, 0.41610867240056480, 0.41615642088599450, 0.41618999350028590, 0.41623773855830760, 0.41628548126492650, 0.41633322162010010, 0.41638095962378290, 0.41642869527593300, 0.41647642857650510, 0.41652415952545570, 0.41655772425350600, 0.41660545177395320, 0.41665317694260380, 0.41670089975941460, 0.41674862022434310, 0.41679633833734400, 0.41684405409837480, 0.41689176750739270, 0.41692532434361450, 0.41697303432303710, 0.41702074195027250, 0.41706844722527650, 0.41711615014800700, 0.41716385071842060, 0.41721154893647440, 0.41725924480212520, 0.41730693831533070, 0.41734048617591550, 0.41738817625830850, 0.41743586398808310, 0.41748354936519570, 0.41753123238960470, 0.41757891306126550, 0.41762659138013800, 0.41767426734617730, 0.41770780730310630, 0.41775547983725260, 0.41780315001839470, 0.41785081784649070, 0.41789848332149690, 0.41794614644337220, 0.41799380721207370, 0.41804146562755930, 0.41808912168978800, 0.41812265265780470, 0.41817030528693420, 0.41821795556263360, 0.41826560348486240, 0.41831324905357920, 0.41836089226874100, 0.41840853313030660, 0.41845617163823340, 0.41850380779247970, 0.41853732976458460, 0.41858496248453170, 0.41863259285062950, 0.41868022086283590, 0.41872784652110870, 0.41877546982540710, 0.41882309077568910, 0.41887070937191360, 0.41891832561403920, 0.41895183858325210, 0.41899945138988470, 0.41904706184224980, 0.41909466994030660, 0.41914227568401240, 0.41918987907332770, 0.41923748010821160, 0.41928507878862150, 0.41933267511451710, 0.41938026908585780, 0.41941377196309220, 0.41946136249762530, 0.41950895067743610, 0.41955653650248380, 0.41960411997272740, 0.41965170108812560, 0.41969927984863950, 0.41974685625422780, 0.41979443030484900, 0.41984200200046300, 0.41987549477715180, 0.41992306303465150, 0.41997062893697800, 0.42001819248409110, 0.42006575367595040, 0.42011331251251610, 0.42016086899374740, 0.42020842311960490, 0.42025597489004820, 0.42030352430503710, 0.42035107136453160, 0.42038455294821410, 0.42043209656816880, 0.42047963783246430, 0.42052717674106010, 0.42057471329391830, 0.42062224749099750, 0.42066977933225860, 0.42071730881766180, 0.42076483594716780, 0.42081236072073750, 0.42084583218597180, 0.42085988313832980, 0.42089335351870930, 0.42094087249534540, 0.42098838911584160, 0.42103590338015860, 0.42108341528825710, 0.42113092484009860, 0.42117843203564240, 0.42122593687485100, 0.42127343935768370, 0.42132093948410340, 0.42136843725406900, 0.42140189642088390, 0.42144939074848540, 0.42149688271947210, 0.42154437233380380, 0.42159185959144280, 0.42163934449235020, 0.42168682703648740, 0.42173430722381560, 0.42178178505429660, 0.42182926052789020, 0.42187673364456050, 0.42192420440426740, 0.42195765126049580, 0.42200511857631710, 0.42205258353501430, 0.42210004613654960, 0.42214750638088410, 0.42219496426798000, 0.42224241979780000, 0.42228987297030420, 0.42233732378545670, 0.42238477224321720, 0.42243221834354950, 0.42247966208641420, 0.42251309661993890, 0.42252710347177500, 0.42256053691740880, 0.42260797485725150, 0.42265541043943110, 0.42270284366390880, 0.42275027453064720, 0.42279770303960950, 0.42284512919075730, 0.42289255298405330, 0.42293997441945900, 0.42298739349693890, 0.42303481021645410, 0.42308222457796790, 0.42312963658144360, 0.42316305660232270, 0.42321046515866070, 0.42325787135680200, 0.42330527519671090, 0.42335267667834820, 0.42340007580167800, 0.42344747256666360, 0.42349486697326710, 0.42354225902145360, 0.42358964871118420, 0.42363703604242250, 0.42368442101513200, 0.42373180362927660, 0.42377918388481890, 0.42382656178172290, 0.42385996618338280, 0.42390734063130290, 0.42395471272042900, 0.42400208245072390, 0.42404944982215050, 0.42409681483467420, 0.42414417748825800, 0.42419153778286560, 0.42423889571846090, 0.42428625129500700, 0.42433360451246870, 0.42438095537080920, 0.42442830386999380, 0.42447565000998470, 0.42452299379074720, 0.42457033521224550, 0.42460372288446980, 0.42465106085503680, 0.42469839646618510, 0.42474572971787840, 0.42479306061008230, 0.42484038914276100, 0.42488771531587840, 0.42493503912939900, 0.42498236058328800, 0.42502967967750860, 0.42507699641202590, 0.42512431078680620, 0.42517162280181210, 0.42521893245700950, 0.42526623975236220, 0.42531354468783620, 0.42536084726339570, 0.42539421709211850, 0.42540814747900580, 0.42544151621470030, 0.42548881297721640, 0.42553610737963130, 0.42558339942191020, 0.42563068910401760, 0.42567797642591990, 0.42572526138758100, 0.42577254398896680, 0.42581982423004310, 0.42586710211077410, 0.42591437763112650, 0.42596165079106490, 0.42600892159055490, 0.42605619002956240, 0.42610345610805290, 0.42615071982599150, 0.42619798118334560, 0.42624524018007800, 0.42629249681615730, 0.42633975109154710, 0.42637309867491850, 0.42642034949484570, 0.42646759795393530, 0.42651484405215330, 0.42656208778946490, 0.42660932916583700, 0.42665656818123550, 0.42670380483562660, 0.42675103912897690, 0.42679827106125200, 0.42684550063241850, 0.42689272784244310, 0.42693995269129150, 0.42698717517893070, 0.42703439530532710, 0.42708161307044690, 0.42712882847425740, 0.42717604151672450, 0.42722325219781440, 0.42727046051749530, 0.42731766647573300, 0.42736487007249460, 0.42741207130774680, 0.42745927018145680, 0.42750646669359100, 0.42753978760948720, 0.42755366084411670, 0.42758698066325040, 0.42763417135529220, 0.42768135968557940, 0.42772854565407880, 0.42777572926075760, 0.42782291050558340, 0.42787008938852370, 0.42791726590954570, 0.42796444006861570, 0.42801161186570270, 0.42805878130077350, 0.42810594837379550, 0.42815311308473660, 0.42820027543356390, 0.42824743542024540, 0.42829459304474930, 0.42834174830704210, 0.42838890120709210, 0.42843605174486830, 0.42848319992033770, 0.42853034573346720, 0.42857748918422670, 0.42862463027258190, 0.42867176899850340, 0.42871890536195870, 0.42876603936291300, 0.42881317100133880, 0.42886030027720190, 0.42890742719047140, 0.42895455174111470, 0.42900167392910070, 0.42904879375439850, 0.42909591121697530, 0.42912919552327540, 0.42914302631680210, 0.42917630952362020, 0.42919013905384400, 0.42922342116110270, 0.42927053043569150, 0.42931763734735510, 0.42936474189606180, 0.42941184408178100, 0.42945894390448070, 0.42950604136413080, 0.42955313646069980, 0.42960022919415710, 0.42964731956447080, 0.42969440757160950, 0.42974149321554390, 0.42978857649624280, 0.42983565741367450, 0.42988273596780870, 0.42992981215861390, 0.42997688598606090, 0.43002395745011790, 0.43007102655075530, 0.43011809328794110, 0.43016515766164650, 0.43021221967183980, 0.43025927931849090, 0.43030633660156970, 0.43035339152104510, 0.43040044407688730, 0.43044749426906620, 0.43049454209755230, 0.43054158756231490, 0.43058863066332290, 0.43063567140054640, 0.43068270977395730, 0.43072974578352320, 0.43077677942921570, 0.43082381071100440, 0.43087083962886010, 0.43091786618275200, 0.43096489037265080, 0.43101191219852750, 0.43105893166035150, 0.43110594875809310, 0.43115296349172360, 0.43119997586121280, 0.43124698586653160, 0.43129399350764970, 0.43134099878453890, 0.43138800169716940, 0.43143500224551130, 0.43148200042953690, 0.43152899624921500, 0.43157598970451840, 0.43162298079541630, 0.43166996952187980, 0.43171695588388120, 0.43176393988139130, 0.43181092151437920, 0.43185790078281850, 0.43190487768667810, 0.43195185222593120, 0.43199882440054780, 0.43204579421049980, 0.43209276165575790, 0.43213972673629440, 0.43218668945207980, 0.43223364980308590, 0.43228060778928460, 0.43232756341064760, 0.43237451666714480, 0.43242146755874940, 0.43246841608543240, 0.43251536224716580, 0.43256230604392220, 0.43260924747567200, 0.43265618654238800, 0.43270312324404130, 0.43275005758060470, 0.43279698955204950, 0.43284391915834850, 0.43289084639947260, 0.43293777127539550, 0.43298469378608870, 0.43303161393152340, 0.43307853171167350, 0.43312544712651030, 0.43317236017600620, 0.43321927086013410, 0.43326617917886530, 0.43331308513217410, 0.43335998872003150, 0.43340688994241110, 0.43345378879928540, 0.43350068529062580, 0.43354757941640660, 0.43359447117659930, 0.43364136057117680, 0.43368824760011360, 0.43373513226338070, 0.43378201456095160, 0.43382889449280030, 0.43387577205889760, 0.43392264725921880, 0.43396952009373550, 0.43401639056242170, 0.43406325866525000, 0.43411012440219400, 0.43415698777322750, 0.43420384877832270, 0.43421754341502460, 0.43425070741745330, 0.43426440079611120, 0.43429756369059400, 0.43431125581125800, 0.43435810846043540, 0.43440495874361780, 0.43445180666078020, 0.43449865221189550, 0.43454549539693600, 0.43459233621587780, 0.43463917466869340, 0.43468601075535530, 0.43473284447583880, 0.43477967583011750, 0.43482650481816560, 0.43487333143995800, 0.43492015569546560, 0.43496697758466580, 0.43501379710752990, 0.43506061426403430, 0.43510742905415250, 0.43515424147785780, 0.43520105153512550, 0.43524785922592900, 0.43529466455024370, 0.43534146750804360, 0.43538826809930300, 0.43543506632399650, 0.43548186218209910, 0.43552865567358410, 0.43557544679842690, 0.43562223555660270, 0.43566902194808600, 0.43571580597285050, 0.43576258763087130, 0.43580936692212450, 0.43585614384658370, 0.43586979394958630, 0.43590291840422430, 0.43591656725096720, 0.43596333818555520, 0.43601010675332390, 0.43605687295424800, 0.43610363678830600, 0.43615039825546920, 0.43619715735571360, 0.43624391408901690, 0.43629066845535150, 0.43633742045469370, 0.43638417008701940, 0.43643091735230390, 0.43647766225052230, 0.43652440478165030, 0.43657114494566260, 0.43661788274253710, 0.43666461817224690, 0.43671135123476880, 0.43675808193007840, 0.43680481025815250, 0.43685153621896550, 0.43689825981249350, 0.43694498103871260, 0.43699169989759950, 0.43703841638912890, 0.43705203457012280, 0.43709874743930990, 0.43714545794114240, 0.43719216607559620, 0.43723887184264800, 0.43728557524227360, 0.43733227627444900, 0.43737897493915260, 0.43742567123635870, 0.43747236516604320, 0.43751905672818530, 0.43756574592275870, 0.43761243274974080, 0.43765911720910860, 0.43770579930083850, 0.43775247902490690, 0.43779915638129120, 0.43784583136996770, 0.43789250399091260, 0.43793917424410430, 0.43798584212951850, 0.43799943469123860, 0.43804609895494340, 0.43809276085087530, 0.43813942037901210, 0.43818607753933070, 0.43823273233180600, 0.43827938475641800, 0.43832603481314180, 0.43837268250195640, 0.43841932782283800, 0.43846597077576450, 0.43851261136071320, 0.43855924957766060, 0.43860588542658600, 0.43865251890746530, 0.43869915002027610, 0.43874577876499680, 0.43879240514160460, 0.43883902915007670, 0.43885259862042150, 0.43889921900778570, 0.43894583702702100, 0.43899245267810500, 0.43903906596101570, 0.43908567687573180, 0.43913228542222970, 0.43917889160048920, 0.43922549541048600, 0.43927209685220100, 0.43931869592561070, 0.43936529263069350, 0.43941188696742720, 0.43945847893579070, 0.43950506853576250, 0.43955165576732000, 0.43956520592067030, 0.43961178953165010, 0.43965837077422400, 0.43970494964837030, 0.43975152615406760, 0.43979810029129470, 0.43984467206002970, 0.43989124146025190, 0.43993780849194040, 0.43998437315507250, 0.44003093544962770, 0.44007749537558550, 0.44012405293292340, 0.44017060812162190, 0.44021716094165860, 0.44023069304225010, 0.44027724224222270, 0.44032378907354370, 0.44037033353619070, 0.44041687563014500, 0.44046341535538450, 0.44050995271188870, 0.44055648769963720, 0.44060302031860840, 0.44064955056878320, 0.44069607845013900, 0.44074260396265660, 0.44078912710631530, 0.44083564788109500, 0.44084916319092050, 0.44089568034613030, 0.44094219513246970, 0.44098870754992100, 0.44103521759846340, 0.44108172527807440, 0.44112823058873700, 0.44117473353042960, 0.44122123410313110, 0.44126773230682260, 0.44131422814148480, 0.44136072160709650, 0.44140721270363770, 0.44142071248258440, 0.44146719996002800, 0.44151368506841240, 0.44156016780772040, 0.44160664817793000, 0.44165312617902050, 0.44169960181097520, 0.44174607507377330, 0.44179254596739460, 0.44183901449182000, 0.44188548064702990, 0.44193194443300410, 0.44197840584972530, 0.44199189010632320, 0.44203834790442710, 0.44208480333328830, 0.44213125639289090, 0.44217770708321320, 0.44222415540423590, 0.44227060135594100, 0.44231704493830880, 0.44236348615132070, 0.44240992499495770, 0.44245636146920010, 0.44250279557402990, 0.44251626556556020, 0.44256269605222850, 0.44260912416949760, 0.44265554991734980, 0.44270197329576510, 0.44274839430472510, 0.44279481294421200, 0.44284122921420600, 0.44288764311468840, 0.44293405464564290, 0.44298046380704820, 0.44299392078896680, 0.44304032633264200, 0.44308672950678360, 0.44313313031137400, 0.44317952874639490, 0.44322592481182900, 0.44327231850765650, 0.44331870983385930, 0.44336509879042150, 0.44341148537732200, 0.44345786959454520, 0.44347131357298010, 0.44351769417290660, 0.44356407240317200, 0.44361044826375690, 0.44365682175464360, 0.44370319287581470, 0.44374956162725270, 0.44379592800893950, 0.44384229202085620, 0.44388865366298780, 0.44393501293531430, 0.44394844391640480, 0.44399479957187820, 0.44404115285756410, 0.44408750377344580, 0.44413385231950540, 0.44418019849572600, 0.44422654230208970, 0.44427288373857980, 0.44431922280517840, 0.44436555950186840, 0.44437897873828510, 0.44442531181853460, 0.44447164252889200, 0.44451797086934380, 0.44456429683987050, 0.44461062044045650, 0.44465694167108370, 0.44470326053173590, 0.44474957702239600, 0.44479589114304680, 0.44480929863987000, 0.44485560914449640, 0.44490191727913300, 0.44494822304376410, 0.44499452643837090, 0.44504082746293840, 0.44508712611744890, 0.44513342240188680, 0.44517971631623630, 0.44523940362280160, 0.44528569155144040, 0.44533197710999430, 0.44537826029844770, 0.44542454111678180, 0.44547081956498120, 0.44551709564303010, 0.44556336935091280, 0.44560964068861240, 0.44562302596654590, 0.44566929368903220, 0.44571555904135700, 0.44576182202350210, 0.44580808263545430, 0.44585434087719710, 0.44590059674871400, 0.44594685024998950, 0.44599310138100810, 0.44600647617867730, 0.44605272369487570, 0.44609896884083800, 0.44614521161654980, 0.44619145202199610, 0.44623769005715840, 0.44628392572202470, 0.44633015901657700, 0.44638975426233510, 0.44643598157213740, 0.44648220651163200, 0.44652842908080660, 0.44657464927964420, 0.44662086710813060, 0.44666708256625010, 0.44671329565398730, 0.44672665074718660, 0.44677286022086400, 0.44681906732418340, 0.44686527205712860, 0.44691147441968580, 0.44695767441183940, 0.44700387203357460, 0.44705006728487620, 0.44709626016573090, 0.44710960479060580, 0.44715579405780460, 0.44720198095457980, 0.44724816548091630, 0.44729434763680050, 0.44734052742221730, 0.44738670483715150, 0.44743287988158980, 0.44744621528506570, 0.44749238671621650, 0.44753855577689570, 0.44758472246709040, 0.44763088678678360, 0.44767704873596350, 0.44772320831461390, 0.44776936552272170, 0.44778269170806540, 0.44782884530325890, 0.44787499652793450, 0.44792114538207870, 0.44796729186567710, 0.44801343597871680, 0.44805957772118350, 0.44810571709306450, 0.44811903406354790, 0.44816516982288770, 0.44821130321166560, 0.44825743422987130, 0.44830356287748700, 0.44834968915450100, 0.44839581306090070, 0.44844193459667140, 0.44845524235556940, 0.44850136027917800, 0.44854747583218430, 0.44859358901457420, 0.44863969982633560, 0.44868580826745540, 0.44873191433792000, 0.44879131658831000, 0.44883741667632360, 0.44888351439369640, 0.44892960974041540, 0.44897570271646610, 0.44902179332183740, 0.44906788155651650, 0.44908117214282500, 0.44912725676606220, 0.44917333901863670, 0.44921941890053200, 0.44926549641173750, 0.44931157155223880, 0.44935764432202430, 0.44941699610523840, 0.44946306289324150, 0.44950912731054460, 0.44955518935713540, 0.44960124903300100, 0.44964730633812920, 0.44969336127250850, 0.44970663469775300, 0.44975268602142440, 0.44979873497437540, 0.44984478155659480, 0.44989082576806840, 0.44993686760878540, 0.44998290707873300, 0.44999617254757140, 0.45004220840716110, 0.45008824189601210, 0.45013427301411250, 0.45018030176144880, 0.45022632813801100, 0.45027235214378540, 0.45028560965872790, 0.45033163005449650, 0.45037764807950760, 0.45042366373375220, 0.45046967701721570, 0.45051568792988830, 0.45056169647175790, 0.45057494603531760, 0.45062095096753470, 0.45066695352897930, 0.45071295371964060, 0.45075895153950660, 0.45080494698856750, 0.45085094006680990, 0.45086418168150180, 0.45091017115044700, 0.45095615824860720, 0.45100214297597050, 0.45104812533252460, 0.45109410531825900, 0.45114008293316370, 0.45115331660150700, 0.45119929060747240, 0.45124526224263970, 0.45129123150699750, 0.45133719840053480, 0.45138316292324180, 0.45142912507510690, 0.45144235079962200, 0.45148830934290860, 0.45153426551538550, 0.45158021931704280, 0.45162617074786990, 0.45167211980785670, 0.45173128428020270, 0.45177722736112010, 0.45182316807122000, 0.45186910641049120, 0.45191504237892440, 0.45196097597650810, 0.45197418705798180, 0.45202011704766750, 0.45206604466653810, 0.45211196991458210, 0.45215789279179320, 0.45220381329815820, 0.45226293457852080, 0.45230884910649760, 0.45235476126365310, 0.45240067104997760, 0.45244657846546090, 0.45249248351009420, 0.45250567995721020, 0.45255158139463290, 0.45259748046124120, 0.45264337715702300, 0.45268927148196970, 0.45273516343607200, 0.45274835318729330, 0.45279424153451160, 0.45284012751091900, 0.45288601111650770, 0.45293189235126900, 0.45297777121519290, 0.45303682952972900, 0.45308270241629100, 0.45312857293204260, 0.45317444107697380, 0.45322030685107620, 0.45327934538391510, 0.45332520518099230, 0.45337106260726820, 0.45341691766273290, 0.45346277034737750, 0.45350862066119300, 0.45352178910073340, 0.45356763580869150, 0.45361348014585810, 0.45365932211222400, 0.45370516170778040, 0.45375099893251840, 0.45376416068387400, 0.45380999430308510, 0.45385582555151740, 0.45390165442915870, 0.45394748093600320, 0.45399330507204090, 0.45400646013706330, 0.45405228066790700, 0.45409809882798170, 0.45414391461728010, 0.45418972803579400, 0.45423553908351460, 0.45424868746405810, 0.45429449490691790, 0.45434029997902230, 0.45438610268036430, 0.45443190301093510, 0.45447770097072750, 0.45449084266864650, 0.45453663702391080, 0.45458242900843620, 0.45462821862221430, 0.45467400586523660, 0.45471979073749530, 0.45473292575464670, 0.45477870702271500, 0.45482448592005940, 0.45487026244667130, 0.45491603660254330, 0.45497493672591100, 0.45502070490718480, 0.45506647071775050, 0.45511223415760160, 0.45515799522672980, 0.45521687558632180, 0.45526263068120780, 0.45530838340540480, 0.45535413375890670, 0.45539988174170330, 0.45541299796021650, 0.45545874233979370, 0.45550448434870780, 0.45555022398695190, 0.45559596125451850, 0.45565480569626760, 0.45570053699027120, 0.45574626591363370, 0.45579199246634560, 0.45583771664840100, 0.45589654133287650, 0.45594225954173290, 0.45598797537996860, 0.45603368884757560, 0.45607939994454870, 0.45609249737931300, 0.45613820487404530, 0.45618390999818550, 0.45622961275172760, 0.45627531313466390, 0.45633410191337880, 0.45637979632380930, 0.45642548836367010, 0.45647117803295530, 0.45651686533165960, 0.45652995066255460, 0.45657563435966190, 0.45662131568623230, 0.45666699464225660, 0.45671267122772960, 0.45677142410858320, 0.45681709472225330, 0.45686276296540940, 0.45690842883804560, 0.45696716557342440, 0.45701282547458950, 0.45705848300527380, 0.45710413816547000, 0.45714979095517320, 0.45716285875705070, 0.45720850794610870, 0.45725415476471830, 0.45729979921287430, 0.45734544129056950, 0.45740414213969280, 0.45744977824663010, 0.45749541198314690, 0.45754104334923870, 0.45759972805823460, 0.45764535345390560, 0.45769097647919120, 0.45773659713408550, 0.45778221541858470, 0.45779526570464480, 0.45784088038945690, 0.45788649270391890, 0.45793210264802560, 0.45797771022177280, 0.45799075508184310, 0.45803635905620740, 0.45808196066025840, 0.45812755989399120, 0.45817315675740030, 0.45823178945709680, 0.45827738035115240, 0.45832296887492610, 0.45836855502841210, 0.45842717159507570, 0.45847275177955410, 0.45851832959378740, 0.45856390503777200, 0.45862250547310850, 0.45866807494843030, 0.45871364205354700, 0.45875920678845240, 0.45881779109417260, 0.45886334986076310, 0.45890890625718700, 0.45895446028343970, 0.45901302846125920, 0.45905857651954640, 0.45910412220770630, 0.45914966552573560, 0.45920821757737310, 0.45925375492778740, 0.45929928990811540, 0.45934482251835290, 0.45940335844553230, 0.45944888508850750, 0.45949440936143700, 0.45953993126431860, 0.45959845106876500, 0.45964396700473840, 0.45968948057070870, 0.45973499176667390, 0.45979349545011600, 0.45983900067952860, 0.45988450353898040, 0.45993000402846940, 0.45998849159264500, 0.46003398611593730, 0.46007947826931460, 0.46012496805277200, 0.46018343949941860, 0.46022892331704040, 0.46027440476478940, 0.46031988384266420, 0.46033286369129920, 0.46037833917352250, 0.46042381228592190, 0.46046928302849410, 0.46051475140123540, 0.46052772584064400, 0.46057319061805310, 0.46061865302568220, 0.46066411306352930, 0.46070957073159230, 0.46072253976307000, 0.46076799383611750, 0.46081344553943250, 0.46085889487301220, 0.46091730546169770, 0.46096274883084230, 0.46100818983030200, 0.46105362846007260, 0.46111202293965680, 0.46115745560536040, 0.46120288590142660, 0.46124831382785150, 0.46126126786778290, 0.46130669220009590, 0.46135211416282190, 0.46139753375595800, 0.46145589961641800, 0.46150131324617390, 0.46154672450638850, 0.46159213339706380, 0.46165048315339500, 0.46169588608105980, 0.46174128663923530, 0.46178668482792000, 0.46179962388640760, 0.46184501848189290, 0.46189041070794050, 0.46193580056455010, 0.46199412171081560, 0.46203950560510780, 0.46208488713001440, 0.46213026628553320, 0.46214319576975780, 0.46218857133266930, 0.46223394452624800, 0.46227931535049210, 0.46232468380540080, 0.46233760789256330, 0.46238297275518950, 0.46242833524853420, 0.46247369537259800, 0.46253197181877890, 0.46257732598160270, 0.46262267777519940, 0.46266802719956650, 0.46268094171896530, 0.46272628755164750, 0.46277163101515640, 0.46281697210949060, 0.46287521996062150, 0.46292055509442310, 0.46296588785910640, 0.46301121825466910, 0.46302412321048000, 0.46306945001495870, 0.46311477445037250, 0.46316009651672140, 0.46321831577872360, 0.46326363188525210, 0.46330894562277320, 0.46335425699128560, 0.46336715238768780, 0.46341246016571690, 0.46345776557479460, 0.46350306861491970, 0.46351595984382070, 0.46356125929373710, 0.46360655637475890, 0.46365185108688540, 0.46371002927129300, 0.46375531802464720, 0.46380060440916300, 0.46384588842484030, 0.46385877010036250, 0.46390405052644020, 0.46394932858373700, 0.46399460427225320, 0.46405275388212720, 0.46409802361259490, 0.46414329097434170, 0.46420142809369870, 0.46424668949773270, 0.46429194853310210, 0.46433720519981020, 0.46435007316315340, 0.46439532624114540, 0.46444057695053490, 0.46448582529131950, 0.46454393384483710, 0.46458917622864110, 0.46463441624390050, 0.46469251231081370, 0.46473774636942870, 0.46478297805956090, 0.46482820738120900, 0.46484106164108450, 0.46488628737491090, 0.46493151074031480, 0.46497673173729650, 0.46498958183766870, 0.46503479924710520, 0.46508001428818010, 0.46512522696089440, 0.46518328198803020, 0.46522848870517930, 0.46527369305402890, 0.46533173559971210, 0.46537693399333940, 0.46542213001872710, 0.46546732367587980, 0.46548016008418110, 0.46552535015468930, 0.46557053785702230, 0.46561572319118100, 0.46562855544346970, 0.46567373719126460, 0.46571891657094820, 0.46576409358252110, 0.46582209510510830, 0.46586726616254990, 0.46591243485194300, 0.46597042389825910, 0.46601558663386900, 0.46606074700149290, 0.46611872357276940, 0.46616387798695640, 0.46620903003322260, 0.46626699413068870, 0.46631214022386570, 0.46635728394918660, 0.46640242530665330, 0.46641523557407660, 0.46646037334665630, 0.46650550875144430, 0.46655064178844360, 0.46656344790499230, 0.46660857735738870, 0.46665370444205920, 0.46669882915900680, 0.46671163112550230, 0.46675675225813040, 0.46680187102310020, 0.46684698742041140, 0.46685978523767450, 0.46690489805095300, 0.46695000849663880, 0.46699511657473200, 0.46700791024358460, 0.46705301473793300, 0.46709811686475350, 0.46714321662404800, 0.46715600614531200, 0.46720110232114630, 0.46724619612952170, 0.46729128757043950, 0.46734916080268050, 0.46739424629303200, 0.46743932941599380, 0.46749719018462250, 0.46754226735737330, 0.46758734216280210, 0.46764519046906510, 0.46769025932463850, 0.46773532581295930, 0.46779316165810440, 0.46783822219692790, 0.46788328036856530, 0.46789604916422470, 0.46794110375384310, 0.46798615597634130, 0.46803120583172390, 0.46804397048473230, 0.46808901675838450, 0.46813406066498610, 0.46817910220454170, 0.46819186271572290, 0.46823690067383930, 0.46828193626497350, 0.46832696948913240, 0.46833972585931090, 0.46838475550232070, 0.46842978277841990, 0.46847480768761320, 0.46848755991761320, 0.46853258124594850, 0.46857760020744440, 0.46862261680210290, 0.46863536489274860, 0.46868037790684210, 0.46872538855416630, 0.46877039683472700, 0.46878314078684530, 0.46882814548713090, 0.46887314782072000, 0.46893088760203110, 0.46897588398894570, 0.46902087800923380, 0.46907860534043950, 0.46912359341441960, 0.46916857912184530, 0.46922629400421040, 0.46927127376569250, 0.46931625116069430, 0.46937395359548420, 0.46941892504490980, 0.46946389412792810, 0.46947661861225770, 0.46952158411640670, 0.46956654725421800, 0.46961150802569290, 0.46962422837622940, 0.46966918556913210, 0.46971414039576770, 0.46977180907371400, 0.46981675795581190, 0.46986170447171740, 0.46991936070687020, 0.46996430127860710, 0.47000923948422630, 0.47006688327785610, 0.47011181553967880, 0.47015674543546020, 0.47016945047051650, 0.47021437678884400, 0.47025930074119810, 0.47030422232758590, 0.47031692323276570, 0.47036184124199810, 0.47040675688533400, 0.47046436693891060, 0.47050927663949850, 0.47055418397426400, 0.47061178159112820, 0.47065668298352010, 0.47070158201016720, 0.47071427174127650, 0.47075916719159920, 0.47080406027624770, 0.47084895099522750, 0.47086163659955370, 0.47090652374251020, 0.47095140851986850, 0.47100897241000870, 0.47105385124605090, 0.47109872771657370, 0.47115627917483210, 0.47120114970441640, 0.47124601786855770, 0.47125869230726860, 0.47130355689622070, 0.47134841911980300, 0.47140594929304860, 0.47145080557637820, 0.47149565949441650, 0.47155317723934150, 0.47159802521750830, 0.47164287083046160, 0.47165553410975310, 0.47170037614835720, 0.47174521582182060, 0.47180271228802710, 0.47184754602230850, 0.47189237739153010, 0.47194986143298920, 0.47199468686341120, 0.47203950992885440, 0.47205216205492850, 0.47209698154686120, 0.47214179867388740, 0.47219926144294280, 0.47224407263186490, 0.47228888145596160, 0.47234633180385460, 0.47239113469023100, 0.47243593521186220, 0.47244857619092460, 0.47249337313989150, 0.47253816772418860, 0.47259559680601460, 0.47264038545328990, 0.47268517173597600, 0.47269780568966700, 0.47274258840023580, 0.47278736874628750, 0.47284477656609670, 0.47288955097582800, 0.47293432302112860, 0.47294694995194610, 0.47299171842567050, 0.47303648453504010, 0.47308124828005960, 0.47309387109689150, 0.47313863127064320, 0.47318338908012040, 0.47324076322901190, 0.47328551510326340, 0.47333026461332400, 0.47334288041122420, 0.47338762635056480, 0.47343236992578900, 0.47348972282310080, 0.47353446046380650, 0.47357919574048190, 0.47359180452195120, 0.47363653622845470, 0.47368126557100500, 0.47373859722081470, 0.47378332062955570, 0.47382804167442690, 0.47384064344196700, 0.47388536091721600, 0.47393007602867260, 0.47398738643506630, 0.47403209561342540, 0.47407680242807910, 0.47408939718419350, 0.47413410042977490, 0.47417880131172610, 0.47423609047879940, 0.47428078542837050, 0.47432547801439680, 0.47433806576158860, 0.47438275477909640, 0.47442744143313850, 0.47448470936499240, 0.47452939008737130, 0.47457406844636940, 0.47458664918714490, 0.47463132397818080, 0.47467599640591230, 0.47473324310665460, 0.47477790960344470, 0.47482257373701960, 0.47483514747388530, 0.47487980804005410, 0.47492446624308660, 0.47498169171683060, 0.47502634398964210, 0.47508356063486950, 0.47512820697778220, 0.47517285095772580, 0.47518541479526080, 0.47523005520859860, 0.47527469325904660, 0.47533188868318710, 0.47537652080446280, 0.47542115056293780, 0.47543370740264060, 0.47547833359506910, 0.47552295742477570, 0.47558013163196140, 0.47562474953322400, 0.47568191491623730, 0.47572652688938250, 0.47577113649997590, 0.47578368344899580, 0.47582828949434910, 0.47587289317723070, 0.47593003734922330, 0.47597463510471750, 0.47601923049783230, 0.47603177045510460, 0.47607636228354050, 0.47612095174967670, 0.47617807471479980, 0.47622265825428380, 0.47627977239959650, 0.47632435001275810, 0.47636892526379110, 0.47638145533903820, 0.47642602702620250, 0.47647059635132040, 0.47652768929572270, 0.47657225269525540, 0.47662933682242520, 0.47667389429670050, 0.47671844940910420, 0.47673096960741410, 0.47677552115676320, 0.47682007034432260, 0.47687713327655280, 0.47692167653959540, 0.47697873065717450, 0.47702326799603420, 0.47706780297327730, 0.47708031329974090, 0.47712484471474800, 0.47716937376822080, 0.47722640669684840, 0.47727092982688150, 0.47732795394344570, 0.47737247115037180, 0.47741698599594180, 0.47742948645565440, 0.47747399773980650, 0.47751850666268460, 0.47753100423458900, 0.47757550959629740, 0.47762001259681770, 0.47767700672096230, 0.47772150379945700, 0.47777848911491580, 0.47782298027171920, 0.47786746906751090, 0.47787995677927490, 0.47792444201471950, 0.47796892488923810, 0.47802588902957910, 0.47807036598315850, 0.47812732131741490, 0.47817179235039000, 0.47822873887934710, 0.47827320399205430, 0.47831766674410210, 0.47833014171649790, 0.47837460090927260, 0.47841905774147270, 0.47847598310316720, 0.47852043401585580, 0.47857735057485970, 0.47862179556837500, 0.47867870332547480, 0.47872314240015360, 0.47876757911452420, 0.47878004135613710, 0.47882447451231580, 0.47886890530827350, 0.47888136466797170, 0.47892579190599180, 0.47897021678387550, 0.47902709458230380, 0.47907151354245090, 0.47912838254238340, 0.47917279558513390, 0.47922965578735650, 0.47927406291305030, 0.47931846767887880, 0.47933091431835480, 0.47937531552733030, 0.47941971437652720, 0.47943215813650530, 0.47947655342910400, 0.47952094636201270, 0.47957777661950770, 0.47962216363646580, 0.47967898509966720, 0.47972336620101950, 0.47978017887072110, 0.47982455405680740, 0.47986892688347580, 0.47988135793380200, 0.47992572720496390, 0.47997009411679580, 0.47998252229004410, 0.48002688564662530, 0.48007124664396500, 0.48008367194058670, 0.48012802938292810, 0.48017238446611840, 0.48022915841501190, 0.48027350758439500, 0.48033027274401120, 0.48037461599993150, 0.48043137237106540, 0.48047570971386750, 0.48053245729731640, 0.48057678872734510, 0.48062111779858850, 0.48063352752390510, 0.48067785304150540, 0.48072217620040940, 0.48073458305197250, 0.48077890265748840, 0.48082321990439960, 0.48083562388266060, 0.48087993757644000, 0.48092424891170330, 0.48093665001711350, 0.48098095779950250, 0.48102526322346430, 0.48108196332782200, 0.48112626284082910, 0.48118295416254030, 0.48122724776494120, 0.48128393030480810, 0.48132821799695080, 0.48138489175577030, 0.48142917353800270, 0.48148583851657710, 0.48153011438924640, 0.48158677058837680, 0.48163104055183240, 0.48167530815741510, 0.48168768797231730, 0.48173195202690780, 0.48177621372371800, 0.48178859066955100, 0.48183284881562920, 0.48187710460401510, 0.48188947868123020, 0.48193373091914400, 0.48197798079945640, 0.48199035200850600, 0.48203459833860650, 0.48207884231119810, 0.48209121065253480, 0.48213545107517140, 0.48217968914039150, 0.48219205461446710, 0.48223628912999100, 0.48228052128819150, 0.48229288389545840, 0.48233711250422310, 0.48238133875575540, 0.48239369849666620, 0.48243792119902330, 0.48248214154424000, 0.48253871521554870, 0.48258292965480200, 0.48263949455495640, 0.48268370308860040, 0.48274025921840860, 0.48278446184679570, 0.48284100920706080, 0.48288520593054420, 0.48294174452207460, 0.48298593534101130, 0.48304246516461300, 0.48308665007935750, 0.48314317113583950, 0.48318735014674200, 0.48324386243691430, 0.48328803554433430, 0.48334453906900100, 0.48338870627329500, 0.48344520103326930, 0.48348936233479030, 0.48354584833087930, 0.48359000372998540, 0.48364648096300010, 0.48369063046005000, 0.48374709893079890, 0.48379124252614760, 0.48384770223544400, 0.48389183992944950, 0.48394829087810650, 0.48399242267112730, 0.48404886485995080, 0.48409299075234650, 0.48410530183447840, 0.48414942418215270, 0.48419354417428090, 0.48420585239821050, 0.48424996884588330, 0.48429408293810260, 0.48430638830428330, 0.48435049885231310, 0.48439460704498560, 0.48440690955387220, 0.48445101420261680, 0.48449511649610130, 0.48450741614814690, 0.48455151489796850, 0.48459561129262450, 0.48460790808828290, 0.48465200093954330, 0.48469609143573380, 0.48470838537545930, 0.48475247232851710, 0.48479655692660070, 0.48480884801084660, 0.48485292906606330, 0.48490929599562800, 0.48495337115336610, 0.48500972933097510, 0.48505379859159920, 0.48511014801807110, 0.48515421138194150, 0.48521055205809600, 0.48525460952557480, 0.48531094145222650, 0.48535499302367880, 0.48541131620164760, 0.48545536187743750, 0.48551167630754140, 0.48555571608803130, 0.48556798553141420, 0.48561202177108870, 0.48565605565664440, 0.48566832224846770, 0.48571235259347450, 0.48575638058446020, 0.48576864432517830, 0.48581266877588160, 0.48585669087266390, 0.48586895176273170, 0.48591297031949920, 0.48596924456231570, 0.48601325722551230, 0.48606952272511270, 0.48611352949510550, 0.48616978625231570, 0.48621378712946950, 0.48627003514511000, 0.48631403012979370, 0.48637026940468540, 0.48641425849726510, 0.48642650347813680, 0.48647048903223170, 0.48651447223307720, 0.48652671436631380, 0.48657069402894040, 0.48661467133841740, 0.48662691062447290, 0.48667088439600230, 0.48672709225381260, 0.48677106013461200, 0.48682725925552060, 0.48687122124595990, 0.48692741163079410, 0.48697136773124270, 0.48702754938082780, 0.48707149959165650, 0.48708372583266770, 0.48712767250681550, 0.48717161682839340, 0.48718384022478630, 0.48722778100995420, 0.48728393999488270, 0.48732787489144320, 0.48738402514415530, 0.48742795415247520, 0.48748409567380080, 0.48752801879425490, 0.48758415158501890, 0.48762806881797830, 0.48764027918118550, 0.48768419287900820, 0.48772810422484620, 0.48774031174599940, 0.48778421955697140, 0.48784032969561830, 0.48788423162011290, 0.48794033303123800, 0.48798422906962910, 0.48804032175406820, 0.48808421190672860, 0.48809640924650810, 0.48814029586530880, 0.48818418013261220, 0.48819637463244650, 0.48824025536616340, 0.48829632540883410, 0.48834020025784090, 0.48839626157687160, 0.48844013054154440, 0.48849618313776850, 0.48854004621848450, 0.48855223054459880, 0.48859609009273340, 0.48863994728986580, 0.48865212877814610, 0.48869598244297270, 0.48875201240780130, 0.48879586018969340, 0.48885188143477340, 0.48889572333411030, 0.48895173586027370, 0.48899557187743050, 0.48900774319964610, 0.48905157568551080, 0.48909540582086870, 0.48910757430736380, 0.48915140091169930, 0.48920739081686400, 0.48925121154005100, 0.48930719272936340, 0.48935100757178050, 0.48936316873393720, 0.48940698004607460, 0.48945078900809940, 0.48946294733619090, 0.48950675276821280, 0.48956271134471100, 0.48960651089699460, 0.48966246076070730, 0.48970625443363400, 0.48971840544173790, 0.48976219558540080, 0.48980598337935120, 0.48981813155504790, 0.48986191582001140, 0.48991784307910960, 0.48996162146575100, 0.49001754001514130, 0.49006131252384300, 0.49007345338390340, 0.49011722236436220, 0.49017312702481750, 0.49021689012799570, 0.49027278608098260, 0.49031654330726140, 0.49037243055361870, 0.49041618190337990, 0.49042831262140890, 0.49047206044395000, 0.49052793380651640, 0.49057167575319800, 0.49062754041137900, 0.49067127648258900, 0.49068339989249040, 0.49072713243722580, 0.49077086263334520, 0.49078298321535700, 0.49082670988528250, 0.49088255196127530, 0.49092627275677120, 0.49098210613147020, 0.49102582105292210, 0.49103793433116260, 0.49108164572716990, 0.49113746522697430, 0.49118117074959970, 0.49123698155035990, 0.49128068119999360, 0.49129278717761970, 0.49133648330255500, 0.49139228023217620, 0.49143597048478150, 0.49149175871761290, 0.49153544309827670, 0.49154754177844390, 0.49159122263516080, 0.49164699700061110, 0.49169067198605370, 0.49174643765696660, 0.49179010677152010, 0.49180219815738670, 0.49184586374874830, 0.49188952699279960, 0.49190161555604400, 0.49194527527718390, 0.49200101839220220, 0.49204467224350960, 0.49205675633823370, 0.49210040666710250, 0.49214405464896520, 0.49215613592227100, 0.49219978038197600, 0.49225550094713030, 0.49229913953806110, 0.49231121634480150, 0.49235485141405090, 0.49239848413659770, 0.49241055812312380, 0.49245418732426840, 0.49250988534559180, 0.49255350867902370, 0.49256557820094110, 0.49260919801344730, 0.49266488218246430, 0.49270849612792740, 0.49276417161146130, 0.49280777969027610, 0.49281984193053090, 0.49286344648917620, 0.49291910812418210, 0.49296270681685420, 0.49301835976864510, 0.49306195259573090, 0.49307400755748450, 0.49311759686516290, 0.49317323597221150, 0.49321681941497880, 0.49327244984108460, 0.49331602741933820, 0.49332807510575380, 0.49337164916535670, 0.49342726575050380, 0.49347083394626900, 0.49348287717515850, 0.49352644185275190, 0.49358204459931070, 0.49362560341374290, 0.49368119748305870, 0.49372475043472130, 0.49373678639339310, 0.49378033582764940, 0.49383591606216800, 0.49387945963433560, 0.49393503119389230, 0.49397856890436400, 0.49399059759598290, 0.49403413178981300, 0.49408968951836900, 0.49413321785118500, 0.49414524209040770, 0.49418876690706130, 0.49424431080699010, 0.49428782976330940, 0.49434336499198650, 0.49438687808837070, 0.49439889506566540, 0.49444240464665360, 0.49449792605050620, 0.49454142977224190, 0.49455344230031310, 0.49459694250712860, 0.49465245008854020, 0.49469594443678750, 0.49470795251684640, 0.49475144335066120, 0.49480693711200470, 0.49485042208793400, 0.49490590718317250, 0.49494938630161380, 0.49496138712683180, 0.49500486273160850, 0.49506033401059680, 0.49510380375857080, 0.49511580013895080, 0.49515926637374510, 0.49521472383885910, 0.49525818421753560, 0.49531363302027580, 0.49536907667390490, 0.49541252768445860, 0.49546796267714630, 0.49551140783267230, 0.49552339252167830, 0.49556683416527670, 0.49562225535029810, 0.49566569113955860, 0.49567767138811560, 0.49572110366593630, 0.49577651104568340, 0.49581993746985030, 0.49583191327917130, 0.49587533619238910, 0.49593072976924990, 0.49597414682950670, 0.49602953175059670, 0.49608491152695850, 0.49612831922447790, 0.49618369034651160, 0.49622709219216530, 0.49623905632477270, 0.49628245466073240, 0.49633781198610460, 0.49638120447089190, 0.49639316416865600, 0.49643655314423790, 0.49649189667534070, 0.49653527980044090, 0.49654723506457600, 0.49659061468096000, 0.49664594442019040, 0.49668931818678890, 0.49670126901851100, 0.49674463927687910, 0.49679995522663550, 0.49684331963591310, 0.49685526603643640, 0.49689862693797420, 0.49695392910065540, 0.49699728415379850, 0.49700922612433870, 0.49705257767022910, 0.49710786604823380, 0.49715121174642520, 0.49720649147962650, 0.49726176607536200, 0.49730510241978890, 0.49736036837216420, 0.49741562918802990, 0.49745895617988150, 0.49751420835383340, 0.49756945539223590, 0.49761277303270360, 0.49766801143064240, 0.49772324469398730, 0.49776655298425810, 0.49782177760858690, 0.49787699709927870, 0.49792029604054910, 0.49797550689367740, 0.49803071261412980, 0.49807400220759000, 0.49812919929192610, 0.49818439124454930, 0.49822767149139540, 0.49828285480935430, 0.49833803299655690, 0.49838130389798420, 0.49839320605337700, 0.49843647345197730, 0.49849163787617260, 0.49853489943338030, 0.49854679717094930, 0.49859005522582200, 0.49864520588942450, 0.49868845810361010, 0.49870035142457170, 0.49874360013691470, 0.49879873704234150, 0.49884197991470450, 0.49885386882027540, 0.49889710819128960, 0.49895223134095860, 0.49899546487269970, 0.49900734936409660, 0.49905057939498270, 0.49910568879131600, 0.49914891298363560, 0.49916079306207460, 0.49920401375403780, 0.49925910939945330, 0.49930232425355760, 0.49931419992025670, 0.49935741127449940, 0.49941249317141510, 0.49946756994468520, 0.49951077196241510, 0.49956584011325450, 0.49962090314141350, 0.49966409582383330, 0.49967596104727060, 0.49971915023102780, 0.49977419951649990, 0.49981738286481900, 0.49982924368063570, 0.49987242353078760, 0.49992745907600300, 0.49997063309142980, 0.49998248950084370, 0.50002566001859790, 0.50008068182598190, 0.50013569851395580, 0.50017885970053190, 0.50023386777251050, 0.50028887072604880, 0.50033202258265050, 0.50034386856152560, 0.50038701692165790, 0.50044200614319100, 0.50048514867103470, 0.50049699024762800, 0.50054012927950140, 0.50059510477145960, 0.50065007514729100, 0.50069320485211720, 0.50074816661693510, 0.50080312326659240, 0.50084624364559320, 0.50085807480147250, 0.50090119168570680, 0.50095613461162380, 0.50099924566601450, 0.50101107242373470, 0.50105417998385850, 0.50110910918847750, 0.50116403328025160, 0.50120713151748290, 0.50121895225957000, 0.50126204700324000, 0.50131695737712260, 0.50136004629268280, 0.50137186263951550, 0.50141494806201300, 0.50146984472044260, 0.50152473626835120, 0.50156781237090450, 0.50157962270612360, 0.50162269531632010, 0.50167757315218590, 0.50172063993601520, 0.50173244587888530, 0.50177550917085950, 0.50183037329712650, 0.50188523231519260, 0.50192828629017330, 0.50194008622544890, 0.50198313670928360, 0.50203798202116640, 0.50208102668037530, 0.50209282222620790, 0.50213586339477420, 0.50219069500292020, 0.50224552150519490, 0.50228855335972330, 0.50230034290198140, 0.50234337126658060, 0.50239818406853480, 0.50244120661025370, 0.50245299176597590, 0.50249601081826680, 0.50255080992235270, 0.50260560392289600, 0.50264861366411120, 0.50266039282027990, 0.50270339907277960, 0.50275817937887700, 0.50281295458278820, 0.50285595152595080, 0.50286772468490120, 0.50291071814005570, 0.50296547965294870, 0.50300846728800700, 0.50302023606501610, 0.50306322021257480, 0.50311796803690180, 0.50317271076137850, 0.50321568560257170, 0.50322744838638290, 0.50327041974078950, 0.50332514878013050, 0.50337987272097850, 0.50342283477076450, 0.50343459156371380, 0.50347755012742610, 0.50353226038657000, 0.50358696554858100, 0.50362991480942110, 0.50364166561384400, 0.50368461138932490, 0.50373930287306890, 0.50378224283227540, 0.50379398926104120, 0.50383692573539370, 0.50384867055362390, 0.50389160354333150, 0.50394627625647270, 0.50398920343094070, 0.50400094387520240, 0.50404386756553520, 0.50409852660631140, 0.50415318055365420, 0.50419609494585500, 0.50420782940794960, 0.50425074031672770, 0.50430538059514340, 0.50436001578149070, 0.50440291739389130, 0.50441464587615310, 0.50445754400584770, 0.50451216552671200, 0.50456678195687150, 0.50460967079194270, 0.50462139329670700, 0.50466427864979610, 0.50471888141791910, 0.50477347909670280, 0.50481635515692580, 0.50482807168653050, 0.50487094426548390, 0.50492552828567700, 0.50498010721789840, 0.50502297050574750, 0.50503468106252750, 0.50507754086982540, 0.50513210614691210, 0.50518666633738760, 0.50522951685534640, 0.50524122144163860, 0.50528406847976670, 0.50529577146005210, 0.50533861501855860, 0.50539315647210860, 0.50544769284080320, 0.50549052711224660, 0.50550222412502850, 0.50554505491756870, 0.50559957763902050, 0.50565409527698030, 0.50569691678422450, 0.50570860783183840, 0.50575142586090590, 0.50580592985507840, 0.50586042876713360, 0.50590323751267490, 0.50591492259745970, 0.50595772786554060, 0.50601221313727320, 0.50606669332825190, 0.50610948931457950, 0.50612116843887060, 0.50616396094845960, 0.50617563846951030, 0.50621842750257540, 0.50627288897731330, 0.50632734537306400, 0.50637012512666410, 0.50638179669020700, 0.50642457296800650, 0.50647901573133810, 0.50653345341705160, 0.50657622041715960, 0.50658788602553130, 0.50663064955056430, 0.50668507360733170, 0.50673949258784960, 0.50679390649250950, 0.50683665726727760, 0.50684831532169730, 0.50689106262232380, 0.50694546290249340, 0.50699985810817800, 0.50704259613519000, 0.50705424823976130, 0.50709698279335850, 0.50715136437802720, 0.50720574088957950, 0.50726011232840770, 0.50730283413748640, 0.50731447869490340, 0.50735719703149870, 0.50741155485377250, 0.50746590760470010, 0.50750861667177140, 0.50752025528466320, 0.50756296087998230, 0.50757459789405560, 0.50761730001783040, 0.50767163408570770, 0.50772596308399760, 0.50776865594055340, 0.50778028701308690, 0.50782297639883160, 0.50783460587337380, 0.50787729178851660, 0.50793160210999260, 0.50798590736364430, 0.50802858401387830, 0.50804020754986730, 0.50808288073022500, 0.50813717237974130, 0.50819145896281930, 0.50824574047984290, 0.50828840092794360, 0.50830001693119920, 0.50834267391036740, 0.50839694182773000, 0.50845120468042100, 0.50850546246882020, 0.50854810671898940, 0.50855971519332530, 0.50860235597550360, 0.50865660016872490, 0.50871083929904160, 0.50876507336683920, 0.50880770142328310, 0.50881930237251240, 0.50886192696190510, 0.50891614743900650, 0.50897036285496900, 0.50902457321018830, 0.50906718507711530, 0.50907877850505030, 0.50912138690587700, 0.50917558367487800, 0.50922977538451950, 0.50928396203518300, 0.50932655771680970, 0.50933814362726440, 0.50938073584373300, 0.50939232016115360, 0.50943490891267360, 0.50948907692402270, 0.50954323987816680, 0.50958581937871560, 0.50959739777550370, 0.50963997381184270, 0.50965155061642330, 0.50969412318875740, 0.50974826750985270, 0.50980240677552040, 0.50985654098615440, 0.50989910084658600, 0.50991067014213910, 0.50995322653951880, 0.51000734717840470, 0.51006146276364440, 0.51011557329561400, 0.51015811698437510, 0.51016967877471520, 0.51021221900137820, 0.51022377920134400, 0.51026631596610750, 0.51032040787896400, 0.51037449474033120, 0.51042857655060740, 0.51047110061078290, 0.51048265331017450, 0.51052517390941150, 0.51053672501943360, 0.51057924215793990, 0.51063330535676440, 0.51068736350626760, 0.51074141660684660, 0.51078392104480290, 0.51079546465889440, 0.51083796563707110, 0.51084950766279660, 0.51089200518141010, 0.51094603967820930, 0.51100006912785920, 0.51105409353075610, 0.51109657835285990, 0.51110811288729680, 0.51115059425078150, 0.51120460510294490, 0.51125861090974920, 0.51131261167157680, 0.51136660738881760, 0.51140907260144000, 0.51142059806186650, 0.51146305981704780, 0.51147458369112120, 0.51151704198907360, 0.51157101911790280, 0.51162499120392970, 0.51167895824755140, 0.51172140385709040, 0.51173292024915660, 0.51177536240241700, 0.51178687720913330, 0.51182931590633380, 0.51188326436924030, 0.51193720779151590, 0.51199114617356030, 0.51203357218640720, 0.51204507951575760, 0.51208750207350580, 0.51209900781851520, 0.51214142692136790, 0.51219534673039290, 0.51224926150096270, 0.51230317123348040, 0.51235707592833390, 0.51239947889697460, 0.51241097558592240, 0.51245337510083830, 0.51246487020662550, 0.51250726626804000, 0.51256115239896890, 0.51261503349402600, 0.51266890955359690, 0.51271129293954570, 0.51272278057807870, 0.51276516051148140, 0.51277664656786060, 0.51281902304893120, 0.51283050752333530, 0.51287288055229850, 0.51292673302196470, 0.51298058045832240, 0.51303442286177230, 0.51307678322009140, 0.51308826023271030, 0.51313061713987200, 0.51314209257152060, 0.51318444602774360, 0.51319591987860240, 0.51323826988410240, 0.51329208870933610, 0.51334590250384870, 0.51339971126802210, 0.51345351500225420, 0.51349584889218820, 0.51350731370694550, 0.51354964414732930, 0.51356110738247980, 0.51360343437353030, 0.51365721957118990, 0.51371099974069980, 0.51376477488245240, 0.51381854499684390, 0.51386085587857090, 0.51387231008427320, 0.51391461751784090, 0.51392607014511950, 0.51396837413075010, 0.51402212571770210, 0.51407587227908240, 0.51412961381528660, 0.51418335032671280, 0.51423708181375470, 0.51427936624955560, 0.51429080827680260, 0.51433308926605630, 0.51434452971624280, 0.51438680725917640, 0.51444052022931040, 0.51449422817685170, 0.51454793110219570, 0.51460162900573540, 0.51465532188787670, 0.51469757988981490, 0.51470900974899030, 0.51475126430600560, 0.51476269258948650, 0.51480494370179470, 0.51481637040975950, 0.51485861807757570, 0.51491228743374280, 0.51496595177069240, 0.51501961108882100, 0.51507326538851910, 0.51511549696868950, 0.51512691467018020, 0.51516914280704990, 0.51518055893420990, 0.51522278362798670, 0.51523419818099240, 0.51527641943189410, 0.51533005021916780, 0.51538367599021290, 0.51543729674541070, 0.51549091248517000, 0.51554452320987490, 0.51558672493870710, 0.51559812891992930, 0.51564032720729060, 0.51565172961572180, 0.51569392446183470, 0.51570532529765560, 0.51574751670272860, 0.51580110393036990, 0.51585468614516150, 0.51590826334749000, 0.51596183553775720, 0.51601540271635620, 0.51606896488368380, 0.51611113333713770, 0.51612252204012880, 0.51616468705417380, 0.51617607418609600, 0.51621823576095030, 0.51622962132198200, 0.51627177945786410, 0.51632531814530080, 0.51637885182366630, 0.51643238049335030, 0.51648590415475310, 0.51653942280826390, 0.51659293645429810, 0.51663507165191830, 0.51664644509323220, 0.51668857685349860, 0.51669994872546180, 0.51674207704860290, 0.51675344735139660, 0.51679557223762520, 0.51684906242095950, 0.51690254759900310, 0.51695602777214990, 0.51700950294080400, 0.51706297310535780, 0.51711643826621330, 0.51716989842375840, 0.51721199694982690, 0.51722335357837990, 0.51726544866939690, 0.51727680373050330, 0.51731889538667050, 0.51733024888050330, 0.51737233710204350, 0.51738368902878350, 0.51742577381591750, 0.51747920552868970, 0.51753263224074500, 0.51758605395248470, 0.51763947066432840, 0.51769288237663830, 0.51774628908984250, 0.51779969080431250, 0.51784174925005640, 0.51785308752047090, 0.51789514253366030, 0.51790647923870190, 0.51794853081954250, 0.51795986595938620, 0.51800191410811880, 0.51801324768294990, 0.51805529239978490, 0.51810866569492700, 0.51816203399395710, 0.51821539729725210, 0.51826875560523110, 0.51832210891828140, 0.51837545723681620, 0.51842880056120800, 0.51848213889185820, 0.51852415385606690, 0.51853547222918460, 0.51857748376356890, 0.51858880057356840, 0.51863080867835170, 0.51864212392541340, 0.51868412860079670, 0.51869544228509420, 0.51873744353133000, 0.51874875565305150, 0.51879075347034500, 0.51884405841823400, 0.51889735837538750, 0.51895065334220380, 0.51900394331909260, 0.51905722830646020, 0.51911050830466690, 0.51916378331413640, 0.51921705333528470, 0.51927031836847480, 0.51932357841413430, 0.51936553965038990, 0.51937683347263080, 0.51941879128247070, 0.51943008354438880, 0.51947203792802550, 0.51948332862979630, 0.51952527958746230, 0.51953656872926860, 0.51957851626115390, 0.51958980384316570, 0.51963174794952160, 0.51964303397192650, 0.51968497465294610, 0.51973819637185680, 0.51979141310662000, 0.51984462485765080, 0.51989783162534010, 0.51995103341007900, 0.52000423021229270, 0.52005742203236690, 0.52011060887067910, 0.52016379072765130, 0.52021696760369400, 0.52027013949917440, 0.52032330641452300, 0.52037646835012470, 0.52041836222045090, 0.52042962530636050, 0.52047151575457780, 0.52048277728367440, 0.52052466430996030, 0.52053592428240860, 0.52057780788701140, 0.52058906630299930, 0.52063094648613760, 0.52064220334584230, 0.52068408010773380, 0.52069533541133320, 0.52073720875220960, 0.52074846249988520, 0.52079033241992450, 0.52080158461184320, 0.52084345111133860, 0.52089656482679810, 0.52094967356675260, 0.52100277733153400, 0.52105587612160050, 0.52110896993733890, 0.52116205877912380, 0.52121514264737860, 0.52126822154251190, 0.52132129546490010, 0.52137436441494820, 0.52142742839307080, 0.52148048739965520, 0.52153354143508600, 0.52158659049978750, 0.52163963459417720, 0.52169267371858080, 0.52174570787348710, 0.52179873705923720, 0.52185176127627640, 0.52190478052498700, 0.52194657636077900, 0.52195779480572180, 0.52199958722570890, 0.52201080411895050, 0.52205259312329570, 0.52206380846499570, 0.52210559405400360, 0.52211680784436660, 0.52215859001818720, 0.52216980225736850, 0.52221158101625960, 0.52222279170444990, 0.52226456704862350, 0.52227577618599760, 0.52231754811566310, 0.52232875570239620, 0.52237052421784340, 0.52238173025413340, 0.52242349535546390, 0.52243469984145380, 0.52247646152896140, 0.52248766446485210, 0.52252942273877680, 0.52254062412475080, 0.52258237898527670, 0.52259357882150150, 0.52263533026887460, 0.52264652855553550, 0.52268827658994830, 0.52269947332721570, 0.52274121794893260, 0.52275241313699670, 0.52279415434622610, 0.52280534798526110, 0.52284708578221430, 0.52285827787239570, 0.52290001225728990, 0.52291120279879490, 0.52295293377185730, 0.52296412276486550, 0.52300585032633680, 0.52301703777103190, 0.52305876192105320, 0.52306994781759110, 0.52311166855641290, 0.52312285290498020, 0.52316457023303680, 0.52317575303386870, 0.52321746695113090, 0.52322864820433780, 0.52327035871102800, 0.52328153841678850, 0.52332324551327910, 0.52333442367181200, 0.52337612735835480, 0.52338730396984580, 0.52342900424636910, 0.52344017931091790, 0.52348187617773300, 0.52349304969554190, 0.52353474315284010, 0.52354591512407880, 0.52358760517316250};
                break;
            case 16:
                halfErrorTheta = {};
                break;
            case 17:
                halfErrorTheta = {};
                break;
            case 18:
                halfErrorTheta = {};
                break;
            case 19:
                halfErrorTheta = {};
                break;
            default:
                halfErrorTheta = {};
                break;
        }
        auto indx = std::lower_bound(halfErrorTheta.cbegin(),halfErrorTheta.cend(), std::fmod(theta, CV_PI/6.));
        return double(std::floor(6. * theta/CV_PI) * CV_PI/6. + *indx);
    }
    
    double erf(double x)
    {
        // constants
        double a1 =  0.254829592;
        double a2 = -0.284496736;
        double a3 =  1.421413741;
        double a4 = -1.453152027;
        double a5 =  1.061405429;
        double p  =  0.3275911;
        
        // Save the sign of x
        int sign = 1;
        if (x < 0)
            sign = -1;
        x = fabs(x);
        
        // A&S formula 7.1.26
        double t = 1.0/(1.0 + p*x);
        double y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);
        
        return sign*y;
    }
    double erf(double a, double b)
    {
        // constants
        const double a1 =  0.254829592;
        const double a2 = -0.284496736;
        const double a3 =  1.421413741;
        const double a4 = -1.453152027;
        const double a5 =  1.061405429;
        const double p  =  0.3275911;
        
     //   printf("erf :: a(%f) b(%f)\n",a,b);

        // Save the sign of x
        int sign = 1;
        if (a < 0) sign *= -1; a = fabs(a);
        if (b < 0) sign *= -1; b = fabs(b);
        
        // A&S formula 7.1.26
        double pr = 1/p;
        double t = (pr*b)/(a + pr*b);
        double y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-(a*a)/(b*b));
        
        return sign*y;
    }
    
double erfinv(double x)
    {
        // returns  the inverse error function
        // x must be  <-1<x<1
        
        int kMaxit    = 50;
        double kEps   = 1e-8;
        double kConst = 0.8862269254527579;     // sqrt(pi)/2.0
        
        if(fabs(x) <= kEps) return kConst*x;
        
        // Newton iterations
        double erfi, derfi, y0,y1,dy0,dy1;
        if(fabs(x) < 1.0) {
            erfi  = kConst*fabs(x);
            y0    = erf(0.9*erfi);
            derfi = 0.1*erfi;
            for (int iter=0; iter<kMaxit; iter++) {
                y1  = 1. - erfc(erfi);
                dy1 = fabs(x) - y1;
                if (fabs(dy1) < kEps)  {if (x < 0) return -erfi; else return erfi;}
                dy0    = y1 - y0;
                derfi *= dy1/dy0;
                y0     = y1;
                erfi  += derfi;
                if(fabs(derfi/erfi) < kEps) {if (x < 0) return -erfi; else return erfi;}
            }
        }
        return 0; //did not converge
    }
    
template<int src_t, int dst_t> distributeErfParameters<src_t, dst_t>::distributeErfParameters()
    {
        sMax = srcInfo::max;  sMin = srcInfo::min; sRange = (sMax - sMin);
        dMax = dstInfo::max;  dMin = dstInfo::min; dRange = dMax - dMin;
        
        uC = 0.5; c = sRange / 2 + sMin; g = 1.0;
        
        ErfA = wrkType(erf(uC)); ErfB = wrkType(erf(uC)); ErfAB = ErfB + ErfA;
        
        shift = dstType(dMin + dRange * ErfA / ErfAB);
        scale = double(dRange) / ErfAB;
        
        sUnitGrad[0] = std::floor(c - (sRange * std::sqrt(std::log((2*dRange * g)/(ErfAB  * std::sqrt(CV_PI) * sRange))))/g);
        sUnitGrad[1] = std::ceil( c + (sRange * sqrt(log((2*dRange * g)/(ErfAB * std::sqrt(CV_PI) * sRange))))/g);
        ull = 1./dRange; uul = 1. - ull; // double(dRange - 1)/dRange;
        sLowHigh[0] = std::floor(c + sRange * erfinv(ull*ErfB-uul*ErfA)/g);
        sLowHigh[1] = std::ceil( c - sRange * erfinv(ull*ErfA-uul*ErfB)/g);
        
        useLookUpTable = sUnitGrad[0] - sLowHigh[0] < lookUpTableMax;
        linearDistribution = sUnitGrad[0] - sLowHigh[0] < nonLinearMin;
        
        dUnitGrad[0] = shift + scale * erf( g * (sUnitGrad[0] - c) / sRange);
        dUnitGrad[1] = shift + scale * erf( g * (sUnitGrad[1] - c) / sRange);
        linearConstant = dUnitGrad[0] - sUnitGrad[0];
        shiftednErfConstant = sUnitGrad[1] + dUnitGrad[0] - sUnitGrad[0] - dUnitGrad[1];
        dMaxShifted = (dMax + shiftednErfConstant);
    };

template<int src_t, int dst_t> distributeErfParameters<src_t, dst_t>::distributeErfParameters(double _g, typename distributeErfParameters::srcType _c, typename distributeErfParameters::srcType _sMin, typename distributeErfParameters::srcType _sMax, typename distributeErfParameters::dstType _dMin, typename distributeErfParameters::dstType _dMax): c(_c), g(_g), sMin(_sMin), sMax(_sMax), dMin(_dMin), dMax(_dMax)
    {
        CV_Assert((int)sMin <= (int)c && (int)c <= (int)sMax && (int)dMin <= (int)dMax);
        sRange = (sMax - sMin);
        dRange = (dMax - dMin);
        uC = double(c-sMin)/double(sRange);
        
        ErfA = erf(g * uC);
        ErfB = erf((g*(1 - uC)));
        ErfAB = ErfB + ErfA;
        shift = dstType(dMin + dRange * ErfA / ErfAB);
        scale = double(dRange) / ErfAB;
        
        sUnitGrad[0] = std::floor(c - (sRange * std::sqrt(std::log((2*dRange * g)/(ErfAB  * std::sqrt(CV_PI) * sRange))))/g);
        sUnitGrad[1] = std::ceil( c + (sRange * sqrt(log((2*dRange * g)/(ErfAB * std::sqrt(CV_PI) * sRange))))/g);
        ull = 1./dRange; uul = 1. - ull; // double(dRange - 1)/dRange; 
        sLowHigh[0] = std::floor(c + sRange * erfinv(ull*ErfB-uul*ErfA)/g);
        sLowHigh[1] = std::ceil( c - sRange * erfinv(ull*ErfA-uul*ErfB)/g);
        
        // srcType sLowHigh[0] = std::floor(c + sRange * erfinv(ull*ErfAB - ErfA)/g);
        // srcType sLowHigh[1] = std::ceil( c - sRange * erfinv(ull*ErfAB - ErfB)/g);
        
        useLookUpTable = sUnitGrad[0] - sLowHigh[0] < lookUpTableMax;
        linearDistribution = sUnitGrad[0] - sLowHigh[0] < nonLinearMin;
        
        dUnitGrad[0] = shift + scale * erf( g * (sUnitGrad[0] - c) / sRange);
        dUnitGrad[1] = shift + scale * erf( g * (sUnitGrad[1] - c) / sRange);
        linearConstant = dUnitGrad[0] - sUnitGrad[0];
        shiftednErfConstant = sUnitGrad[1] + dUnitGrad[0] - sUnitGrad[0] - dUnitGrad[1];
        dMaxShifted = (dMax + shiftednErfConstant);
    };

    
template<int src_t, int dst_t> distributeErf<src_t, dst_t>::distributeErf()
    {
        srcType sMax = srcType::max; srcType sMin = srcType::min;
        dstType dMax = dstType::max; dstType dMin = dstType::min;
        par(1.0,srcType((sMax-sMin)/2),sMin,sMax,dMin,dMax);
    };

template<int src_t, int dst_t> distributeErf<src_t, dst_t>::distributeErf(double _g, typename distributeErf::srcType _c, typename distributeErf::srcType sMin, typename distributeErf::srcType sMax, typename distributeErf::dstType dMin, typename distributeErf::dstType dMax):par(_g,_c,sMin,sMax,dMin,dMax)
    {
        CV_Assert((int)sMin <= (int)_c && (int)_c <= (int)sMax && (int)dMin <= (int)dMax);
    };
    
template<int src_t, int dst_t>  void distributeErf<src_t, dst_t>::operator()(const typename distributeErf::srcType src, typename distributeErf::dstType &dst)
    {
        if(src >= par.c){
            dst = dstType(par.shift + par.scale * erf(par.g*(src - par.c), double(par.sRange)));
        }else{
            dst = dstType(par.shift - par.scale * erf(par.g*(par.c - src), double(par.sRange)));
        };
        
    };
    
    
template<int src_t, int dst_t> distributeErfCompact<src_t, dst_t>::distributeErfCompact(double _g, typename distributeErfCompact::srcType _c, typename distributeErfCompact::srcType sMin, typename distributeErfCompact::srcType sMax, typename distributeErfCompact::dstType dMin, typename distributeErfCompact::dstType dMax): par(_g,_c,sMin,sMax,dMin,dMax)
    {
        CV_Assert((int)sMin <= (int)_c && (int)_c <= (int)sMax && (int)dMin <= (int)dMax);    };
    
template<int src_t, int dst_t>  void distributeErfCompact<src_t, dst_t>::operator()(const typename distributeErfCompact::srcType src, typename distributeErfCompact::dstType &dst)
    {
        // 5 Region code : constant - erf - linear - erf - constant
        // Assumes that c is in the linear region.
        if(src <= par.sUnitGrad[1]){
            if(src > par.sLowHigh[1]){
                dst = dstType(par.shift + par.scale * erf(par.g*(src - par.c), double(par.sRange)));
            }else{
                dst = par.dMin;
            }
        }else if(src <= par.sUnitGrad[2]){
            dst = dstType(src + par.linearConstant);
        }else{
            if(src < par.sLowHigh[2]){
                dst = dstType(par.shift - par.scale * erf(par.g*(par.c - src), double(par.sRange)) + par.shiftedErfConstant);
            }else{
                dst = par.dMax;
            }
        }
        
    };

    
template<int src_t, int dst_t> distributePartition<src_t, dst_t>::distributePartition(typename distributePartition::srcType _sMinCutoff, typename distributePartition::srcType _sMaxCutoff, typename distributePartition::srcType _sMin, typename distributePartition::srcType _sMax, typename distributePartition::dstType _dMin, typename distributePartition::dstType _dMax):sMinCutoff(_sMinCutoff), sMaxCutoff(_sMaxCutoff)    {
        CV_Assert((int)_sMin <= (int)sMinCutoff && (int)sMinCutoff <= (int)_sMax && (int)_sMin <= (int)sMaxCutoff && (int)sMaxCutoff <= (int)_sMax && (int)_dMin <= (int)_dMax);
    };
    
template<int src_t, int dst_t>  void distributePartition<src_t, dst_t>::operator()(const typename distributePartition::srcType src, typename distributePartition::dstType &dst)
    {
        if(src >= sMinCutoff && src <= sMaxCutoff){
            dst = dstType(src);
        }else{
            dst = 0;
        }
        
    };


    
template<int src_t, int dst_t> distributeLinear<src_t, dst_t>::distributeLinear()
    {
        srcType sMax = srcType::max; srcType sMin = srcType::min;
        dstType dMax = dstType::max; dstType dMin = dstType::min;
        
        dstType sRange = (sMax - sMin);
        dstType dRange = (dMax - dMin);
        g =  wrkType(dRange)/wrkType(sRange); // When _g is 1 the conversion spans the range.
        c = dstType(wrkType(sMax + sMin)/2.0); // _c is the center of the line in the src dimension.
        fMin = sMin;
        fMax = sMax;
    };

   // distributeLinear(wrkType _g, srcType _c, srcType sMin, srcType sMax, dstType dMin, dMax)
template<int src_t, int dst_t> distributeLinear<src_t, dst_t>::distributeLinear(typename distributeLinear::wrkType _g, typename distributeLinear::srcType _c, typename distributeLinear::srcType sMin, typename distributeLinear::srcType sMax, typename distributeLinear::dstType _dMin, typename distributeLinear::dstType _dMax): dMin(_dMin), dMax(_dMax)
    {        
        CV_Assert((int)sMin <= (int)c && (int)c <= (int)sMax && (int)dMin <= (int)sMax);
        dstType sRange = (sMax - sMin);
        dstType dRange = (dMax - dMin);
        g = _g * wrkType(dRange)/wrkType(sRange); // When _g is 1 the conversion spans the range.
        c = dstType(wrkType(dRange)/2.0 - g * _c); // _c is the center of the line in the src dimension.
        fMin = srcType(wrktype(dMin - c)/g);
        fMax = srcType(wrktype(dMax - c)/g);
    };
    
template<int src_t, int dst_t>  void distributeLinear<src_t, dst_t>::operator()(const typename distributeLinear::srcType src, typename distributeLinear::dstType dst) const
    {
        if(src <= fMin){
            dst = dMin;
        }else if(src >= fMax){
            dst = dMax;
        }else{
            dst = dstType(g * src) + c;
        };
    };
    
    
//    template<int src_t, int dst_t> distributeEuclideanMetric<src_t, dst_t>::distributeEuclideanMetric()
//    {
//        using srcType = typename depthConverter<src_t, dst_t>::srcType;
//        using dstType = typename depthConverter<src_t, dst_t>::dstType;
//        using wrkType = typename depthConverter<src_t, dst_t>::wrkType;
//        typename cv::Data_Type<src_t>::type sMax = cv::Data_Type<src_t>::max;
//        typename cv::Data_Type<src_t>::type sMin = cv::Data_Type<src_t>::min;
//        
//        typename cv::Data_Type<dst_t>::type dMax = cv::Data_Type<dst_t>::max;
//        typename cv::Data_Type<dst_t>::type dMin = cv::Data_Type<dst_t>::min;
//        // g=1 c= (sMin+sMax)/2
//        sRange = (sMax - sMin);
//        dstType dRange = dstType(dMax - dMin);
//        wrkType ErfA = erf(0.5);
//        wrkType ErfB = erf(0.5) + ErfA;
//        shift = dstType(dMin + dRange * ErfA / ErfB);
//        scale = dstType(dRange / ErfB);
//    };
//    
//    template<int src_t, int dst_t> distributeEuclideanMetric<src_t, dst_t>::distributeEuclideanMetric(double _g, typename depthConverter<src_t, dst_t>::srcType _c, typename depthConverter<src_t, dst_t>::srcType sMin, typename depthConverter<src_t, dst_t>::srcType sMax, typename depthConverter<src_t, dst_t>::dstType dMin, typename depthConverter<src_t, dst_t>::dstType dMax): c(_c), g(_g)
//    {
//        using srcType = typename depthConverter<src_t, dst_t>::srcType;
//        using dstType = typename depthConverter<src_t, dst_t>::dstType;
//        using wrkType = typename depthConverter<src_t, dst_t>::wrkType;
//        printf("distributeErf (int)sMin = %i (int)c = %i (int)sMax = %i (int)dMin = %i (int)dMax = %i \n",(int)sMin, (int)c,(int)sMax,(int)dMin, (int)dMax);
//        
//        CV_Assert((int)sMin <= (int)c && (int)c <= (int)sMax && (int)dMin <= (int)dMax);
//        sRange = (sMax - sMin);
//        dstType dRange = dstType(dMax - dMin);
//        double ErfA = erf((g*(c - sMin)), double(sRange));
//        double ErfB = erf((g*(sMax - c)), double(sRange)) + ErfA;
//        shift = wrkType(dMin + dRange * ErfA / ErfB);
//        scale = double(dRange / ErfB);
//    };
//    
//    template<int src_t, int dst_t>  void distributeEuclideanMetric<src_t, dst_t>::operator()(const typename depthConverter<src_t, dst_t>::srcType src, typename depthConverter<src_t, dst_t>::dstType &dst)
//    {
//        using srcType = typename depthConverter<src_t, dst_t>::srcType;
//        using dstType = typename depthConverter<src_t, dst_t>::dstType;
//        using wrkType = typename depthConverter<src_t, dst_t>::wrkType;
//        if(src >= c){
//            dst = dstType(shift + scale * erf(g*(src - c), double(sRange)));
//        }else{
//            dst = dstType(shift - scale * erf(g*(c - src), double(sRange)));
//        };
//        
//    }



// computes cubic spline coefficients for a function: (xi=i, yi=f[i]), i=0..n
template<typename _Tp> static void splineBuild(const _Tp* f, int n, _Tp* tab)
{
    _Tp cn = 0;
    int i;
    tab[0] = tab[1] = (_Tp)0;

    for(i = 1; i < n-1; i++)
    {
        _Tp t = 3*(f[i+1] - 2*f[i] + f[i-1]);
        _Tp l = 1/(4 - tab[(i-1)*4]);
        tab[i*4] = l; tab[i*4+1] = (t - tab[(i-1)*4+1])*l;
    }

    for(i = n-1; i >= 0; i--)
    {
        _Tp c = tab[i*4+1] - tab[i*4]*cn;
        _Tp b = f[i+1] - f[i] - (cn + c*2)*(_Tp)0.3333333333333333;
        _Tp d = (cn - c)*(_Tp)0.3333333333333333;
        tab[i*4] = f[i]; tab[i*4+1] = b;
        tab[i*4+2] = c; tab[i*4+3] = d;
        cn = c;
    }
}

// interpolates value of a function at x, 0 <= x <= n using a cubic spline.
template<typename _Tp> static inline _Tp splineInterpolate(_Tp x, const _Tp* tab, int n)
{
    // don't touch this function without urgent need - some versions of gcc fail to inline it correctly
    int ix = std::min(std::max(int(x), 0), n-1);
    x -= ix;
    tab += ix*4;
    return ((tab[3]*x + tab[2])*x + tab[1])*x + tab[0];
}


template<typename _Tp> struct ColorChannel
{
    typedef float worktype_f;
    static _Tp max() { return std::numeric_limits<_Tp>::max(); }
    static _Tp half() { return (_Tp)(max()/2 + 1); }
};

template<> struct ColorChannel<float>
{
    typedef float worktype_f;
    static float max() { return 1.f; }
    static float half() { return 0.5f; }
};

/*template<> struct ColorChannel<double>
{
    typedef double worktype_f;
    static double max() { return 1.; }
    static double half() { return 0.5; }
};*/


///////////////////////////// Top-level template function ////////////////////////////////

template <typename Cvt>
class CvtColorLoop_Invoker : public ParallelLoopBody
{
    typedef typename Cvt::src_channel_type _Tp;
    typedef typename Cvt::dst_channel_type _Tp2;

public:

    CvtColorLoop_Invoker(const Mat& _src, Mat& _dst, const Cvt& _cvt) :
        ParallelLoopBody(), src(_src), dst(_dst), cvt(_cvt)
    {
    }

    virtual void operator()(const Range& range) const
    {
        const uchar* yS = src.ptr<uchar>(range.start);
        uchar* yD = dst.ptr<uchar>(range.start);

        for( int i = range.start; i < range.end; ++i, yS += src.step, yD += dst.step )
            cvt((const _Tp*)yS, (_Tp2*)yD, src.cols);
    }

private:
    const Mat& src;
    Mat& dst;
    const Cvt& cvt;

    const CvtColorLoop_Invoker& operator= (const CvtColorLoop_Invoker&);
};

template <typename Cvt>
void CvtColorLoop(const Mat& src, Mat& dst, const Cvt& cvt)
{
    parallel_for_(Range(0, src.rows), CvtColorLoop_Invoker<Cvt>(src, dst, cvt), src.total()/(double)(1<<16) );
}

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
typedef IppStatus (CV_STDCALL* ippiReorderFunc)(const void *, int, void *, int, IppiSize, const int *);
typedef IppStatus (CV_STDCALL* ippiGeneralFunc)(const void *, int, void *, int, IppiSize);
typedef IppStatus (CV_STDCALL* ippiColor2GrayFunc)(const void *, int, void *, int, IppiSize, const Ipp32f *);

template <typename Cvt>
class CvtColorIPPLoop_Invoker : public ParallelLoopBody
{
public:

    CvtColorIPPLoop_Invoker(const Mat& _src, Mat& _dst, const Cvt& _cvt, bool *_ok) :
        ParallelLoopBody(), src(_src), dst(_dst), cvt(_cvt), ok(_ok)
    {
        *ok = true;
    }

    virtual void operator()(const Range& range) const
    {
        const void *yS = src.ptr<uchar>(range.start);
        void *yD = dst.ptr<uchar>(range.start);
        if( !cvt(yS, (int)src.step[0], yD, (int)dst.step[0], src.cols, range.end - range.start) )
            *ok = false;
    }

private:
    const Mat& src;
    Mat& dst;
    const Cvt& cvt;
    bool *ok;

    const CvtColorIPPLoop_Invoker& operator= (const CvtColorIPPLoop_Invoker&);
};

template <typename Cvt>
bool CvtColorIPPLoop(const Mat& src, Mat& dst, const Cvt& cvt)
{
    bool ok;
    parallel_for_(Range(0, src.rows), CvtColorIPPLoop_Invoker<Cvt>(src, dst, cvt, &ok), src.total()/(double)(1<<16) );
    return ok;
}

template <typename Cvt>
bool CvtColorIPPLoopCopy(Mat& src, Mat& dst, const Cvt& cvt)
{
    Mat temp;
    Mat &source = src;
    if( src.data == dst.data )
    {
        src.copyTo(temp);
        source = temp;
    }
    bool ok;
    parallel_for_(Range(0, source.rows), CvtColorIPPLoop_Invoker<Cvt>(source, dst, cvt, &ok), source.total()/(double)(1<<16) );
    return ok;
}

static IppStatus CV_STDCALL ippiSwapChannels_8u_C3C4Rf(const Ipp8u* pSrc, int srcStep, Ipp8u* pDst, int dstStep,
         IppiSize roiSize, const int *dstOrder)
{
    return ippiSwapChannels_8u_C3C4R(pSrc, srcStep, pDst, dstStep, roiSize, dstOrder, MAX_IPP8u);
}

static IppStatus CV_STDCALL ippiSwapChannels_16u_C3C4Rf(const Ipp16u* pSrc, int srcStep, Ipp16u* pDst, int dstStep,
         IppiSize roiSize, const int *dstOrder)
{
    return ippiSwapChannels_16u_C3C4R(pSrc, srcStep, pDst, dstStep, roiSize, dstOrder, MAX_IPP16u);
}

static IppStatus CV_STDCALL ippiSwapChannels_32f_C3C4Rf(const Ipp32f* pSrc, int srcStep, Ipp32f* pDst, int dstStep,
         IppiSize roiSize, const int *dstOrder)
{
    return ippiSwapChannels_32f_C3C4R(pSrc, srcStep, pDst, dstStep, roiSize, dstOrder, MAX_IPP32f);
}

static ippiReorderFunc ippiSwapChannelsC3C4RTab[] =
{
    (ippiReorderFunc)ippiSwapChannels_8u_C3C4Rf, 0, (ippiReorderFunc)ippiSwapChannels_16u_C3C4Rf, 0,
    0, (ippiReorderFunc)ippiSwapChannels_32f_C3C4Rf, 0, 0
};

static ippiGeneralFunc ippiCopyAC4C3RTab[] =
{
    (ippiGeneralFunc)ippiCopy_8u_AC4C3R, 0, (ippiGeneralFunc)ippiCopy_16u_AC4C3R, 0,
    0, (ippiGeneralFunc)ippiCopy_32f_AC4C3R, 0, 0
};

static ippiReorderFunc ippiSwapChannelsC4C3RTab[] =
{
    (ippiReorderFunc)ippiSwapChannels_8u_C4C3R, 0, (ippiReorderFunc)ippiSwapChannels_16u_C4C3R, 0,
    0, (ippiReorderFunc)ippiSwapChannels_32f_C4C3R, 0, 0
};

static ippiReorderFunc ippiSwapChannelsC3RTab[] =
{
    (ippiReorderFunc)ippiSwapChannels_8u_C3R, 0, (ippiReorderFunc)ippiSwapChannels_16u_C3R, 0,
    0, (ippiReorderFunc)ippiSwapChannels_32f_C3R, 0, 0
};

static ippiReorderFunc ippiSwapChannelsC4RTab[] =
{
    (ippiReorderFunc)ippiSwapChannels_8u_AC4R, 0, (ippiReorderFunc)ippiSwapChannels_16u_AC4R, 0,
    0, (ippiReorderFunc)ippiSwapChannels_32f_AC4R, 0, 0
};

static ippiColor2GrayFunc ippiColor2GrayC3Tab[] =
{
    (ippiColor2GrayFunc)ippiColorToGray_8u_C3C1R, 0, (ippiColor2GrayFunc)ippiColorToGray_16u_C3C1R, 0,
    0, (ippiColor2GrayFunc)ippiColorToGray_32f_C3C1R, 0, 0
};

static ippiColor2GrayFunc ippiColor2GrayC4Tab[] =
{
    (ippiColor2GrayFunc)ippiColorToGray_8u_AC4C1R, 0, (ippiColor2GrayFunc)ippiColorToGray_16u_AC4C1R, 0,
    0, (ippiColor2GrayFunc)ippiColorToGray_32f_AC4C1R, 0, 0
};

static ippiGeneralFunc ippiRGB2GrayC3Tab[] =
{
    (ippiGeneralFunc)ippiRGBToGray_8u_C3C1R, 0, (ippiGeneralFunc)ippiRGBToGray_16u_C3C1R, 0,
    0, (ippiGeneralFunc)ippiRGBToGray_32f_C3C1R, 0, 0
};

static ippiGeneralFunc ippiRGB2GrayC4Tab[] =
{
    (ippiGeneralFunc)ippiRGBToGray_8u_AC4C1R, 0, (ippiGeneralFunc)ippiRGBToGray_16u_AC4C1R, 0,
    0, (ippiGeneralFunc)ippiRGBToGray_32f_AC4C1R, 0, 0
};

static ippiGeneralFunc ippiCopyP3C3RTab[] =
{
    (ippiGeneralFunc)ippiCopy_8u_P3C3R, 0, (ippiGeneralFunc)ippiCopy_16u_P3C3R, 0,
    0, (ippiGeneralFunc)ippiCopy_32f_P3C3R, 0, 0
};

static ippiGeneralFunc ippiRGB2XYZTab[] =
{
    (ippiGeneralFunc)ippiRGBToXYZ_8u_C3R, 0, (ippiGeneralFunc)ippiRGBToXYZ_16u_C3R, 0,
    0, (ippiGeneralFunc)ippiRGBToXYZ_32f_C3R, 0, 0
};

static ippiGeneralFunc ippiXYZ2RGBTab[] =
{
    (ippiGeneralFunc)ippiXYZToRGB_8u_C3R, 0, (ippiGeneralFunc)ippiXYZToRGB_16u_C3R, 0,
    0, (ippiGeneralFunc)ippiXYZToRGB_32f_C3R, 0, 0
};

static ippiGeneralFunc ippiRGB2HSVTab[] =
{
    (ippiGeneralFunc)ippiRGBToHSV_8u_C3R, 0, (ippiGeneralFunc)ippiRGBToHSV_16u_C3R, 0,
    0, 0, 0, 0
};

static ippiGeneralFunc ippiHSV2RGBTab[] =
{
    (ippiGeneralFunc)ippiHSVToRGB_8u_C3R, 0, (ippiGeneralFunc)ippiHSVToRGB_16u_C3R, 0,
    0, 0, 0, 0
};

static ippiGeneralFunc ippiRGB2HLSTab[] =
{
    (ippiGeneralFunc)ippiRGBToHLS_8u_C3R, 0, (ippiGeneralFunc)ippiRGBToHLS_16u_C3R, 0,
    0, (ippiGeneralFunc)ippiRGBToHLS_32f_C3R, 0, 0
};

static ippiGeneralFunc ippiHLS2RGBTab[] =
{
    (ippiGeneralFunc)ippiHLSToRGB_8u_C3R, 0, (ippiGeneralFunc)ippiHLSToRGB_16u_C3R, 0,
    0, (ippiGeneralFunc)ippiHLSToRGB_32f_C3R, 0, 0
};

struct IPPGeneralFunctor
{
    IPPGeneralFunctor(ippiGeneralFunc _func) : func(_func){}
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        return func(src, srcStep, dst, dstStep, ippiSize(cols, rows)) >= 0;
    }
private:
    ippiGeneralFunc func;
};

struct IPPReorderFunctor
{
    IPPReorderFunctor(ippiReorderFunc _func, int _order0, int _order1, int _order2) : func(_func)
    {
        order[0] = _order0;
        order[1] = _order1;
        order[2] = _order2;
        order[3] = 3;
    }
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        return func(src, srcStep, dst, dstStep, ippiSize(cols, rows), order) >= 0;
    }
private:
    ippiReorderFunc func;
    int order[4];
};

struct IPPColor2GrayFunctor
{
    IPPColor2GrayFunctor(ippiColor2GrayFunc _func) : func(_func)
    {
        coeffs[0] = 0.114f;
        coeffs[1] = 0.587f;
        coeffs[2] = 0.299f;
    }
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        return func(src, srcStep, dst, dstStep, ippiSize(cols, rows), coeffs) >= 0;
    }
private:
    ippiColor2GrayFunc func;
    Ipp32f coeffs[3];
};

struct IPPGray2BGRFunctor
{
    IPPGray2BGRFunctor(ippiGeneralFunc _func) : func(_func){}
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        const void* srcarray[3] = { src, src, src };
        return func(srcarray, srcStep, dst, dstStep, ippiSize(cols, rows)) >= 0;
    }
private:
    ippiGeneralFunc func;
};

struct IPPGray2BGRAFunctor
{
    IPPGray2BGRAFunctor(ippiGeneralFunc _func1, ippiReorderFunc _func2, int _depth) : func1(_func1), func2(_func2), depth(_depth){}
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        const void* srcarray[3] = { src, src, src };
        Mat temp(rows, cols, CV_MAKETYPE(depth, 3));
        if(func1(srcarray, srcStep, temp.data, (int)temp.step[0], ippiSize(cols, rows)) < 0)
            return false;
        int order[4] = {0, 1, 2, 3};
        return func2(temp.data, (int)temp.step[0], dst, dstStep, ippiSize(cols, rows), order) >= 0;
    }
private:
    ippiGeneralFunc func1;
    ippiReorderFunc func2;
    int depth;
};

struct IPPReorderGeneralFunctor
{
    IPPReorderGeneralFunctor(ippiReorderFunc _func1, ippiGeneralFunc _func2, int _order0, int _order1, int _order2, int _depth) : func1(_func1), func2(_func2), depth(_depth)
    {
        order[0] = _order0;
        order[1] = _order1;
        order[2] = _order2;
        order[3] = 3;
    }
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        Mat temp;
        temp.create(rows, cols, CV_MAKETYPE(depth, 3));
        if(func1(src, srcStep, temp.data, (int)temp.step[0], ippiSize(cols, rows), order) < 0)
            return false;
        return func2(temp.data, (int)temp.step[0], dst, dstStep, ippiSize(cols, rows)) >= 0;
    }
private:
    ippiReorderFunc func1;
    ippiGeneralFunc func2;
    int order[4];
    int depth;
};

struct IPPGeneralReorderFunctor
{
    IPPGeneralReorderFunctor(ippiGeneralFunc _func1, ippiReorderFunc _func2, int _order0, int _order1, int _order2, int _depth) : func1(_func1), func2(_func2), depth(_depth)
    {
        order[0] = _order0;
        order[1] = _order1;
        order[2] = _order2;
        order[3] = 3;
    }
    bool operator()(const void *src, int srcStep, void *dst, int dstStep, int cols, int rows) const
    {
        Mat temp;
        temp.create(rows, cols, CV_MAKETYPE(depth, 3));
        if(func1(src, srcStep, temp.data, (int)temp.step[0], ippiSize(cols, rows)) < 0)
            return false;
        return func2(temp.data, (int)temp.step[0], dst, dstStep, ippiSize(cols, rows), order) >= 0;
    }
private:
    ippiGeneralFunc func1;
    ippiReorderFunc func2;
    int order[4];
    int depth;
};
#endif

////////////////// Various 3/4-channel to 3/4-channel RGB transformations /////////////////
    
template<typename _Tp> struct RGB2RGB
{
    typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2RGB(int _srccn, int _dstcn, int _blueIdx) : srccn(_srccn), dstcn(_dstcn), blueIdx(_blueIdx) {}
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn, dcn = dstcn, bidx = blueIdx;
        if( dcn == 3 )
        {
            n *= 3;
            for( int i = 0; i < n; i += 3, src += scn )
            {
                _Tp t0 = src[bidx], t1 = src[1], t2 = src[bidx ^ 2];
                dst[i] = t0; dst[i+1] = t1; dst[i+2] = t2;
            }
        }
        else if( scn == 3 )
        {
            n *= 3;
            _Tp alpha = ColorChannel<_Tp>::max();
            for( int i = 0; i < n; i += 3, dst += 4 )
            {
                _Tp t0 = src[i], t1 = src[i+1], t2 = src[i+2];
                dst[bidx] = t0; dst[1] = t1; dst[bidx^2] = t2; dst[3] = alpha;
            }
        }
        else
        {
            n *= 4;
            for( int i = 0; i < n; i += 4 )
            {
                _Tp t0 = src[i], t1 = src[i+1], t2 = src[i+2], t3 = src[i+3];
                dst[i] = t2; dst[i+1] = t1; dst[i+2] = t0; dst[i+3] = t3;
            }
        }
    }

    int srccn, dstcn, blueIdx;
};

/////////// Transforming 16-bit (565 or 555) RGB to/from 24/32-bit (888[8]) RGB //////////

struct RGB5x52RGB
{
    typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB5x52RGB(int _dstcn, int _blueIdx, int _greenBits)
        : dstcn(_dstcn), blueIdx(_blueIdx), greenBits(_greenBits) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int dcn = dstcn, bidx = blueIdx;
        if( greenBits == 6 )
            for( int i = 0; i < n; i++, dst += dcn )
            {
                unsigned t = ((const ushort*)src)[i];
                dst[bidx] = (uchar)(t << 3);
                dst[1] = (uchar)((t >> 3) & ~3);
                dst[bidx ^ 2] = (uchar)((t >> 8) & ~7);
                if( dcn == 4 )
                    dst[3] = 255;
            }
        else
            for( int i = 0; i < n; i++, dst += dcn )
            {
                unsigned t = ((const ushort*)src)[i];
                dst[bidx] = (uchar)(t << 3);
                dst[1] = (uchar)((t >> 2) & ~7);
                dst[bidx ^ 2] = (uchar)((t >> 7) & ~7);
                if( dcn == 4 )
                    dst[3] = t & 0x8000 ? 255 : 0;
            }
    }

    int dstcn, blueIdx, greenBits;
};


struct RGB2RGB5x5
{
    typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2RGB5x5(int _srccn, int _blueIdx, int _greenBits)
        : srccn(_srccn), blueIdx(_blueIdx), greenBits(_greenBits) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int scn = srccn, bidx = blueIdx;
        if( greenBits == 6 )
            for( int i = 0; i < n; i++, src += scn )
            {
                ((ushort*)dst)[i] = (ushort)((src[bidx] >> 3)|((src[1]&~3) << 3)|((src[bidx^2]&~7) << 8));
            }
        else if( scn == 3 )
            for( int i = 0; i < n; i++, src += 3 )
            {
                ((ushort*)dst)[i] = (ushort)((src[bidx] >> 3)|((src[1]&~7) << 2)|((src[bidx^2]&~7) << 7));
            }
        else
            for( int i = 0; i < n; i++, src += 4 )
            {
                ((ushort*)dst)[i] = (ushort)((src[bidx] >> 3)|((src[1]&~7) << 2)|
                    ((src[bidx^2]&~7) << 7)|(src[3] ? 0x8000 : 0));
            }
    }

    int srccn, blueIdx, greenBits;
};

///////////////////////////////// Color to/from Grayscale ////////////////////////////////

template<typename _Tp>
struct Gray2RGB
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    Gray2RGB(int _dstcn) : dstcn(_dstcn) {}
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        if( dstcn == 3 )
            for( int i = 0; i < n; i++, dst += 3 )
            {
                dst[0] = dst[1] = dst[2] = src[i];
            }
        else
        {
            _Tp alpha = ColorChannel<_Tp>::max();
            for( int i = 0; i < n; i++, dst += 4 )
            {
                dst[0] = dst[1] = dst[2] = src[i];
                dst[3] = alpha;
            }
        }
    }

    int dstcn;
};


struct Gray2RGB5x5
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    Gray2RGB5x5(int _greenBits) : greenBits(_greenBits) {}
    void operator()(const uchar* src, uchar* dst, int n) const
    {
        if( greenBits == 6 )
            for( int i = 0; i < n; i++ )
            {
                int t = src[i];
                ((ushort*)dst)[i] = (ushort)((t >> 3)|((t & ~3) << 3)|((t & ~7) << 8));
            }
        else
            for( int i = 0; i < n; i++ )
            {
                int t = src[i] >> 3;
                ((ushort*)dst)[i] = (ushort)(t|(t << 5)|(t << 10));
            }
    }
    int greenBits;
};


#undef R2Y
#undef G2Y
#undef B2Y

enum
{
    yuv_shift = 14,
    xyz_shift = 12,
    R2Y = 4899,
    G2Y = 9617,
    B2Y = 1868,
    BLOCK_SIZE = 256
};


struct RGB5x52Gray
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB5x52Gray(int _greenBits) : greenBits(_greenBits) {}
    void operator()(const uchar* src, uchar* dst, int n) const
    {
        if( greenBits == 6 )
            for( int i = 0; i < n; i++ )
            {
                int t = ((ushort*)src)[i];
                dst[i] = (uchar)CV_DESCALE(((t << 3) & 0xf8)*B2Y +
                                           ((t >> 3) & 0xfc)*G2Y +
                                           ((t >> 8) & 0xf8)*R2Y, yuv_shift);
            }
        else
            for( int i = 0; i < n; i++ )
            {
                int t = ((ushort*)src)[i];
                dst[i] = (uchar)CV_DESCALE(((t << 3) & 0xf8)*B2Y +
                                           ((t >> 2) & 0xf8)*G2Y +
                                           ((t >> 7) & 0xf8)*R2Y, yuv_shift);
            }
    }
    int greenBits;
};


template<typename _Tp> struct RGB2Gray
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2Gray(int _srccn, int blueIdx, const float* _coeffs) : srccn(_srccn)
    {
        static const float coeffs0[] = { 0.299f, 0.587f, 0.114f };
        memcpy( coeffs, _coeffs ? _coeffs : coeffs0, 3*sizeof(coeffs[0]) );
        if(blueIdx == 0)
            std::swap(coeffs[0], coeffs[2]);
    }

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn;
        float cb = coeffs[0], cg = coeffs[1], cr = coeffs[2];
        for(int i = 0; i < n; i++, src += scn)
            dst[i] = saturate_cast<_Tp>(src[0]*cb + src[1]*cg + src[2]*cr);
    }
    int srccn;
    float coeffs[3];
};


template<> struct RGB2Gray<uchar>
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2Gray(int _srccn, int blueIdx, const int* coeffs) : srccn(_srccn)
    {
        const int coeffs0[] = { R2Y, G2Y, B2Y };
        if(!coeffs) coeffs = coeffs0;

        int b = 0, g = 0, r = (1 << (yuv_shift-1));
        int db = coeffs[blueIdx^2], dg = coeffs[1], dr = coeffs[blueIdx];

        for( int i = 0; i < 256; i++, b += db, g += dg, r += dr )
        {
            tab[i] = b;
            tab[i+256] = g;
            tab[i+512] = r;
        }
    }
    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int scn = srccn;
        const int* _tab = tab;
        for(int i = 0; i < n; i++, src += scn)
            dst[i] = (uchar)((_tab[src[0]] + _tab[src[1]+256] + _tab[src[2]+512]) >> yuv_shift);
    }
    int srccn;
    int tab[256*3];
};


template<> struct RGB2Gray<ushort>
{
     typedef ushort src_channel_type; typedef ushort dst_channel_type;

    RGB2Gray(int _srccn, int blueIdx, const int* _coeffs) : srccn(_srccn)
    {
        static const int coeffs0[] = { R2Y, G2Y, B2Y };
        memcpy(coeffs, _coeffs ? _coeffs : coeffs0, 3*sizeof(coeffs[0]));
        if( blueIdx == 0 )
            std::swap(coeffs[0], coeffs[2]);
    }

    void operator()(const ushort* src, ushort* dst, int n) const
    {
        int scn = srccn, cb = coeffs[0], cg = coeffs[1], cr = coeffs[2];
        for(int i = 0; i < n; i++, src += scn)
            dst[i] = (ushort)CV_DESCALE((unsigned)(src[0]*cb + src[1]*cg + src[2]*cr), yuv_shift);
    }
    int srccn;
    int coeffs[3];
};


///////////////////////////////////// RGB <-> YCrCb //////////////////////////////////////

template<typename _Tp> struct RGB2YCrCb_f
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2YCrCb_f(int _srccn, int _blueIdx, const float* _coeffs) : srccn(_srccn), blueIdx(_blueIdx)
    {
        static const float coeffs0[] = {0.299f, 0.587f, 0.114f, 0.713f, 0.564f};
        memcpy(coeffs, _coeffs ? _coeffs : coeffs0, 5*sizeof(coeffs[0]));
        if(blueIdx==0) std::swap(coeffs[0], coeffs[2]);
    }

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn, bidx = blueIdx;
        const _Tp delta = ColorChannel<_Tp>::half();
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2], C3 = coeffs[3], C4 = coeffs[4];
        n *= 3;
        for(int i = 0; i < n; i += 3, src += scn)
        {
            _Tp Y = saturate_cast<_Tp>(src[0]*C0 + src[1]*C1 + src[2]*C2);
            _Tp Cr = saturate_cast<_Tp>((src[bidx^2] - Y)*C3 + delta);
            _Tp Cb = saturate_cast<_Tp>((src[bidx] - Y)*C4 + delta);
            dst[i] = Y; dst[i+1] = Cr; dst[i+2] = Cb;
        }
    }
    int srccn, blueIdx;
    float coeffs[5];
};


template<typename _Tp> struct RGB2YCrCb_i
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2YCrCb_i(int _srccn, int _blueIdx, const int* _coeffs)
        : srccn(_srccn), blueIdx(_blueIdx)
    {
        static const int coeffs0[] = {R2Y, G2Y, B2Y, 11682, 9241};
        memcpy(coeffs, _coeffs ? _coeffs : coeffs0, 5*sizeof(coeffs[0]));
        if(blueIdx==0) std::swap(coeffs[0], coeffs[2]);
    }
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn, bidx = blueIdx;
        int C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2], C3 = coeffs[3], C4 = coeffs[4];
        int delta = ColorChannel<_Tp>::half()*(1 << yuv_shift);
        n *= 3;
        for(int i = 0; i < n; i += 3, src += scn)
        {
            int Y = CV_DESCALE(src[0]*C0 + src[1]*C1 + src[2]*C2, yuv_shift);
            int Cr = CV_DESCALE((src[bidx^2] - Y)*C3 + delta, yuv_shift);
            int Cb = CV_DESCALE((src[bidx] - Y)*C4 + delta, yuv_shift);
            dst[i] = saturate_cast<_Tp>(Y);
            dst[i+1] = saturate_cast<_Tp>(Cr);
            dst[i+2] = saturate_cast<_Tp>(Cb);
        }
    }
    int srccn, blueIdx;
    int coeffs[5];
};


template<typename _Tp> struct YCrCb2RGB_f
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    YCrCb2RGB_f(int _dstcn, int _blueIdx, const float* _coeffs)
        : dstcn(_dstcn), blueIdx(_blueIdx)
    {
        static const float coeffs0[] = {1.403f, -0.714f, -0.344f, 1.773f};
        memcpy(coeffs, _coeffs ? _coeffs : coeffs0, 4*sizeof(coeffs[0]));
    }
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int dcn = dstcn, bidx = blueIdx;
        const _Tp delta = ColorChannel<_Tp>::half(), alpha = ColorChannel<_Tp>::max();
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2], C3 = coeffs[3];
        n *= 3;
        for(int i = 0; i < n; i += 3, dst += dcn)
        {
            _Tp Y = src[i];
            _Tp Cr = src[i+1];
            _Tp Cb = src[i+2];

            _Tp b = saturate_cast<_Tp>(Y + (Cb - delta)*C3);
            _Tp g = saturate_cast<_Tp>(Y + (Cb - delta)*C2 + (Cr - delta)*C1);
            _Tp r = saturate_cast<_Tp>(Y + (Cr - delta)*C0);

            dst[bidx] = b; dst[1] = g; dst[bidx^2] = r;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }
    int dstcn, blueIdx;
    float coeffs[4];
};


template<typename _Tp> struct YCrCb2RGB_i
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    YCrCb2RGB_i(int _dstcn, int _blueIdx, const int* _coeffs)
        : dstcn(_dstcn), blueIdx(_blueIdx)
    {
        static const int coeffs0[] = {22987, -11698, -5636, 29049};
        memcpy(coeffs, _coeffs ? _coeffs : coeffs0, 4*sizeof(coeffs[0]));
    }

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int dcn = dstcn, bidx = blueIdx;
        const _Tp delta = ColorChannel<_Tp>::half(), alpha = ColorChannel<_Tp>::max();
        int C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2], C3 = coeffs[3];
        n *= 3;
        for(int i = 0; i < n; i += 3, dst += dcn)
        {
            _Tp Y = src[i];
            _Tp Cr = src[i+1];
            _Tp Cb = src[i+2];

            int b = Y + CV_DESCALE((Cb - delta)*C3, yuv_shift);
            int g = Y + CV_DESCALE((Cb - delta)*C2 + (Cr - delta)*C1, yuv_shift);
            int r = Y + CV_DESCALE((Cr - delta)*C0, yuv_shift);

            dst[bidx] = saturate_cast<_Tp>(b);
            dst[1] = saturate_cast<_Tp>(g);
            dst[bidx^2] = saturate_cast<_Tp>(r);
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }
    int dstcn, blueIdx;
    int coeffs[4];
};


////////////////////////////////////// RGB <-> XYZ ///////////////////////////////////////

static const float sRGB2XYZ_D65[] =
{
    0.412453f, 0.357580f, 0.180423f,
    0.212671f, 0.715160f, 0.072169f,
    0.019334f, 0.119193f, 0.950227f
};

static const float XYZ2sRGB_D65[] =
{
    3.240479f, -1.53715f, -0.498535f,
    -0.969256f, 1.875991f, 0.041556f,
    0.055648f, -0.204043f, 1.057311f
};

template<typename _Tp> struct RGB2XYZ_f
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2XYZ_f(int _srccn, int blueIdx, const float* _coeffs) : srccn(_srccn)
    {
        memcpy(coeffs, _coeffs ? _coeffs : sRGB2XYZ_D65, 9*sizeof(coeffs[0]));
        if(blueIdx == 0)
        {
            std::swap(coeffs[0], coeffs[2]);
            std::swap(coeffs[3], coeffs[5]);
            std::swap(coeffs[6], coeffs[8]);
        }
    }
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn;
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
              C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
              C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];

        n *= 3;
        for(int i = 0; i < n; i += 3, src += scn)
        {
            _Tp X = saturate_cast<_Tp>(src[0]*C0 + src[1]*C1 + src[2]*C2);
            _Tp Y = saturate_cast<_Tp>(src[0]*C3 + src[1]*C4 + src[2]*C5);
            _Tp Z = saturate_cast<_Tp>(src[0]*C6 + src[1]*C7 + src[2]*C8);
            dst[i] = X; dst[i+1] = Y; dst[i+2] = Z;
        }
    }
    int srccn;
    float coeffs[9];
};


template<typename _Tp> struct RGB2XYZ_i
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    RGB2XYZ_i(int _srccn, int blueIdx, const float* _coeffs) : srccn(_srccn)
    {
        static const int coeffs0[] =
        {
            1689,    1465,    739,
            871,     2929,    296,
            79,      488,     3892
        };
        for( int i = 0; i < 9; i++ )
            coeffs[i] = _coeffs ? cvRound(_coeffs[i]*(1 << xyz_shift)) : coeffs0[i];
        if(blueIdx == 0)
        {
            std::swap(coeffs[0], coeffs[2]);
            std::swap(coeffs[3], coeffs[5]);
            std::swap(coeffs[6], coeffs[8]);
        }
    }
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int scn = srccn;
        int C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
            C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
            C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        n *= 3;
        for(int i = 0; i < n; i += 3, src += scn)
        {
            int X = CV_DESCALE(src[0]*C0 + src[1]*C1 + src[2]*C2, xyz_shift);
            int Y = CV_DESCALE(src[0]*C3 + src[1]*C4 + src[2]*C5, xyz_shift);
            int Z = CV_DESCALE(src[0]*C6 + src[1]*C7 + src[2]*C8, xyz_shift);
            dst[i] = saturate_cast<_Tp>(X); dst[i+1] = saturate_cast<_Tp>(Y);
            dst[i+2] = saturate_cast<_Tp>(Z);
        }
    }
    int srccn;
    int coeffs[9];
};


template<typename _Tp> struct XYZ2RGB_f
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    XYZ2RGB_f(int _dstcn, int _blueIdx, const float* _coeffs)
    : dstcn(_dstcn), blueIdx(_blueIdx)
    {
        memcpy(coeffs, _coeffs ? _coeffs : XYZ2sRGB_D65, 9*sizeof(coeffs[0]));
        if(blueIdx == 0)
        {
            std::swap(coeffs[0], coeffs[6]);
            std::swap(coeffs[1], coeffs[7]);
            std::swap(coeffs[2], coeffs[8]);
        }
    }

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int dcn = dstcn;
        _Tp alpha = ColorChannel<_Tp>::max();
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
              C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
              C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        n *= 3;
        for(int i = 0; i < n; i += 3, dst += dcn)
        {
            _Tp B = saturate_cast<_Tp>(src[i]*C0 + src[i+1]*C1 + src[i+2]*C2);
            _Tp G = saturate_cast<_Tp>(src[i]*C3 + src[i+1]*C4 + src[i+2]*C5);
            _Tp R = saturate_cast<_Tp>(src[i]*C6 + src[i+1]*C7 + src[i+2]*C8);
            dst[0] = B; dst[1] = G; dst[2] = R;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }
    int dstcn, blueIdx;
    float coeffs[9];
};


template<typename _Tp> struct XYZ2RGB_i
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    XYZ2RGB_i(int _dstcn, int _blueIdx, const int* _coeffs)
    : dstcn(_dstcn), blueIdx(_blueIdx)
    {
        static const int coeffs0[] =
        {
            13273,  -6296,  -2042,
            -3970,   7684,    170,
              228,   -836,   4331
        };
        for(int i = 0; i < 9; i++)
            coeffs[i] = _coeffs ? cvRound(_coeffs[i]*(1 << xyz_shift)) : coeffs0[i];

        if(blueIdx == 0)
        {
            std::swap(coeffs[0], coeffs[6]);
            std::swap(coeffs[1], coeffs[7]);
            std::swap(coeffs[2], coeffs[8]);
        }
    }
    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        int dcn = dstcn;
        _Tp alpha = ColorChannel<_Tp>::max();
        int C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
            C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
            C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        n *= 3;
        for(int i = 0; i < n; i += 3, dst += dcn)
        {
            int B = CV_DESCALE(src[i]*C0 + src[i+1]*C1 + src[i+2]*C2, xyz_shift);
            int G = CV_DESCALE(src[i]*C3 + src[i+1]*C4 + src[i+2]*C5, xyz_shift);
            int R = CV_DESCALE(src[i]*C6 + src[i+1]*C7 + src[i+2]*C8, xyz_shift);
            dst[0] = saturate_cast<_Tp>(B); dst[1] = saturate_cast<_Tp>(G);
            dst[2] = saturate_cast<_Tp>(R);
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }
    int dstcn, blueIdx;
    int coeffs[9];
};


////////////////////////////////////// RGB <-> HSV ///////////////////////////////////////


struct RGB2HSV_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2HSV_b(int _srccn, int _blueIdx, int _hrange)
    : srccn(_srccn), blueIdx(_blueIdx), hrange(_hrange)
    {
        CV_Assert( hrange == 180 || hrange == 256 );
    }

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, bidx = blueIdx, scn = srccn;
        const int hsv_shift = 12;

        static int sdiv_table[256];
        static int hdiv_table180[256];
        static int hdiv_table256[256];
        static volatile bool initialized = false;

        int hr = hrange;
        const int* hdiv_table = hr == 180 ? hdiv_table180 : hdiv_table256;
        n *= 3;

        if( !initialized )
        {
            sdiv_table[0] = hdiv_table180[0] = hdiv_table256[0] = 0;
            for( i = 1; i < 256; i++ )
            {
                sdiv_table[i] = saturate_cast<int>((255 << hsv_shift)/(1.*i));
                hdiv_table180[i] = saturate_cast<int>((180 << hsv_shift)/(6.*i));
                hdiv_table256[i] = saturate_cast<int>((256 << hsv_shift)/(6.*i));
            }
            initialized = true;
        }

        for( i = 0; i < n; i += 3, src += scn )
        {
            int b = src[bidx], g = src[1], r = src[bidx^2];
            int h, s, v = b;
            int vmin = b, diff;
            int vr, vg;

            CV_CALC_MAX_8U( v, g );
            CV_CALC_MAX_8U( v, r );
            CV_CALC_MIN_8U( vmin, g );
            CV_CALC_MIN_8U( vmin, r );

            diff = v - vmin;
            vr = v == r ? -1 : 0;
            vg = v == g ? -1 : 0;

            s = (diff * sdiv_table[v] + (1 << (hsv_shift-1))) >> hsv_shift;
            h = (vr & (g - b)) +
                (~vr & ((vg & (b - r + 2 * diff)) + ((~vg) & (r - g + 4 * diff))));
            h = (h * hdiv_table[diff] + (1 << (hsv_shift-1))) >> hsv_shift;
            h += h < 0 ? hr : 0;

            dst[i] = saturate_cast<uchar>(h);
            dst[i+1] = (uchar)s;
            dst[i+2] = (uchar)v;
        }
    }

    int srccn, blueIdx, hrange;
};


struct RGB2HSV_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    RGB2HSV_f(int _srccn, int _blueIdx, float _hrange)
    : srccn(_srccn), blueIdx(_blueIdx), hrange(_hrange) {}

    void operator()(const float* src, float* dst, int n) const
    {
        int i, bidx = blueIdx, scn = srccn;
        float hscale = hrange*(1.f/360.f);
        n *= 3;

        for( i = 0; i < n; i += 3, src += scn )
        {
            float b = src[bidx], g = src[1], r = src[bidx^2];
            float h, s, v;

            float vmin, diff;

            v = vmin = r;
            if( v < g ) v = g;
            if( v < b ) v = b;
            if( vmin > g ) vmin = g;
            if( vmin > b ) vmin = b;

            diff = v - vmin;
            s = diff/(float)(fabs(v) + FLT_EPSILON);
            diff = (float)(60./(diff + FLT_EPSILON));
            if( v == r )
                h = (g - b)*diff;
            else if( v == g )
                h = (b - r)*diff + 120.f;
            else
                h = (r - g)*diff + 240.f;

            if( h < 0 ) h += 360.f;

            dst[i] = h*hscale;
            dst[i+1] = s;
            dst[i+2] = v;
        }
    }

    int srccn, blueIdx;
    float hrange;
};


struct HSV2RGB_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    HSV2RGB_f(int _dstcn, int _blueIdx, float _hrange)
    : dstcn(_dstcn), blueIdx(_blueIdx), hscale(6.f/_hrange) {}

    void operator()(const float* src, float* dst, int n) const
    {
        int i, bidx = blueIdx, dcn = dstcn;
        float _hscale = hscale;
        float alpha = ColorChannel<float>::max();
        n *= 3;

        for( i = 0; i < n; i += 3, dst += dcn )
        {
            float h = src[i], s = src[i+1], v = src[i+2];
            float b, g, r;

            if( s == 0 )
                b = g = r = v;
            else
            {
                static const int sector_data[][3]=
                    {{1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0}};
                float tab[4];
                int sector;
                h *= _hscale;
                if( h < 0 )
                    do h += 6; while( h < 0 );
                else if( h >= 6 )
                    do h -= 6; while( h >= 6 );
                sector = cvFloor(h);
                h -= sector;
                if( (unsigned)sector >= 6u )
                {
                    sector = 0;
                    h = 0.f;
                }

                tab[0] = v;
                tab[1] = v*(1.f - s);
                tab[2] = v*(1.f - s*h);
                tab[3] = v*(1.f - s*(1.f - h));

                b = tab[sector_data[sector][0]];
                g = tab[sector_data[sector][1]];
                r = tab[sector_data[sector][2]];
            }

            dst[bidx] = b;
            dst[1] = g;
            dst[bidx^2] = r;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }

    int dstcn, blueIdx;
    float hscale;
};


struct HSV2RGB_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    HSV2RGB_b(int _dstcn, int _blueIdx, int _hrange)
    : dstcn(_dstcn), cvt(3, _blueIdx, (float)_hrange)
    {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, dcn = dstcn;
        uchar alpha = ColorChannel<uchar>::max();
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, src += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3 )
            {
                buf[j] = src[j];
                buf[j+1] = src[j+1]*(1.f/255.f);
                buf[j+2] = src[j+2]*(1.f/255.f);
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3, dst += dcn )
            {
                dst[0] = saturate_cast<uchar>(buf[j]*255.f);
                dst[1] = saturate_cast<uchar>(buf[j+1]*255.f);
                dst[2] = saturate_cast<uchar>(buf[j+2]*255.f);
                if( dcn == 4 )
                    dst[3] = alpha;
            }
        }
    }

    int dstcn;
    HSV2RGB_f cvt;
};


///////////////////////////////////// RGB <-> HLS ////////////////////////////////////////

struct RGB2HLS_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    RGB2HLS_f(int _srccn, int _blueIdx, float _hrange)
    : srccn(_srccn), blueIdx(_blueIdx), hrange(_hrange) {}

    void operator()(const float* src, float* dst, int n) const
    {
        int i, bidx = blueIdx, scn = srccn;
        float hscale = hrange*(1.f/360.f);
        n *= 3;

        for( i = 0; i < n; i += 3, src += scn )
        {
            float b = src[bidx], g = src[1], r = src[bidx^2];
            float h = 0.f, s = 0.f, l;
            float vmin, vmax, diff;

            vmax = vmin = r;
            if( vmax < g ) vmax = g;
            if( vmax < b ) vmax = b;
            if( vmin > g ) vmin = g;
            if( vmin > b ) vmin = b;

            diff = vmax - vmin;
            l = (vmax + vmin)*0.5f;

            if( diff > FLT_EPSILON )
            {
                s = l < 0.5f ? diff/(vmax + vmin) : diff/(2 - vmax - vmin);
                diff = 60.f/diff;

                if( vmax == r )
                    h = (g - b)*diff;
                else if( vmax == g )
                    h = (b - r)*diff + 120.f;
                else
                    h = (r - g)*diff + 240.f;

                if( h < 0.f ) h += 360.f;
            }

            dst[i] = h*hscale;
            dst[i+1] = l;
            dst[i+2] = s;
        }
    }

    int srccn, blueIdx;
    float hrange;
};


struct RGB2HLS_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2HLS_b(int _srccn, int _blueIdx, int _hrange)
    : srccn(_srccn), cvt(3, _blueIdx, (float)_hrange) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, scn = srccn;
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, dst += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3, src += scn )
            {
                buf[j] = src[0]*(1.f/255.f);
                buf[j+1] = src[1]*(1.f/255.f);
                buf[j+2] = src[2]*(1.f/255.f);
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3 )
            {
                dst[j] = saturate_cast<uchar>(buf[j]);
                dst[j+1] = saturate_cast<uchar>(buf[j+1]*255.f);
                dst[j+2] = saturate_cast<uchar>(buf[j+2]*255.f);
            }
        }
    }

    int srccn;
    RGB2HLS_f cvt;
};


struct HLS2RGB_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    HLS2RGB_f(int _dstcn, int _blueIdx, float _hrange)
    : dstcn(_dstcn), blueIdx(_blueIdx), hscale(6.f/_hrange) {}

    void operator()(const float* src, float* dst, int n) const
    {
        int i, bidx = blueIdx, dcn = dstcn;
        float _hscale = hscale;
        float alpha = ColorChannel<float>::max();
        n *= 3;

        for( i = 0; i < n; i += 3, dst += dcn )
        {
            float h = src[i], l = src[i+1], s = src[i+2];
            float b, g, r;

            if( s == 0 )
                b = g = r = l;
            else
            {
                static const int sector_data[][3]=
                {{1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0}};
                float tab[4];
                int sector;

                float p2 = l <= 0.5f ? l*(1 + s) : l + s - l*s;
                float p1 = 2*l - p2;

                h *= _hscale;
                if( h < 0 )
                    do h += 6; while( h < 0 );
                else if( h >= 6 )
                    do h -= 6; while( h >= 6 );

                assert( 0 <= h && h < 6 );
                sector = cvFloor(h);
                h -= sector;

                tab[0] = p2;
                tab[1] = p1;
                tab[2] = p1 + (p2 - p1)*(1-h);
                tab[3] = p1 + (p2 - p1)*h;

                b = tab[sector_data[sector][0]];
                g = tab[sector_data[sector][1]];
                r = tab[sector_data[sector][2]];
            }

            dst[bidx] = b;
            dst[1] = g;
            dst[bidx^2] = r;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }

    int dstcn, blueIdx;
    float hscale;
};


struct HLS2RGB_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    HLS2RGB_b(int _dstcn, int _blueIdx, int _hrange)
    : dstcn(_dstcn), cvt(3, _blueIdx, (float)_hrange)
    {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, dcn = dstcn;
        uchar alpha = ColorChannel<uchar>::max();
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, src += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3 )
            {
                buf[j] = src[j];
                buf[j+1] = src[j+1]*(1.f/255.f);
                buf[j+2] = src[j+2]*(1.f/255.f);
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3, dst += dcn )
            {
                dst[0] = saturate_cast<uchar>(buf[j]*255.f);
                dst[1] = saturate_cast<uchar>(buf[j+1]*255.f);
                dst[2] = saturate_cast<uchar>(buf[j+2]*255.f);
                if( dcn == 4 )
                    dst[3] = alpha;
            }
        }
    }

    int dstcn;
    HLS2RGB_f cvt;
};


///////////////////////////////////// RGB <-> L*a*b* /////////////////////////////////////

static const float D65[] = { 0.950456f, 1.f, 1.088754f };

enum { LAB_CBRT_TAB_SIZE = 1024, GAMMA_TAB_SIZE = 1024 };
static float LabCbrtTab[LAB_CBRT_TAB_SIZE*4];
static const float LabCbrtTabScale = LAB_CBRT_TAB_SIZE/1.5f;

static float sRGBGammaTab[GAMMA_TAB_SIZE*4], sRGBInvGammaTab[GAMMA_TAB_SIZE*4];
static const float GammaTabScale = (float)GAMMA_TAB_SIZE;

static ushort sRGBGammaTab_b[256], linearGammaTab_b[256];
#undef lab_shift
#define lab_shift xyz_shift
#define gamma_shift 3
#define lab_shift2 (lab_shift + gamma_shift)
#define LAB_CBRT_TAB_SIZE_B (256*3/2*(1<<gamma_shift))
static ushort LabCbrtTab_b[LAB_CBRT_TAB_SIZE_B];

static void initLabTabs()
{
    static bool initialized = false;
    if(!initialized)
    {
        float f[LAB_CBRT_TAB_SIZE+1], g[GAMMA_TAB_SIZE+1], ig[GAMMA_TAB_SIZE+1], scale = 1.f/LabCbrtTabScale;
        int i;
        for(i = 0; i <= LAB_CBRT_TAB_SIZE; i++)
        {
            float x = i*scale;
            f[i] = x < 0.008856f ? x*7.787f + 0.13793103448275862f : cvCbrt(x);
        }
        splineBuild(f, LAB_CBRT_TAB_SIZE, LabCbrtTab);

        scale = 1.f/GammaTabScale;
        for(i = 0; i <= GAMMA_TAB_SIZE; i++)
        {
            float x = i*scale;
            g[i] = x <= 0.04045f ? x*(1.f/12.92f) : (float)std::pow((double)(x + 0.055)*(1./1.055), 2.4);
            ig[i] = x <= 0.0031308 ? x*12.92f : (float)(1.055*std::pow((double)x, 1./2.4) - 0.055);
        }
        splineBuild(g, GAMMA_TAB_SIZE, sRGBGammaTab);
        splineBuild(ig, GAMMA_TAB_SIZE, sRGBInvGammaTab);

        for(i = 0; i < 256; i++)
        {
            float x = i*(1.f/255.f);
            sRGBGammaTab_b[i] = saturate_cast<ushort>(255.f*(1 << gamma_shift)*(x <= 0.04045f ? x*(1.f/12.92f) : (float)std::pow((double)(x + 0.055)*(1./1.055), 2.4)));
            linearGammaTab_b[i] = (ushort)(i*(1 << gamma_shift));
        }

        for(i = 0; i < LAB_CBRT_TAB_SIZE_B; i++)
        {
            float x = i*(1.f/(255.f*(1 << gamma_shift)));
            LabCbrtTab_b[i] = saturate_cast<ushort>((1 << lab_shift2)*(x < 0.008856f ? x*7.787f + 0.13793103448275862f : cvCbrt(x)));
        }
        initialized = true;
    }
}

struct RGB2Lab_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2Lab_b(int _srccn, int blueIdx, const float* _coeffs,
              const float* _whitept, bool _srgb)
    : srccn(_srccn), srgb(_srgb)
    {
        static volatile int _3 = 3;
        initLabTabs();

        if(!_coeffs) _coeffs = sRGB2XYZ_D65;
        if(!_whitept) _whitept = D65;
        float scale[] =
        {
            (1 << lab_shift)/_whitept[0],
            (float)(1 << lab_shift),
            (1 << lab_shift)/_whitept[2]
        };

        for( int i = 0; i < _3; i++ )
        {
            coeffs[i*3+(blueIdx^2)] = cvRound(_coeffs[i*3]*scale[i]);
            coeffs[i*3+1] = cvRound(_coeffs[i*3+1]*scale[i]);
            coeffs[i*3+blueIdx] = cvRound(_coeffs[i*3+2]*scale[i]);

            CV_Assert( coeffs[i] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 &&
                      coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift) );
        }
    }

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        const int Lscale = (116*255+50)/100;
        const int Lshift = -((16*255*(1 << lab_shift2) + 50)/100);
        const ushort* tab = srgb ? sRGBGammaTab_b : linearGammaTab_b;
        int i, scn = srccn;
        int C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
            C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
            C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        n *= 3;

        for( i = 0; i < n; i += 3, src += scn )
        {
            int R = tab[src[0]], G = tab[src[1]], B = tab[src[2]];
            int fX = LabCbrtTab_b[CV_DESCALE(R*C0 + G*C1 + B*C2, lab_shift)];
            int fY = LabCbrtTab_b[CV_DESCALE(R*C3 + G*C4 + B*C5, lab_shift)];
            int fZ = LabCbrtTab_b[CV_DESCALE(R*C6 + G*C7 + B*C8, lab_shift)];

            int L = CV_DESCALE( Lscale*fY + Lshift, lab_shift2 );
            int a = CV_DESCALE( 500*(fX - fY) + 128*(1 << lab_shift2), lab_shift2 );
            int b = CV_DESCALE( 200*(fY - fZ) + 128*(1 << lab_shift2), lab_shift2 );

            dst[i] = saturate_cast<uchar>(L);
            dst[i+1] = saturate_cast<uchar>(a);
            dst[i+2] = saturate_cast<uchar>(b);
        }
    }

    int srccn;
    int coeffs[9];
    bool srgb;
};


#define clip(value) \
    value < 0.0f ? 0.0f : value > 1.0f ? 1.0f : value;

struct RGB2Lab_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    RGB2Lab_f(int _srccn, int blueIdx, const float* _coeffs,
              const float* _whitept, bool _srgb)
    : srccn(_srccn), srgb(_srgb)
    {
        volatile int _3 = 3;
        initLabTabs();

        if (!_coeffs)
            _coeffs = sRGB2XYZ_D65;
        if (!_whitept)
            _whitept = D65;

        float scale[] = { 1.0f / _whitept[0], 1.0f, 1.0f / _whitept[2] };

        for( int i = 0; i < _3; i++ )
        {
            int j = i * 3;
            coeffs[j + (blueIdx ^ 2)] = _coeffs[j] * scale[i];
            coeffs[j + 1] = _coeffs[j + 1] * scale[i];
            coeffs[j + blueIdx] = _coeffs[j + 2] * scale[i];

            CV_Assert( coeffs[j] >= 0 && coeffs[j + 1] >= 0 && coeffs[j + 2] >= 0 &&
                       coeffs[j] + coeffs[j + 1] + coeffs[j + 2] < 1.5f*LabCbrtTabScale );
        }
    }

    void operator()(const float* src, float* dst, int n) const
    {
        int i, scn = srccn;
        float gscale = GammaTabScale;
        const float* gammaTab = srgb ? sRGBGammaTab : 0;
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
              C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
              C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        n *= 3;

        static const float _1_3 = 1.0f / 3.0f;
        static const float _a = 16.0f / 116.0f;
        for (i = 0; i < n; i += 3, src += scn )
        {
            float R = clip(src[0]);
            float G = clip(src[1]);
            float B = clip(src[2]);

//            CV_Assert(R >= 0.0f && R <= 1.0f);
//            CV_Assert(G >= 0.0f && G <= 1.0f);
//            CV_Assert(B >= 0.0f && B <= 1.0f);

            if (gammaTab)
            {
                R = splineInterpolate(R * gscale, gammaTab, GAMMA_TAB_SIZE);
                G = splineInterpolate(G * gscale, gammaTab, GAMMA_TAB_SIZE);
                B = splineInterpolate(B * gscale, gammaTab, GAMMA_TAB_SIZE);
            }
            float X = R*C0 + G*C1 + B*C2;
            float Y = R*C3 + G*C4 + B*C5;
            float Z = R*C6 + G*C7 + B*C8;

            float FX = X > 0.008856f ? std::pow(X, _1_3) : (7.787f * X + _a);
            float FY = Y > 0.008856f ? std::pow(Y, _1_3) : (7.787f * Y + _a);
            float FZ = Z > 0.008856f ? std::pow(Z, _1_3) : (7.787f * Z + _a);

            float L = Y > 0.008856f ? (116.f * FY - 16.f) : (903.3f * Y);
            float a = 500.f * (FX - FY);
            float b = 200.f * (FY - FZ);

            dst[i] = L;
            dst[i + 1] = a;
            dst[i + 2] = b;
        }
    }

    int srccn;
    float coeffs[9];
    bool srgb;
};

struct Lab2RGB_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    Lab2RGB_f( int _dstcn, int blueIdx, const float* _coeffs,
              const float* _whitept, bool _srgb )
    : dstcn(_dstcn), srgb(_srgb), blueInd(blueIdx)
    {
        initLabTabs();

        if(!_coeffs)
            _coeffs = XYZ2sRGB_D65;
        if(!_whitept)
            _whitept = D65;

        for( int i = 0; i < 3; i++ )
        {
            coeffs[i+(blueIdx^2)*3] = _coeffs[i]*_whitept[i];
            coeffs[i+3] = _coeffs[i+3]*_whitept[i];
            coeffs[i+blueIdx*3] = _coeffs[i+6]*_whitept[i];
        }
    }

    void operator()(const float* src, float* dst, int n) const
    {
        int i, dcn = dstcn;
        const float* gammaTab = srgb ? sRGBInvGammaTab : 0;
        float gscale = GammaTabScale;
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
        C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
        C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        float alpha = ColorChannel<float>::max();
        n *= 3;

        static const float lThresh = 0.008856f * 903.3f;
        static const float fThresh = 7.787f * 0.008856f + 16.0f / 116.0f;
        for (i = 0; i < n; i += 3, dst += dcn)
        {
            float li = src[i];
            float ai = src[i + 1];
            float bi = src[i + 2];

            float y, fy;
            if (li <= lThresh)
            {
                y = li / 903.3f;
                fy = 7.787f * y + 16.0f / 116.0f;
            }
            else
            {
                fy = (li + 16.0f) / 116.0f;
                y = fy * fy * fy;
            }

            float fxz[] = { ai / 500.0f + fy, fy - bi / 200.0f };

            for (int j = 0; j < 2; j++)
                if (fxz[j] <= fThresh)
                    fxz[j] = (fxz[j] - 16.0f / 116.0f) / 7.787f;
                else
                    fxz[j] = fxz[j] * fxz[j] * fxz[j];


            float x = fxz[0], z = fxz[1];
            float ro = clip(C0 * x + C1 * y + C2 * z);
            float go = clip(C3 * x + C4 * y + C5 * z);
            float bo = clip(C6 * x + C7 * y + C8 * z);

//            CV_Assert(ro >= 0.0f && ro <= 1.0f);
//            CV_Assert(go >= 0.0f && go <= 1.0f);
//            CV_Assert(bo >= 0.0f && bo <= 1.0f);

            if (gammaTab)
            {
                ro = splineInterpolate(ro * gscale, gammaTab, GAMMA_TAB_SIZE);
                go = splineInterpolate(go * gscale, gammaTab, GAMMA_TAB_SIZE);
                bo = splineInterpolate(bo * gscale, gammaTab, GAMMA_TAB_SIZE);
            }

            dst[0] = ro, dst[1] = go, dst[2] = bo;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }

    int dstcn;
    float coeffs[9];
    bool srgb;
    int blueInd;
};

#undef clip

struct Lab2RGB_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    Lab2RGB_b( int _dstcn, int blueIdx, const float* _coeffs,
               const float* _whitept, bool _srgb )
    : dstcn(_dstcn), cvt(3, blueIdx, _coeffs, _whitept, _srgb ) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, dcn = dstcn;
        uchar alpha = ColorChannel<uchar>::max();
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, src += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3 )
            {
                buf[j] = src[j]*(100.f/255.f);
                buf[j+1] = (float)(src[j+1] - 128);
                buf[j+2] = (float)(src[j+2] - 128);
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3, dst += dcn )
            {
                dst[0] = saturate_cast<uchar>(buf[j]*255.f);
                dst[1] = saturate_cast<uchar>(buf[j+1]*255.f);
                dst[2] = saturate_cast<uchar>(buf[j+2]*255.f);
                if( dcn == 4 )
                    dst[3] = alpha;
            }
        }
    }

    int dstcn;
    Lab2RGB_f cvt;
};


///////////////////////////////////// RGB <-> L*u*v* /////////////////////////////////////

struct RGB2Luv_f
{
     typedef float src_channel_type; typedef float dst_channel_type;

    RGB2Luv_f( int _srccn, int blueIdx, const float* _coeffs,
               const float* whitept, bool _srgb )
    : srccn(_srccn), srgb(_srgb)
    {
        volatile int i;
        initLabTabs();

        if(!_coeffs) _coeffs = sRGB2XYZ_D65;
        if(!whitept) whitept = D65;

        for( i = 0; i < 3; i++ )
        {
            coeffs[i*3] = _coeffs[i*3];
            coeffs[i*3+1] = _coeffs[i*3+1];
            coeffs[i*3+2] = _coeffs[i*3+2];
            if( blueIdx == 0 )
                std::swap(coeffs[i*3], coeffs[i*3+2]);
            CV_Assert( coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 &&
                      coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 1.5f );
        }

        float d = 1.f/(whitept[0] + whitept[1]*15 + whitept[2]*3);
        un = 4*whitept[0]*d;
        vn = 9*whitept[1]*d;

        CV_Assert(whitept[1] == 1.f);
    }

    void operator()(const float* src, float* dst, int n) const
    {
        int i, scn = srccn;
        float gscale = GammaTabScale;
        const float* gammaTab = srgb ? sRGBGammaTab : 0;
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
              C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
              C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        float _un = 13*un, _vn = 13*vn;
        n *= 3;

        for( i = 0; i < n; i += 3, src += scn )
        {
            float R = src[0], G = src[1], B = src[2];
            if( gammaTab )
            {
                R = splineInterpolate(R*gscale, gammaTab, GAMMA_TAB_SIZE);
                G = splineInterpolate(G*gscale, gammaTab, GAMMA_TAB_SIZE);
                B = splineInterpolate(B*gscale, gammaTab, GAMMA_TAB_SIZE);
            }

            float X = R*C0 + G*C1 + B*C2;
            float Y = R*C3 + G*C4 + B*C5;
            float Z = R*C6 + G*C7 + B*C8;

            float L = splineInterpolate(Y*LabCbrtTabScale, LabCbrtTab, LAB_CBRT_TAB_SIZE);
            L = 116.f*L - 16.f;

            float d = (4*13) / std::max(X + 15 * Y + 3 * Z, FLT_EPSILON);
            float u = L*(X*d - _un);
            float v = L*((9*0.25f)*Y*d - _vn);

            dst[i] = L; dst[i+1] = u; dst[i+2] = v;
        }
    }

    int srccn;
    float coeffs[9], un, vn;
    bool srgb;
};


struct Luv2RGB_f
{
    typedef float src_channel_type; typedef float dst_channel_type;

    Luv2RGB_f( int _dstcn, int blueIdx, const float* _coeffs,
              const float* whitept, bool _srgb )
    : dstcn(_dstcn), srgb(_srgb)
    {
        initLabTabs();

        if(!_coeffs) _coeffs = XYZ2sRGB_D65;
        if(!whitept) whitept = D65;

        for( int i = 0; i < 3; i++ )
        {
            coeffs[i+(blueIdx^2)*3] = _coeffs[i];
            coeffs[i+3] = _coeffs[i+3];
            coeffs[i+blueIdx*3] = _coeffs[i+6];
        }

        float d = 1.f/(whitept[0] + whitept[1]*15 + whitept[2]*3);
        un = 4*whitept[0]*d;
        vn = 9*whitept[1]*d;

        CV_Assert(whitept[1] == 1.f);
    }

    void operator()(const float* src, float* dst, int n) const
    {
        int i, dcn = dstcn;
        const float* gammaTab = srgb ? sRGBInvGammaTab : 0;
        float gscale = GammaTabScale;
        float C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],
              C3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],
              C6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];
        float alpha = ColorChannel<float>::max();
        float _un = un, _vn = vn;
        n *= 3;

        for( i = 0; i < n; i += 3, dst += dcn )
        {
            float L = src[i], u = src[i+1], v = src[i+2], d, X, Y, Z;
            Y = (L + 16.f) * (1.f/116.f);
            Y = Y*Y*Y;
            d = (1.f/13.f)/L;
            u = u*d + _un;
            v = v*d + _vn;
            float iv = 1.f/v;
            X = 2.25f * u * Y * iv ;
            Z = (12 - 3 * u - 20 * v) * Y * 0.25f * iv;

            float R = X*C0 + Y*C1 + Z*C2;
            float G = X*C3 + Y*C4 + Z*C5;
            float B = X*C6 + Y*C7 + Z*C8;

            if( gammaTab )
            {
                R = splineInterpolate(R*gscale, gammaTab, GAMMA_TAB_SIZE);
                G = splineInterpolate(G*gscale, gammaTab, GAMMA_TAB_SIZE);
                B = splineInterpolate(B*gscale, gammaTab, GAMMA_TAB_SIZE);
            }

            dst[0] = R; dst[1] = G; dst[2] = B;
            if( dcn == 4 )
                dst[3] = alpha;
        }
    }

    int dstcn;
    float coeffs[9], un, vn;
    bool srgb;
};


struct RGB2Luv_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    RGB2Luv_b( int _srccn, int blueIdx, const float* _coeffs,
               const float* _whitept, bool _srgb )
    : srccn(_srccn), cvt(3, blueIdx, _coeffs, _whitept, _srgb) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, scn = srccn;
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, dst += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3, src += scn )
            {
                buf[j] = src[0]*(1.f/255.f);
                buf[j+1] = (float)(src[1]*(1.f/255.f));
                buf[j+2] = (float)(src[2]*(1.f/255.f));
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3 )
            {
                dst[j] = saturate_cast<uchar>(buf[j]*2.55f);
                dst[j+1] = saturate_cast<uchar>(buf[j+1]*0.72033898305084743f + 96.525423728813564f);
                dst[j+2] = saturate_cast<uchar>(buf[j+2]*0.99609375f + 139.453125f);
            }
        }
    }

    int srccn;
    RGB2Luv_f cvt;
};


struct Luv2RGB_b
{
     typedef uchar src_channel_type; typedef uchar dst_channel_type;

    Luv2RGB_b( int _dstcn, int blueIdx, const float* _coeffs,
               const float* _whitept, bool _srgb )
    : dstcn(_dstcn), cvt(3, blueIdx, _coeffs, _whitept, _srgb ) {}

    void operator()(const uchar* src, uchar* dst, int n) const
    {
        int i, j, dcn = dstcn;
        uchar alpha = ColorChannel<uchar>::max();
        float buf[3*BLOCK_SIZE];

        for( i = 0; i < n; i += BLOCK_SIZE, src += BLOCK_SIZE*3 )
        {
            int dn = std::min(n - i, (int)BLOCK_SIZE);

            for( j = 0; j < dn*3; j += 3 )
            {
                buf[j] = src[j]*(100.f/255.f);
                buf[j+1] = (float)(src[j+1]*1.388235294117647f - 134.f);
                buf[j+2] = (float)(src[j+2]*1.003921568627451f - 140.f);
            }
            cvt(buf, buf, dn);

            for( j = 0; j < dn*3; j += 3, dst += dcn )
            {
                dst[0] = saturate_cast<uchar>(buf[j]*255.f);
                dst[1] = saturate_cast<uchar>(buf[j+1]*255.f);
                dst[2] = saturate_cast<uchar>(buf[j+2]*255.f);
                if( dcn == 4 )
                    dst[3] = alpha;
            }
        }
    }

    int dstcn;
    Luv2RGB_f cvt;
};


///////////////////////////////////// YUV420 -> RGB /////////////////////////////////////

const int ITUR_BT_601_CY = 1220542;
const int ITUR_BT_601_CUB = 2116026;
const int ITUR_BT_601_CUG = -409993;
const int ITUR_BT_601_CVG = -852492;
const int ITUR_BT_601_CVR = 1673527;
const int ITUR_BT_601_SHIFT = 20;

// Coefficients for RGB to YUV420p conversion
const int ITUR_BT_601_CRY =  269484;
const int ITUR_BT_601_CGY =  528482;
const int ITUR_BT_601_CBY =  102760;
const int ITUR_BT_601_CRU = -155188;
const int ITUR_BT_601_CGU = -305135;
const int ITUR_BT_601_CBU =  460324;
const int ITUR_BT_601_CGV = -385875;
const int ITUR_BT_601_CBV = -74448;

template<int bIdx, int uIdx>
struct YUV420sp2RGB888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* my1, *muv;
    int width, stride;

    YUV420sp2RGB888Invoker(Mat* _dst, int _stride, const uchar* _y1, const uchar* _uv)
        : dst(_dst), my1(_y1), muv(_uv), width(_dst->cols), stride(_stride) {}

    void operator()(const Range& range) const
    {
        int rangeBegin = range.start * 2;
        int rangeEnd = range.end * 2;

        //R = 1.164(Y - 16) + 1.596(V - 128)
        //G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128)
        //B = 1.164(Y - 16)                  + 2.018(U - 128)

        //R = (1220542(Y - 16) + 1673527(V - 128)                  + (1 << 19)) >> 20
        //G = (1220542(Y - 16) - 852492(V - 128) - 409993(U - 128) + (1 << 19)) >> 20
        //B = (1220542(Y - 16)                  + 2116026(U - 128) + (1 << 19)) >> 20

        const uchar* y1 = my1 + rangeBegin * stride, *uv = muv + rangeBegin * stride / 2;

#ifdef HAVE_TEGRA_OPTIMIZATION
        if(tegra::cvtYUV4202RGB(bIdx, uIdx, 3, y1, uv, stride, dst->ptr<uchar>(rangeBegin), dst->step, rangeEnd - rangeBegin, dst->cols))
            return;
#endif

        for (int j = rangeBegin; j < rangeEnd; j += 2, y1 += stride * 2, uv += stride)
        {
            uchar* row1 = dst->ptr<uchar>(j);
            uchar* row2 = dst->ptr<uchar>(j + 1);
            const uchar* y2 = y1 + stride;

            for (int i = 0; i < width; i += 2, row1 += 6, row2 += 6)
            {
                int u = int(uv[i + 0 + uIdx]) - 128;
                int v = int(uv[i + 1 - uIdx]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(y1[i]) - 16) * ITUR_BT_601_CY;
                row1[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row1[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row1[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);

                int y01 = std::max(0, int(y1[i + 1]) - 16) * ITUR_BT_601_CY;
                row1[5-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row1[4]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row1[3+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);

                int y10 = std::max(0, int(y2[i]) - 16) * ITUR_BT_601_CY;
                row2[2-bIdx] = saturate_cast<uchar>((y10 + ruv) >> ITUR_BT_601_SHIFT);
                row2[1]      = saturate_cast<uchar>((y10 + guv) >> ITUR_BT_601_SHIFT);
                row2[bIdx]   = saturate_cast<uchar>((y10 + buv) >> ITUR_BT_601_SHIFT);

                int y11 = std::max(0, int(y2[i + 1]) - 16) * ITUR_BT_601_CY;
                row2[5-bIdx] = saturate_cast<uchar>((y11 + ruv) >> ITUR_BT_601_SHIFT);
                row2[4]      = saturate_cast<uchar>((y11 + guv) >> ITUR_BT_601_SHIFT);
                row2[3+bIdx] = saturate_cast<uchar>((y11 + buv) >> ITUR_BT_601_SHIFT);
            }
        }
    }
};

template<int bIdx, int uIdx>
struct YUV420sp2RGBA8888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* my1, *muv;
    int width, stride;

    YUV420sp2RGBA8888Invoker(Mat* _dst, int _stride, const uchar* _y1, const uchar* _uv)
        : dst(_dst), my1(_y1), muv(_uv), width(_dst->cols), stride(_stride) {}

    void operator()(const Range& range) const
    {
        int rangeBegin = range.start * 2;
        int rangeEnd = range.end * 2;

        //R = 1.164(Y - 16) + 1.596(V - 128)
        //G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128)
        //B = 1.164(Y - 16)                  + 2.018(U - 128)

        //R = (1220542(Y - 16) + 1673527(V - 128)                  + (1 << 19)) >> 20
        //G = (1220542(Y - 16) - 852492(V - 128) - 409993(U - 128) + (1 << 19)) >> 20
        //B = (1220542(Y - 16)                  + 2116026(U - 128) + (1 << 19)) >> 20

        const uchar* y1 = my1 + rangeBegin * stride, *uv = muv + rangeBegin * stride / 2;

#ifdef HAVE_TEGRA_OPTIMIZATION
        if(tegra::cvtYUV4202RGB(bIdx, uIdx, 4, y1, uv, stride, dst->ptr<uchar>(rangeBegin), dst->step, rangeEnd - rangeBegin, dst->cols))
            return;
#endif

        for (int j = rangeBegin; j < rangeEnd; j += 2, y1 += stride * 2, uv += stride)
        {
            uchar* row1 = dst->ptr<uchar>(j);
            uchar* row2 = dst->ptr<uchar>(j + 1);
            const uchar* y2 = y1 + stride;

            for (int i = 0; i < width; i += 2, row1 += 8, row2 += 8)
            {
                int u = int(uv[i + 0 + uIdx]) - 128;
                int v = int(uv[i + 1 - uIdx]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(y1[i]) - 16) * ITUR_BT_601_CY;
                row1[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row1[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row1[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);
                row1[3]      = uchar(0xff);

                int y01 = std::max(0, int(y1[i + 1]) - 16) * ITUR_BT_601_CY;
                row1[6-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row1[5]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row1[4+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);
                row1[7]      = uchar(0xff);

                int y10 = std::max(0, int(y2[i]) - 16) * ITUR_BT_601_CY;
                row2[2-bIdx] = saturate_cast<uchar>((y10 + ruv) >> ITUR_BT_601_SHIFT);
                row2[1]      = saturate_cast<uchar>((y10 + guv) >> ITUR_BT_601_SHIFT);
                row2[bIdx]   = saturate_cast<uchar>((y10 + buv) >> ITUR_BT_601_SHIFT);
                row2[3]      = uchar(0xff);

                int y11 = std::max(0, int(y2[i + 1]) - 16) * ITUR_BT_601_CY;
                row2[6-bIdx] = saturate_cast<uchar>((y11 + ruv) >> ITUR_BT_601_SHIFT);
                row2[5]      = saturate_cast<uchar>((y11 + guv) >> ITUR_BT_601_SHIFT);
                row2[4+bIdx] = saturate_cast<uchar>((y11 + buv) >> ITUR_BT_601_SHIFT);
                row2[7]      = uchar(0xff);
            }
        }
    }
};

template<int bIdx>
struct YUV420p2RGB888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* my1, *mu, *mv;
    int width, stride;
    int ustepIdx, vstepIdx;

    YUV420p2RGB888Invoker(Mat* _dst, int _stride, const uchar* _y1, const uchar* _u, const uchar* _v, int _ustepIdx, int _vstepIdx)
        : dst(_dst), my1(_y1), mu(_u), mv(_v), width(_dst->cols), stride(_stride), ustepIdx(_ustepIdx), vstepIdx(_vstepIdx) {}

    void operator()(const Range& range) const
    {
        const int rangeBegin = range.start * 2;
        const int rangeEnd = range.end * 2;

        size_t uvsteps[2] = {(size_t)(width/2), (size_t)(stride - width/2)};
        int usIdx = ustepIdx, vsIdx = vstepIdx;

        const uchar* y1 = my1 + rangeBegin * stride;
        const uchar* u1 = mu + (range.start / 2) * stride;
        const uchar* v1 = mv + (range.start / 2) * stride;

        if(range.start % 2 == 1)
        {
            u1 += uvsteps[(usIdx++) & 1];
            v1 += uvsteps[(vsIdx++) & 1];
        }

        for (int j = rangeBegin; j < rangeEnd; j += 2, y1 += stride * 2, u1 += uvsteps[(usIdx++) & 1], v1 += uvsteps[(vsIdx++) & 1])
        {
            uchar* row1 = dst->ptr<uchar>(j);
            uchar* row2 = dst->ptr<uchar>(j + 1);
            const uchar* y2 = y1 + stride;

            for (int i = 0; i < width / 2; i += 1, row1 += 6, row2 += 6)
            {
                int u = int(u1[i]) - 128;
                int v = int(v1[i]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(y1[2 * i]) - 16) * ITUR_BT_601_CY;
                row1[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row1[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row1[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);

                int y01 = std::max(0, int(y1[2 * i + 1]) - 16) * ITUR_BT_601_CY;
                row1[5-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row1[4]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row1[3+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);

                int y10 = std::max(0, int(y2[2 * i]) - 16) * ITUR_BT_601_CY;
                row2[2-bIdx] = saturate_cast<uchar>((y10 + ruv) >> ITUR_BT_601_SHIFT);
                row2[1]      = saturate_cast<uchar>((y10 + guv) >> ITUR_BT_601_SHIFT);
                row2[bIdx]   = saturate_cast<uchar>((y10 + buv) >> ITUR_BT_601_SHIFT);

                int y11 = std::max(0, int(y2[2 * i + 1]) - 16) * ITUR_BT_601_CY;
                row2[5-bIdx] = saturate_cast<uchar>((y11 + ruv) >> ITUR_BT_601_SHIFT);
                row2[4]      = saturate_cast<uchar>((y11 + guv) >> ITUR_BT_601_SHIFT);
                row2[3+bIdx] = saturate_cast<uchar>((y11 + buv) >> ITUR_BT_601_SHIFT);
            }
        }
    }
};

template<int bIdx>
struct YUV420p2RGBA8888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* my1, *mu, *mv;
    int width, stride;
    int ustepIdx, vstepIdx;

    YUV420p2RGBA8888Invoker(Mat* _dst, int _stride, const uchar* _y1, const uchar* _u, const uchar* _v, int _ustepIdx, int _vstepIdx)
        : dst(_dst), my1(_y1), mu(_u), mv(_v), width(_dst->cols), stride(_stride), ustepIdx(_ustepIdx), vstepIdx(_vstepIdx) {}

    void operator()(const Range& range) const
    {
        int rangeBegin = range.start * 2;
        int rangeEnd = range.end * 2;

        size_t uvsteps[2] = {(size_t)(width/2), (size_t)(stride - width/2)};
        int usIdx = ustepIdx, vsIdx = vstepIdx;

        const uchar* y1 = my1 + rangeBegin * stride;
        const uchar* u1 = mu + (range.start / 2) * stride;
        const uchar* v1 = mv + (range.start / 2) * stride;

        if(range.start % 2 == 1)
        {
            u1 += uvsteps[(usIdx++) & 1];
            v1 += uvsteps[(vsIdx++) & 1];
        }

        for (int j = rangeBegin; j < rangeEnd; j += 2, y1 += stride * 2, u1 += uvsteps[(usIdx++) & 1], v1 += uvsteps[(vsIdx++) & 1])
        {
            uchar* row1 = dst->ptr<uchar>(j);
            uchar* row2 = dst->ptr<uchar>(j + 1);
            const uchar* y2 = y1 + stride;

            for (int i = 0; i < width / 2; i += 1, row1 += 8, row2 += 8)
            {
                int u = int(u1[i]) - 128;
                int v = int(v1[i]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(y1[2 * i]) - 16) * ITUR_BT_601_CY;
                row1[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row1[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row1[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);
                row1[3]      = uchar(0xff);

                int y01 = std::max(0, int(y1[2 * i + 1]) - 16) * ITUR_BT_601_CY;
                row1[6-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row1[5]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row1[4+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);
                row1[7]      = uchar(0xff);

                int y10 = std::max(0, int(y2[2 * i]) - 16) * ITUR_BT_601_CY;
                row2[2-bIdx] = saturate_cast<uchar>((y10 + ruv) >> ITUR_BT_601_SHIFT);
                row2[1]      = saturate_cast<uchar>((y10 + guv) >> ITUR_BT_601_SHIFT);
                row2[bIdx]   = saturate_cast<uchar>((y10 + buv) >> ITUR_BT_601_SHIFT);
                row2[3]      = uchar(0xff);

                int y11 = std::max(0, int(y2[2 * i + 1]) - 16) * ITUR_BT_601_CY;
                row2[6-bIdx] = saturate_cast<uchar>((y11 + ruv) >> ITUR_BT_601_SHIFT);
                row2[5]      = saturate_cast<uchar>((y11 + guv) >> ITUR_BT_601_SHIFT);
                row2[4+bIdx] = saturate_cast<uchar>((y11 + buv) >> ITUR_BT_601_SHIFT);
                row2[7]      = uchar(0xff);
            }
        }
    }
};

#define MIN_SIZE_FOR_PARALLEL_YUV420_CONVERSION (320*240)

template<int bIdx, int uIdx>
inline void cvtYUV420sp2RGB(Mat& _dst, int _stride, const uchar* _y1, const uchar* _uv)
{
    YUV420sp2RGB888Invoker<bIdx, uIdx> converter(&_dst, _stride, _y1,  _uv);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV420_CONVERSION)
        parallel_for_(Range(0, _dst.rows/2), converter);
    else
        converter(Range(0, _dst.rows/2));
}

template<int bIdx, int uIdx>
inline void cvtYUV420sp2RGBA(Mat& _dst, int _stride, const uchar* _y1, const uchar* _uv)
{
    YUV420sp2RGBA8888Invoker<bIdx, uIdx> converter(&_dst, _stride, _y1,  _uv);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV420_CONVERSION)
        parallel_for_(Range(0, _dst.rows/2), converter);
    else
        converter(Range(0, _dst.rows/2));
}

template<int bIdx>
inline void cvtYUV420p2RGB(Mat& _dst, int _stride, const uchar* _y1, const uchar* _u, const uchar* _v, int ustepIdx, int vstepIdx)
{
    YUV420p2RGB888Invoker<bIdx> converter(&_dst, _stride, _y1,  _u, _v, ustepIdx, vstepIdx);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV420_CONVERSION)
        parallel_for_(Range(0, _dst.rows/2), converter);
    else
        converter(Range(0, _dst.rows/2));
}

template<int bIdx>
inline void cvtYUV420p2RGBA(Mat& _dst, int _stride, const uchar* _y1, const uchar* _u, const uchar* _v, int ustepIdx, int vstepIdx)
{
    YUV420p2RGBA8888Invoker<bIdx> converter(&_dst, _stride, _y1,  _u, _v, ustepIdx, vstepIdx);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV420_CONVERSION)
        parallel_for_(Range(0, _dst.rows/2), converter);
    else
        converter(Range(0, _dst.rows/2));
}

///////////////////////////////////// RGB -> YUV420p /////////////////////////////////////

template<int bIdx>
struct RGB888toYUV420pInvoker: public ParallelLoopBody
{
    RGB888toYUV420pInvoker( const Mat& src, Mat* dst, const int uIdx )
        : src_(src),
          dst_(dst),
          uIdx_(uIdx) { }

    void operator()(const Range& rowRange) const
    {
        const int w = src_.cols;
        const int h = src_.rows;

        const int cn = src_.channels();
        for( int i = rowRange.start; i < rowRange.end; i++ )
        {
            const uchar* row0 = src_.ptr<uchar>(2 * i);
            const uchar* row1 = src_.ptr<uchar>(2 * i + 1);

            uchar* y = dst_->ptr<uchar>(2*i);
            uchar* u = dst_->ptr<uchar>(h + i/2) + (i % 2) * (w/2);
            uchar* v = dst_->ptr<uchar>(h + (i + h/2)/2) + ((i + h/2) % 2) * (w/2);
            if( uIdx_ == 2 ) std::swap(u, v);

            for( int j = 0, k = 0; j < w * cn; j += 2 * cn, k++ )
            {
                int r00 = row0[2-bIdx + j];      int g00 = row0[1 + j];      int b00 = row0[bIdx + j];
                int r01 = row0[2-bIdx + cn + j]; int g01 = row0[1 + cn + j]; int b01 = row0[bIdx + cn + j];
                int r10 = row1[2-bIdx + j];      int g10 = row1[1 + j];      int b10 = row1[bIdx + j];
                int r11 = row1[2-bIdx + cn + j]; int g11 = row1[1 + cn + j]; int b11 = row1[bIdx + cn + j];

                const int shifted16 = (16 << ITUR_BT_601_SHIFT);
                const int halfShift = (1 << (ITUR_BT_601_SHIFT - 1));
                int y00 = ITUR_BT_601_CRY * r00 + ITUR_BT_601_CGY * g00 + ITUR_BT_601_CBY * b00 + halfShift + shifted16;
                int y01 = ITUR_BT_601_CRY * r01 + ITUR_BT_601_CGY * g01 + ITUR_BT_601_CBY * b01 + halfShift + shifted16;
                int y10 = ITUR_BT_601_CRY * r10 + ITUR_BT_601_CGY * g10 + ITUR_BT_601_CBY * b10 + halfShift + shifted16;
                int y11 = ITUR_BT_601_CRY * r11 + ITUR_BT_601_CGY * g11 + ITUR_BT_601_CBY * b11 + halfShift + shifted16;

                y[2*k + 0]            = saturate_cast<uchar>(y00 >> ITUR_BT_601_SHIFT);
                y[2*k + 1]            = saturate_cast<uchar>(y01 >> ITUR_BT_601_SHIFT);
                y[2*k + dst_->step + 0] = saturate_cast<uchar>(y10 >> ITUR_BT_601_SHIFT);
                y[2*k + dst_->step + 1] = saturate_cast<uchar>(y11 >> ITUR_BT_601_SHIFT);

                const int shifted128 = (128 << ITUR_BT_601_SHIFT);
                int u00 = ITUR_BT_601_CRU * r00 + ITUR_BT_601_CGU * g00 + ITUR_BT_601_CBU * b00 + halfShift + shifted128;
                int v00 = ITUR_BT_601_CBU * r00 + ITUR_BT_601_CGV * g00 + ITUR_BT_601_CBV * b00 + halfShift + shifted128;

                u[k] = saturate_cast<uchar>(u00 >> ITUR_BT_601_SHIFT);
                v[k] = saturate_cast<uchar>(v00 >> ITUR_BT_601_SHIFT);
            }
        }
    }

    static bool isFit( const Mat& src )
    {
        return (src.total() >= 320*240);
    }

private:
    RGB888toYUV420pInvoker& operator=(const RGB888toYUV420pInvoker&);

    const Mat& src_;
    Mat* const dst_;
    const int uIdx_;
};

template<int bIdx, int uIdx>
static void cvtRGBtoYUV420p(const Mat& src, Mat& dst)
{
    RGB888toYUV420pInvoker<bIdx> colorConverter(src, &dst, uIdx);
    if( RGB888toYUV420pInvoker<bIdx>::isFit(src) )
        parallel_for_(Range(0, src.rows/2), colorConverter);
    else
        colorConverter(Range(0, src.rows/2));
}

///////////////////////////////////// YUV422 -> RGB /////////////////////////////////////

template<int bIdx, int uIdx, int yIdx>
struct YUV422toRGB888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* src;
    int width, stride;

    YUV422toRGB888Invoker(Mat* _dst, int _stride, const uchar* _yuv)
        : dst(_dst), src(_yuv), width(_dst->cols), stride(_stride) {}

    void operator()(const Range& range) const
    {
        int rangeBegin = range.start;
        int rangeEnd = range.end;

        const int uidx = 1 - yIdx + uIdx * 2;
        const int vidx = (2 + uidx) % 4;
        const uchar* yuv_src = src + rangeBegin * stride;

        for (int j = rangeBegin; j < rangeEnd; j++, yuv_src += stride)
        {
            uchar* row = dst->ptr<uchar>(j);

            for (int i = 0; i < 2 * width; i += 4, row += 6)
            {
                int u = int(yuv_src[i + uidx]) - 128;
                int v = int(yuv_src[i + vidx]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(yuv_src[i + yIdx]) - 16) * ITUR_BT_601_CY;
                row[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);

                int y01 = std::max(0, int(yuv_src[i + yIdx + 2]) - 16) * ITUR_BT_601_CY;
                row[5-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row[4]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row[3+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);
            }
        }
    }
};

template<int bIdx, int uIdx, int yIdx>
struct YUV422toRGBA8888Invoker : ParallelLoopBody
{
    Mat* dst;
    const uchar* src;
    int width, stride;

    YUV422toRGBA8888Invoker(Mat* _dst, int _stride, const uchar* _yuv)
        : dst(_dst), src(_yuv), width(_dst->cols), stride(_stride) {}

    void operator()(const Range& range) const
    {
        int rangeBegin = range.start;
        int rangeEnd = range.end;

        const int uidx = 1 - yIdx + uIdx * 2;
        const int vidx = (2 + uidx) % 4;
        const uchar* yuv_src = src + rangeBegin * stride;

        for (int j = rangeBegin; j < rangeEnd; j++, yuv_src += stride)
        {
            uchar* row = dst->ptr<uchar>(j);

            for (int i = 0; i < 2 * width; i += 4, row += 8)
            {
                int u = int(yuv_src[i + uidx]) - 128;
                int v = int(yuv_src[i + vidx]) - 128;

                int ruv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVR * v;
                int guv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CVG * v + ITUR_BT_601_CUG * u;
                int buv = (1 << (ITUR_BT_601_SHIFT - 1)) + ITUR_BT_601_CUB * u;

                int y00 = std::max(0, int(yuv_src[i + yIdx]) - 16) * ITUR_BT_601_CY;
                row[2-bIdx] = saturate_cast<uchar>((y00 + ruv) >> ITUR_BT_601_SHIFT);
                row[1]      = saturate_cast<uchar>((y00 + guv) >> ITUR_BT_601_SHIFT);
                row[bIdx]   = saturate_cast<uchar>((y00 + buv) >> ITUR_BT_601_SHIFT);
                row[3]      = uchar(0xff);

                int y01 = std::max(0, int(yuv_src[i + yIdx + 2]) - 16) * ITUR_BT_601_CY;
                row[6-bIdx] = saturate_cast<uchar>((y01 + ruv) >> ITUR_BT_601_SHIFT);
                row[5]      = saturate_cast<uchar>((y01 + guv) >> ITUR_BT_601_SHIFT);
                row[4+bIdx] = saturate_cast<uchar>((y01 + buv) >> ITUR_BT_601_SHIFT);
                row[7]      = uchar(0xff);
            }
        }
    }
};

#define MIN_SIZE_FOR_PARALLEL_YUV422_CONVERSION (320*240)

template<int bIdx, int uIdx, int yIdx>
inline void cvtYUV422toRGB(Mat& _dst, int _stride, const uchar* _yuv)
{
    YUV422toRGB888Invoker<bIdx, uIdx, yIdx> converter(&_dst, _stride, _yuv);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV422_CONVERSION)
        parallel_for_(Range(0, _dst.rows), converter);
    else
        converter(Range(0, _dst.rows));
}

template<int bIdx, int uIdx, int yIdx>
inline void cvtYUV422toRGBA(Mat& _dst, int _stride, const uchar* _yuv)
{
    YUV422toRGBA8888Invoker<bIdx, uIdx, yIdx> converter(&_dst, _stride, _yuv);
    if (_dst.total() >= MIN_SIZE_FOR_PARALLEL_YUV422_CONVERSION)
        parallel_for_(Range(0, _dst.rows), converter);
    else
        converter(Range(0, _dst.rows));
}

/////////////////////////// RGBA <-> mRGBA (alpha premultiplied) //////////////

template<typename _Tp>
struct RGBA2mRGBA
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        _Tp max_val  = ColorChannel<_Tp>::max();
        _Tp half_val = ColorChannel<_Tp>::half();
        for( int i = 0; i < n; i++ )
        {
            _Tp v0 = *src++;
            _Tp v1 = *src++;
            _Tp v2 = *src++;
            _Tp v3 = *src++;

            *dst++ = (v0 * v3 + half_val) / max_val;
            *dst++ = (v1 * v3 + half_val) / max_val;
            *dst++ = (v2 * v3 + half_val) / max_val;
            *dst++ = v3;
        }
    }
};


template<typename _Tp>
struct mRGBA2RGBA
{
     typedef _Tp src_channel_type; typedef _Tp dst_channel_type;

    void operator()(const _Tp* src, _Tp* dst, int n) const
    {
        _Tp max_val = ColorChannel<_Tp>::max();
        for( int i = 0; i < n; i++ )
        {
            _Tp v0 = *src++;
            _Tp v1 = *src++;
            _Tp v2 = *src++;
            _Tp v3 = *src++;
            _Tp v3_half = v3 / 2;

            *dst++ = (v3==0)? 0 : (v0 * max_val + v3_half) / v3;
            *dst++ = (v3==0)? 0 : (v1 * max_val + v3_half) / v3;
            *dst++ = (v3==0)? 0 : (v2 * max_val + v3_half) / v3;
            *dst++ = v3;
        }
    }
};
        
    ////////////////// Convert to Rotated ColorSpace /////////////////
    
    /*template<typename _Tp> struct RGB2Rot
    {
         typedef _Tp src_channel_type; typedef _Tp dst_channel_type;
        
        Matx<int, 3, 3> T;
        Vec<float, 3> TScale;
        Vec<int, 3> TMin; // The minimum value in each row of Ti. This is the lowest component in the new axial vectors expressed in RGB space.
        Vec<int, 3> TRange; // TMax - TMin. The highest minus the lowest components of the new axial vectors.
        
        // The transform to the new color space is (T vec - 255 TMin)/TRange. 255 is the range of 8bit RGB and can be replaced directly with a different range for 16 and 32 bit RGB spaces. The division by TRange is the direct element wise division and can safely be rounded to recast in the required bit depth.
                
        RGB2Rot(Matx<int, 3, 3>& _T, Vec<int, 3>&  _TRange, Vec<float,3>& _TScale) : T(_T), TRange(_TRange), TScale(_TScale) {}
        
        void operator()(const _Tp* src, _Tp* dst, int n) const
        {
            n *= 3;
            for( int i = 0; i < n; i += 3, src += 3 )
            {
                dst[i] = saturate_cast<uchar>((T * src[i] - TMin )/(TRange) );
            }
        }
    };*/
    
 /*   template<typename _Tp> struct RGB2Rot
    {
         typedef _Tp src_channel_type; typedef _Tp dst_channel_type;
        
        Matx<float, 3, 4> Ms3d3;
        
        // The transform to the new color space is (T vec - 255 TMin)/TRange. 255 is the range of 8bit RGB and can be replaced directly with a different range for 16 and 32 bit RGB spaces. The division by TRange is the direct element wise division and can safely be rounded to recast in the required bit depth.
        
        RGB2Rot(Matx<int, 3, 3>& T, Vec<int, 3>&  TRange, Vec<int,3>& TMin)// NOTE: MatX constructor should be able to be constructed using the {} notation using C++11 features
        {
            Ms3d3 = {\
                ((float)T(0, 0)/(float)TRange[0]), ((float)T(0, 1)/(float)TRange[1]), ((float)T(0, 2)/(float)TRange[2]), ((float)TMin[0]/(float)TRange[0]), \
                ((float)T(1, 0)/(float)TRange[0]), ((float)T(1, 1)/(float)TRange[1]), ((float)T(1, 2)/(float)TRange[2]), ((float)TMin[1]/(float)TRange[1]), \
                ((float)T(2, 0)/(float)TRange[0]), ((float)T(2, 1)/(float)TRange[1]), ((float)T(2, 2)/(float)TRange[2]), ((float)TMin[2]/(float)TRange[2])
                };
        };
  
        void operator()(const _Tp* src, _Tp* dst, int n) const
        {
     //       cv::transform(*src, dst, Ms3d3);
        }
    };
  */
/*    class color_Space_Converter{
        public :
            int src_data_type=0, dst_data_type=0;
    }; */ // Now defined in hpp
        

#ifdef HAVE_OPENCL

static bool ocl_cvtColor( InputArray _src, OutputArray _dst, int code, int dcn )
{
    bool ok = false;
    UMat src = _src.getUMat(), dst;
    Size sz = src.size(), dstSz = sz;
    int scn = src.channels(), depth = src.depth(), bidx;
    int dims = 2, stripeSize = 1;
    size_t globalsize[] = { static_cast<size_t>(src.cols), static_cast<size_t>(src.rows) };
    ocl::Kernel k;

    if(depth != CV_8U && depth != CV_16U && depth != CV_32F)
        return false;

    switch (code)
    {
    case COLOR_BGR2BGRA: case COLOR_RGB2BGRA: case COLOR_BGRA2BGR:
    case COLOR_RGBA2BGR: case COLOR_RGB2BGR: case COLOR_BGRA2RGBA:
    {
        CV_Assert(scn == 3 || scn == 4);
        dcn = code == COLOR_BGR2BGRA || code == COLOR_RGB2BGRA || code == COLOR_BGRA2RGBA ? 4 : 3;
        bool reverse = !(code == COLOR_BGR2BGRA || code == COLOR_BGRA2BGR);
        k.create("RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=%d -D bidx=0 -D %s", depth, scn, dcn,
                        reverse ? "REVERSE" : "ORDER"));
        break;
    }
    case COLOR_BGR5652BGR: case COLOR_BGR5552BGR: case COLOR_BGR5652RGB: case COLOR_BGR5552RGB:
    case COLOR_BGR5652BGRA: case COLOR_BGR5552BGRA: case COLOR_BGR5652RGBA: case COLOR_BGR5552RGBA:
    {
        dcn = code == COLOR_BGR5652BGRA || code == COLOR_BGR5552BGRA || code == COLOR_BGR5652RGBA || code == COLOR_BGR5552RGBA ? 4 : 3;
        CV_Assert((dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U);
        bidx = code == COLOR_BGR5652BGR || code == COLOR_BGR5552BGR ||
            code == COLOR_BGR5652BGRA || code == COLOR_BGR5552BGRA ? 0 : 2;
        int greenbits = code == COLOR_BGR5652BGR || code == COLOR_BGR5652RGB ||
            code == COLOR_BGR5652BGRA || code == COLOR_BGR5652RGBA ? 6 : 5;
        k.create("RGB5x52RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=2 -D dcn=%d -D bidx=%d -D greenbits=%d", depth, dcn, bidx, greenbits));
        break;
    }
    case COLOR_BGR2BGR565: case COLOR_BGR2BGR555: case COLOR_RGB2BGR565: case COLOR_RGB2BGR555:
    case COLOR_BGRA2BGR565: case COLOR_BGRA2BGR555: case COLOR_RGBA2BGR565: case COLOR_RGBA2BGR555:
    {
        CV_Assert((scn == 3 || scn == 4) && depth == CV_8U );
        bidx = code == COLOR_BGR2BGR565 || code == COLOR_BGR2BGR555 ||
            code == COLOR_BGRA2BGR565 || code == COLOR_BGRA2BGR555 ? 0 : 2;
        int greenbits = code == COLOR_BGR2BGR565 || code == COLOR_RGB2BGR565 ||
            code == COLOR_BGRA2BGR565 || code == COLOR_RGBA2BGR565 ? 6 : 5;
        dcn = 2;
        k.create("RGB2RGB5x5", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=2 -D bidx=%d -D greenbits=%d", depth, scn, bidx, greenbits));
        break;
    }
    case COLOR_BGR5652GRAY: case COLOR_BGR5552GRAY:
    {
        CV_Assert(scn == 2 && depth == CV_8U);
        dcn = 1;
        int greenbits = code == COLOR_BGR5652GRAY ? 6 : 5;
        k.create("BGR5x52Gray", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=2 -D dcn=1 -D bidx=0 -D greenbits=%d", depth, greenbits));
        break;
    }
    case COLOR_GRAY2BGR565: case COLOR_GRAY2BGR555:
    {
        CV_Assert(scn == 1 && depth == CV_8U);
        dcn = 2;
        int greenbits = code == COLOR_GRAY2BGR565 ? 6 : 5;
        k.create("Gray2BGR5x5", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=1 -D dcn=2 -D bidx=0 -D greenbits=%d", depth, greenbits));
        break;
    }
    case COLOR_BGR2GRAY: case COLOR_BGRA2GRAY:
    case COLOR_RGB2GRAY: case COLOR_RGBA2GRAY:
    {
        CV_Assert(scn == 3 || scn == 4);
        bidx = code == COLOR_BGR2GRAY || code == COLOR_BGRA2GRAY ? 0 : 2;
        dcn = 1;
        k.create("RGB2Gray", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=1 -D bidx=%d -D STRIPE_SIZE=%d",
                        depth, scn, bidx, stripeSize));
        globalsize[0] = (src.cols + stripeSize-1)/stripeSize;
        break;
    }
    case COLOR_GRAY2BGR:
    case COLOR_GRAY2BGRA:
    {
        CV_Assert(scn == 1);
        dcn = code == COLOR_GRAY2BGRA ? 4 : 3;
        k.create("Gray2RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D bidx=0 -D scn=1 -D dcn=%d", depth, dcn));
        break;
    }
    case COLOR_BGR2YUV:
    case COLOR_RGB2YUV:
    {
        CV_Assert(scn == 3 || scn == 4);
        bidx = code == COLOR_RGB2YUV ? 0 : 2;
        dcn = 3;
        k.create("RGB2YUV", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=3 -D bidx=%d", depth, scn, bidx));
        break;
    }
    case COLOR_YUV2BGR:
    case COLOR_YUV2RGB:
    {
        if(dcn < 0) dcn = 3;
        CV_Assert(dcn == 3 || dcn == 4);
        bidx = code == COLOR_YUV2RGB ? 0 : 2;
        k.create("YUV2RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=3 -D dcn=%d -D bidx=%d", depth, dcn, bidx));
        break;
    }
    case COLOR_YUV2RGB_NV12: case COLOR_YUV2BGR_NV12:
    case COLOR_YUV2RGBA_NV12: case COLOR_YUV2BGRA_NV12:
    {
        CV_Assert( scn == 1 );
        CV_Assert( sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U );
        dcn  = code == COLOR_YUV2BGRA_NV12 || code == COLOR_YUV2RGBA_NV12 ? 4 : 3;
        bidx = code == COLOR_YUV2BGRA_NV12 || code == COLOR_YUV2BGR_NV12 ? 0 : 2;

        dstSz = Size(sz.width, sz.height * 2 / 3);
        k.create("YUV2RGB_NV12", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=0 -D scn=1 -D dcn=%d -D bidx=%d", dcn, bidx));
        break;
    }
    case COLOR_BGR2YCrCb:
    case COLOR_RGB2YCrCb:
    {
        CV_Assert(scn == 3 || scn == 4);
        bidx = code == COLOR_BGR2YCrCb ? 0 : 2;
        dcn = 3;
        k.create("RGB2YCrCb", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=3 -D bidx=%d", depth, scn, bidx));
        break;
    }
    case COLOR_YCrCb2BGR:
    case COLOR_YCrCb2RGB:
    {
        if( dcn <= 0 )
            dcn = 3;
        CV_Assert(scn == 3 && (dcn == 3 || dcn == 4));
        bidx = code == COLOR_YCrCb2BGR ? 0 : 2;
        k.create("YCrCb2RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=%d -D bidx=%d", depth, scn, dcn, bidx));
        break;
    }
    case COLOR_BGR2XYZ: case COLOR_RGB2XYZ:
    {
        CV_Assert(scn == 3 || scn == 4);
        bidx = code == COLOR_BGR2XYZ ? 0 : 2;

        UMat c;
        if (depth == CV_32F)
        {
            float coeffs[] =
            {
                0.412453f, 0.357580f, 0.180423f,
                0.212671f, 0.715160f, 0.072169f,
                0.019334f, 0.119193f, 0.950227f
            };
            if (bidx == 0)
            {
                std::swap(coeffs[0], coeffs[2]);
                std::swap(coeffs[3], coeffs[5]);
                std::swap(coeffs[6], coeffs[8]);
            }
            Mat(1, 9, CV_32FC1, &coeffs[0]).copyTo(c);
        }
        else
        {
            int coeffs[] =
            {
                1689,    1465,    739,
                871,     2929,    296,
                79,      488,     3892
            };
            if (bidx == 0)
            {
                std::swap(coeffs[0], coeffs[2]);
                std::swap(coeffs[3], coeffs[5]);
                std::swap(coeffs[6], coeffs[8]);
            }
            Mat(1, 9, CV_32SC1, &coeffs[0]).copyTo(c);
        }

        _dst.create(dstSz, CV_MAKETYPE(depth, 3));
        dst = _dst.getUMat();

        k.create("RGB2XYZ", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=%d -D dcn=3 -D bidx=%d", depth, scn, bidx));
        if (k.empty())
            return false;
        k.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst), ocl::KernelArg::PtrReadOnly(c));
        return k.run(2, globalsize, 0, false);
    }
    case COLOR_XYZ2BGR: case COLOR_XYZ2RGB:
    {
        if (dcn <= 0)
            dcn = 3;
        CV_Assert(scn == 3 && (dcn == 3 || dcn == 4));
        bidx = code == COLOR_XYZ2BGR ? 0 : 2;

        UMat c;
        if (depth == CV_32F)
        {
            float coeffs[] =
            {
                3.240479f, -1.53715f, -0.498535f,
                -0.969256f, 1.875991f, 0.041556f,
                0.055648f, -0.204043f, 1.057311f
            };
            if (bidx == 0)
            {
                std::swap(coeffs[0], coeffs[6]);
                std::swap(coeffs[1], coeffs[7]);
                std::swap(coeffs[2], coeffs[8]);
            }
            Mat(1, 9, CV_32FC1, &coeffs[0]).copyTo(c);
        }
        else
        {
            int coeffs[] =
            {
                13273,  -6296,  -2042,
                -3970,   7684,    170,
                  228,   -836,   4331
            };
            if (bidx == 0)
            {
                std::swap(coeffs[0], coeffs[6]);
                std::swap(coeffs[1], coeffs[7]);
                std::swap(coeffs[2], coeffs[8]);
            }
            Mat(1, 9, CV_32SC1, &coeffs[0]).copyTo(c);
        }

        _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
        dst = _dst.getUMat();

        k.create("XYZ2RGB", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D scn=3 -D dcn=%d -D bidx=%d", depth, dcn, bidx));
        if (k.empty())
            return false;
        k.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst), ocl::KernelArg::PtrReadOnly(c));
        return k.run(2, globalsize, 0, false);
    }
    case COLOR_BGR2HSV: case COLOR_RGB2HSV: case COLOR_BGR2HSV_FULL: case COLOR_RGB2HSV_FULL:
    case COLOR_BGR2HLS: case COLOR_RGB2HLS: case COLOR_BGR2HLS_FULL: case COLOR_RGB2HLS_FULL:
    {
        CV_Assert((scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F));
        bidx = code == COLOR_BGR2HSV || code == COLOR_BGR2HLS ||
            code == COLOR_BGR2HSV_FULL || code == COLOR_BGR2HLS_FULL ? 0 : 2;
        int hrange = depth == CV_32F ? 360 : code == COLOR_BGR2HSV || code == COLOR_RGB2HSV ||
            code == COLOR_BGR2HLS || code == COLOR_RGB2HLS ? 180 : 256;
        bool is_hsv = code == COLOR_BGR2HSV || code == COLOR_RGB2HSV || code == COLOR_BGR2HSV_FULL || code == COLOR_RGB2HSV_FULL;
        String kernelName = String("RGB2") + (is_hsv ? "HSV" : "HLS");
        dcn = 3;

        if (is_hsv && depth == CV_8U)
        {
            static UMat sdiv_data;
            static UMat hdiv_data180;
            static UMat hdiv_data256;
            static int sdiv_table[256];
            static int hdiv_table180[256];
            static int hdiv_table256[256];
            static volatile bool initialized180 = false, initialized256 = false;
            volatile bool & initialized = hrange == 180 ? initialized180 : initialized256;

            if (!initialized)
            {
                int * const hdiv_table = hrange == 180 ? hdiv_table180 : hdiv_table256, hsv_shift = 12;
                UMat & hdiv_data = hrange == 180 ? hdiv_data180 : hdiv_data256;

                sdiv_table[0] = hdiv_table180[0] = hdiv_table256[0] = 0;

                int v = 255 << hsv_shift;
                if (!initialized180 && !initialized256)
                {
                    for(int i = 1; i < 256; i++ )
                        sdiv_table[i] = saturate_cast<int>(v/(1.*i));
                    Mat(1, 256, CV_32SC1, sdiv_table).copyTo(sdiv_data);
                }

                v = hrange << hsv_shift;
                for (int i = 1; i < 256; i++ )
                    hdiv_table[i] = saturate_cast<int>(v/(6.*i));

                Mat(1, 256, CV_32SC1, hdiv_table).copyTo(hdiv_data);
                initialized = true;
            }

            _dst.create(dstSz, CV_8UC3);
            dst = _dst.getUMat();

            k.create("RGB2HSV", ocl::imgproc::cvtcolor_oclsrc, format("-D depth=%d -D hrange=%d -D bidx=%d -D dcn=3 -D scn=%d",
                                                                      depth, hrange, bidx, scn));
            if (k.empty())
                return false;

            k.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst),
                   ocl::KernelArg::PtrReadOnly(sdiv_data), hrange == 256 ? ocl::KernelArg::PtrReadOnly(hdiv_data256) :
                                                                       ocl::KernelArg::PtrReadOnly(hdiv_data180));

            return k.run(2, globalsize, NULL, false);
        }
        else
            k.create(kernelName.c_str(), ocl::imgproc::cvtcolor_oclsrc,
                     format("-D depth=%d -D hscale=%ff -D bidx=%d -D scn=%d -D dcn=3", depth, hrange*(1.f/360.f), bidx, scn));
        break;
    }
    case COLOR_HSV2BGR: case COLOR_HSV2RGB: case COLOR_HSV2BGR_FULL: case COLOR_HSV2RGB_FULL:
    case COLOR_HLS2BGR: case COLOR_HLS2RGB: case COLOR_HLS2BGR_FULL: case COLOR_HLS2RGB_FULL:
    {
        if (dcn <= 0)
            dcn = 3;
        CV_Assert(scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F));
        bidx = code == COLOR_HSV2BGR || code == COLOR_HLS2BGR ||
            code == COLOR_HSV2BGR_FULL || code == COLOR_HLS2BGR_FULL ? 0 : 2;
        int hrange = depth == CV_32F ? 360 : code == COLOR_HSV2BGR || code == COLOR_HSV2RGB ||
            code == COLOR_HLS2BGR || code == COLOR_HLS2RGB ? 180 : 255;
        bool is_hsv = code == COLOR_HSV2BGR || code == COLOR_HSV2RGB ||
                code == COLOR_HSV2BGR_FULL || code == COLOR_HSV2RGB_FULL;

        String kernelName = String(is_hsv ? "HSV" : "HLS") + "2RGB";
        k.create(kernelName.c_str(), ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D dcn=%d -D scn=3 -D bidx=%d -D hrange=%d -D hscale=%ff",
                        depth, dcn, bidx, hrange, 6.f/hrange));
        break;
    }
    case COLOR_RGBA2mRGBA: case COLOR_mRGBA2RGBA:
    {
        CV_Assert(scn == 4 && depth == CV_8U);
        dcn = 4;

        k.create(code == COLOR_RGBA2mRGBA ? "RGBA2mRGBA" : "mRGBA2RGBA", ocl::imgproc::cvtcolor_oclsrc,
                 format("-D depth=%d -D dcn=4 -D scn=4 -D bidx=3", depth));
        break;
    }
    default:
        ;
    }

    if( !k.empty() )
    {
        _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
        dst = _dst.getUMat();
        k.args(ocl::KernelArg::ReadOnlyNoSize(src), ocl::KernelArg::WriteOnly(dst));
        ok = k.run(dims, globalsize, 0, false);
    }
    return ok;
}

#endif


//////////////////////////////////////////////////////////////////////////////////////////
//                                   The main function                                  //
//////////////////////////////////////////////////////////////////////////////////////////

void cvtColor( InputArray _src, OutputArray _dst, int code, int dcn )
{
    int stype = _src.type();
    int scn = CV_MAT_CN(stype), depth = CV_MAT_DEPTH(stype), bidx;

    CV_OCL_RUN( _src.dims() <= 2 && _dst.isUMat(),
                ocl_cvtColor(_src, _dst, code, dcn) )

    Mat src = _src.getMat(), dst;
    Size sz = src.size();

    CV_Assert( depth == CV_8U || depth == CV_16U || depth == CV_32F );

    switch( code )
    {
        case CV_BGR2BGRA: case CV_RGB2BGRA: case CV_BGRA2BGR:
        case CV_RGBA2BGR: case CV_RGB2BGR: case CV_BGRA2RGBA:
            CV_Assert( scn == 3 || scn == 4 );
            dcn = code == CV_BGR2BGRA || code == CV_RGB2BGRA || code == CV_BGRA2RGBA ? 4 : 3;
            bidx = code == CV_BGR2BGRA || code == CV_BGRA2BGR ? 0 : 2;

            _dst.create( sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( code == CV_BGR2BGRA || code == CV_RGB2RGBA)
            {
                if ( CvtColorIPPLoop(src, dst, IPPReorderFunctor(ippiSwapChannelsC3C4RTab[depth], 0, 1, 2)) )
                    return;
            }
            else if( code == CV_BGRA2BGR )
            {
                if ( CvtColorIPPLoop(src, dst, IPPGeneralFunctor(ippiCopyAC4C3RTab[depth])) )
                    return;
            }
            else if( code == CV_BGR2RGBA )
            {
                if( CvtColorIPPLoop(src, dst, IPPReorderFunctor(ippiSwapChannelsC3C4RTab[depth], 2, 1, 0)) )
                    return;
            }
            else if( code == CV_RGBA2BGR )
            {
                if( CvtColorIPPLoop(src, dst, IPPReorderFunctor(ippiSwapChannelsC4C3RTab[depth], 2, 1, 0)) )
                    return;
            }
            else if( code == CV_RGB2BGR )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPReorderFunctor(ippiSwapChannelsC3RTab[depth], 2, 1, 0)) )
                    return;
            }
            else if( code == CV_RGBA2BGRA )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPReorderFunctor(ippiSwapChannelsC4RTab[depth], 2, 1, 0)) )
                    return;
            }
#endif

            if( depth == CV_8U )
            {
#ifdef HAVE_TEGRA_OPTIMIZATION
                if(!tegra::cvtBGR2RGB(src, dst, bidx))
#endif
                    CvtColorLoop(src, dst, RGB2RGB<uchar>(scn, dcn, bidx));
            }
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, RGB2RGB<ushort>(scn, dcn, bidx));
            else
                CvtColorLoop(src, dst, RGB2RGB<float>(scn, dcn, bidx));
            break;

        case CV_BGR2BGR565: case CV_BGR2BGR555: case CV_RGB2BGR565: case CV_RGB2BGR555:
        case CV_BGRA2BGR565: case CV_BGRA2BGR555: case CV_RGBA2BGR565: case CV_RGBA2BGR555:
            CV_Assert( (scn == 3 || scn == 4) && depth == CV_8U );
            _dst.create(sz, CV_8UC2);
            dst = _dst.getMat();

#ifdef HAVE_TEGRA_OPTIMIZATION
            if(code == CV_BGR2BGR565 || code == CV_BGRA2BGR565 || code == CV_RGB2BGR565  || code == CV_RGBA2BGR565)
                if(tegra::cvtRGB2RGB565(src, dst, code == CV_RGB2BGR565 || code == CV_RGBA2BGR565 ? 0 : 2))
                    break;
#endif

            CvtColorLoop(src, dst, RGB2RGB5x5(scn,
                      code == CV_BGR2BGR565 || code == CV_BGR2BGR555 ||
                      code == CV_BGRA2BGR565 || code == CV_BGRA2BGR555 ? 0 : 2,
                      code == CV_BGR2BGR565 || code == CV_RGB2BGR565 ||
                      code == CV_BGRA2BGR565 || code == CV_RGBA2BGR565 ? 6 : 5 // green bits
                                              ));
            break;

        case CV_BGR5652BGR: case CV_BGR5552BGR: case CV_BGR5652RGB: case CV_BGR5552RGB:
        case CV_BGR5652BGRA: case CV_BGR5552BGRA: case CV_BGR5652RGBA: case CV_BGR5552RGBA:
            if(dcn <= 0) dcn = (code==CV_BGR5652BGRA || code==CV_BGR5552BGRA || code==CV_BGR5652RGBA || code==CV_BGR5552RGBA) ? 4 : 3;
            CV_Assert( (dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U );
            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

            CvtColorLoop(src, dst, RGB5x52RGB(dcn,
                      code == CV_BGR5652BGR || code == CV_BGR5552BGR ||
                      code == CV_BGR5652BGRA || code == CV_BGR5552BGRA ? 0 : 2, // blue idx
                      code == CV_BGR5652BGR || code == CV_BGR5652RGB ||
                      code == CV_BGR5652BGRA || code == CV_BGR5652RGBA ? 6 : 5 // green bits
                      ));
            break;

        case CV_BGR2GRAY: case CV_BGRA2GRAY: case CV_RGB2GRAY: case CV_RGBA2GRAY:
            CV_Assert( scn == 3 || scn == 4 );
            _dst.create(sz, CV_MAKETYPE(depth, 1));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( code == CV_BGR2GRAY )
            {
                if( CvtColorIPPLoop(src, dst, IPPColor2GrayFunctor(ippiColor2GrayC3Tab[depth])) )
                    return;
            }
            else if( code == CV_RGB2GRAY )
            {
                if( CvtColorIPPLoop(src, dst, IPPGeneralFunctor(ippiRGB2GrayC3Tab[depth])) )
                    return;
            }
            else if( code == CV_BGRA2GRAY )
            {
                if( CvtColorIPPLoop(src, dst, IPPColor2GrayFunctor(ippiColor2GrayC4Tab[depth])) )
                    return;
            }
            else if( code == CV_RGBA2GRAY )
            {
                if( CvtColorIPPLoop(src, dst, IPPGeneralFunctor(ippiRGB2GrayC4Tab[depth])) )
                    return;
            }
#endif
            bidx = code == CV_BGR2GRAY || code == CV_BGRA2GRAY ? 0 : 2;
            
            if( depth == CV_8U )
            {
#ifdef HAVE_TEGRA_OPTIMIZATION
                if(!tegra::cvtRGB2Gray(src, dst, bidx))
#endif
                CvtColorLoop(src, dst, RGB2Gray<uchar>(scn, bidx, 0));
            }
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, RGB2Gray<ushort>(scn, bidx, 0));
            else
                CvtColorLoop(src, dst, RGB2Gray<float>(scn, bidx, 0));
            break;

        case CV_BGR5652GRAY: case CV_BGR5552GRAY:
            CV_Assert( scn == 2 && depth == CV_8U );
            _dst.create(sz, CV_8UC1);
            dst = _dst.getMat();

            CvtColorLoop(src, dst, RGB5x52Gray(code == CV_BGR5652GRAY ? 6 : 5));
            break;

        case CV_GRAY2BGR: case CV_GRAY2BGRA:
            if( dcn <= 0 ) dcn = (code==CV_GRAY2BGRA) ? 4 : 3;
            CV_Assert( scn == 1 && (dcn == 3 || dcn == 4));
            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( code == CV_GRAY2BGR )
            {
                if( CvtColorIPPLoop(src, dst, IPPGray2BGRFunctor(ippiCopyP3C3RTab[depth])) )
                    return;
            }
            else if( code == CV_GRAY2BGRA )
            {
                if( CvtColorIPPLoop(src, dst, IPPGray2BGRAFunctor(ippiCopyP3C3RTab[depth], ippiSwapChannelsC3C4RTab[depth], depth)) )
                    return;
            }
#endif


            if( depth == CV_8U )
            {
#ifdef HAVE_TEGRA_OPTIMIZATION
                if(!tegra::cvtGray2RGB(src, dst))
#endif
                CvtColorLoop(src, dst, Gray2RGB<uchar>(dcn));
            }
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, Gray2RGB<ushort>(dcn));
            else
                CvtColorLoop(src, dst, Gray2RGB<float>(dcn));
            break;

        case CV_GRAY2BGR565: case CV_GRAY2BGR555:
            CV_Assert( scn == 1 && depth == CV_8U );
            _dst.create(sz, CV_8UC2);
            dst = _dst.getMat();

            CvtColorLoop(src, dst, Gray2RGB5x5(code == CV_GRAY2BGR565 ? 6 : 5));
            break;

        case CV_BGR2YCrCb: case CV_RGB2YCrCb:
        case CV_BGR2YUV: case CV_RGB2YUV:
            {
            CV_Assert( scn == 3 || scn == 4 );
            bidx = code == CV_BGR2YCrCb || code == CV_BGR2YUV ? 0 : 2;
            static const float yuv_f[] = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };
            static const int yuv_i[] = { B2Y, G2Y, R2Y, 8061, 14369 };
            const float* coeffs_f = code == CV_BGR2YCrCb || code == CV_RGB2YCrCb ? 0 : yuv_f;
            const int* coeffs_i = code == CV_BGR2YCrCb || code == CV_RGB2YCrCb ? 0 : yuv_i;

            _dst.create(sz, CV_MAKETYPE(depth, 3));
            dst = _dst.getMat();

            if( depth == CV_8U )
            {
#ifdef HAVE_TEGRA_OPTIMIZATION
                if((code == CV_RGB2YCrCb || code == CV_BGR2YCrCb) && tegra::cvtRGB2YCrCb(src, dst, bidx))
                    break;
#endif
                CvtColorLoop(src, dst, RGB2YCrCb_i<uchar>(scn, bidx, coeffs_i));
            }
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, RGB2YCrCb_i<ushort>(scn, bidx, coeffs_i));
            else
                CvtColorLoop(src, dst, RGB2YCrCb_f<float>(scn, bidx, coeffs_f));
            }
            break;

        case CV_YCrCb2BGR: case CV_YCrCb2RGB:
        case CV_YUV2BGR: case CV_YUV2RGB:
            {
            if( dcn <= 0 ) dcn = 3;
            CV_Assert( scn == 3 && (dcn == 3 || dcn == 4) );
            bidx = code == CV_YCrCb2BGR || code == CV_YUV2BGR ? 0 : 2;
            static const float yuv_f[] = { 2.032f, -0.395f, -0.581f, 1.140f };
            static const int yuv_i[] = { 33292, -6472, -9519, 18678 };
            const float* coeffs_f = code == CV_YCrCb2BGR || code == CV_YCrCb2RGB ? 0 : yuv_f;
            const int* coeffs_i = code == CV_YCrCb2BGR || code == CV_YCrCb2RGB ? 0 : yuv_i;

            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

            if( depth == CV_8U )
                CvtColorLoop(src, dst, YCrCb2RGB_i<uchar>(dcn, bidx, coeffs_i));
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, YCrCb2RGB_i<ushort>(dcn, bidx, coeffs_i));
            else
                CvtColorLoop(src, dst, YCrCb2RGB_f<float>(dcn, bidx, coeffs_f));
            }
            break;

        case CV_BGR2XYZ: case CV_RGB2XYZ:
            CV_Assert( scn == 3 || scn == 4 );
            bidx = code == CV_BGR2XYZ ? 0 : 2;

            _dst.create(sz, CV_MAKETYPE(depth, 3));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( code == CV_BGR2XYZ && scn == 3 )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC3RTab[depth], ippiRGB2XYZTab[depth], 2, 1, 0, depth)) )
                    return;
            }
            else if( code == CV_BGR2XYZ && scn == 4 )
            {
                if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2XYZTab[depth], 2, 1, 0, depth)) )
                    return;
            }
            else if( code == CV_RGB2XYZ && scn == 3 )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiRGB2XYZTab[depth])) )
                    return;
            }
            else if( code == CV_RGB2XYZ && scn == 4 )
            {
                if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2XYZTab[depth], 0, 1, 2, depth)) )
                    return;
            }
#endif

            if( depth == CV_8U )
                CvtColorLoop(src, dst, RGB2XYZ_i<uchar>(scn, bidx, 0));
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, RGB2XYZ_i<ushort>(scn, bidx, 0));
            else
                CvtColorLoop(src, dst, RGB2XYZ_f<float>(scn, bidx, 0));
            break;

        case CV_XYZ2BGR: case CV_XYZ2RGB:
            if( dcn <= 0 ) dcn = 3;
            CV_Assert( scn == 3 && (dcn == 3 || dcn == 4) );
            bidx = code == CV_XYZ2BGR ? 0 : 2;

            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( code == CV_XYZ2BGR && dcn == 3 )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPGeneralReorderFunctor(ippiXYZ2RGBTab[depth], ippiSwapChannelsC3RTab[depth], 2, 1, 0, depth)) )
                    return;
            }
            else if( code == CV_XYZ2BGR && dcn == 4 )
            {
                if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiXYZ2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 2, 1, 0, depth)) )
                    return;
            }
            if( code == CV_XYZ2RGB && dcn == 3 )
            {
                if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiXYZ2RGBTab[depth])) )
                    return;
            }
            else if( code == CV_XYZ2RGB && dcn == 4 )
            {
                if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiXYZ2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 0, 1, 2, depth)) )
                    return;
            }
#endif

            if( depth == CV_8U )
                CvtColorLoop(src, dst, XYZ2RGB_i<uchar>(dcn, bidx, 0));
            else if( depth == CV_16U )
                CvtColorLoop(src, dst, XYZ2RGB_i<ushort>(dcn, bidx, 0));
            else
                CvtColorLoop(src, dst, XYZ2RGB_f<float>(dcn, bidx, 0));
            break;

        case CV_BGR2HSV: case CV_RGB2HSV: case CV_BGR2HSV_FULL: case CV_RGB2HSV_FULL:
        case CV_BGR2HLS: case CV_RGB2HLS: case CV_BGR2HLS_FULL: case CV_RGB2HLS_FULL:
            {
            CV_Assert( (scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F) );
            bidx = code == CV_BGR2HSV || code == CV_BGR2HLS ||
                code == CV_BGR2HSV_FULL || code == CV_BGR2HLS_FULL ? 0 : 2;
            int hrange = depth == CV_32F ? 360 : code == CV_BGR2HSV || code == CV_RGB2HSV ||
                code == CV_BGR2HLS || code == CV_RGB2HLS ? 180 : 256;

            _dst.create(sz, CV_MAKETYPE(depth, 3));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( depth == CV_8U || depth == CV_16U )
            {
                if( code == CV_BGR2HSV_FULL && scn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC3RTab[depth], ippiRGB2HSVTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_BGR2HSV_FULL && scn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2HSVTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_RGB2HSV_FULL && scn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiRGB2HSVTab[depth])) )
                        return;
                }
                else if( code == CV_RGB2HSV_FULL && scn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2HSVTab[depth], 0, 1, 2, depth)) )
                        return;
                }
                else if( code == CV_BGR2HLS_FULL && scn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC3RTab[depth], ippiRGB2HLSTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_BGR2HLS_FULL && scn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2HLSTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_RGB2HLS_FULL && scn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiRGB2HLSTab[depth])) )
                        return;
                }
                else if( code == CV_RGB2HLS_FULL && scn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPReorderGeneralFunctor(ippiSwapChannelsC4C3RTab[depth], ippiRGB2HLSTab[depth], 0, 1, 2, depth)) )
                        return;
                }
            }
#endif

            if( code == CV_BGR2HSV || code == CV_RGB2HSV ||
                code == CV_BGR2HSV_FULL || code == CV_RGB2HSV_FULL )
            {
#ifdef HAVE_TEGRA_OPTIMIZATION
                if(tegra::cvtRGB2HSV(src, dst, bidx, hrange))
                    break;
#endif
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, RGB2HSV_b(scn, bidx, hrange));
                else
                    CvtColorLoop(src, dst, RGB2HSV_f(scn, bidx, (float)hrange));
            }
            else
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, RGB2HLS_b(scn, bidx, hrange));
                else
                    CvtColorLoop(src, dst, RGB2HLS_f(scn, bidx, (float)hrange));
            }
            }
            break;

        case CV_HSV2BGR: case CV_HSV2RGB: case CV_HSV2BGR_FULL: case CV_HSV2RGB_FULL:
        case CV_HLS2BGR: case CV_HLS2RGB: case CV_HLS2BGR_FULL: case CV_HLS2RGB_FULL:
            {
            if( dcn <= 0 ) dcn = 3;
            CV_Assert( scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F) );
            bidx = code == CV_HSV2BGR || code == CV_HLS2BGR ||
                code == CV_HSV2BGR_FULL || code == CV_HLS2BGR_FULL ? 0 : 2;
            int hrange = depth == CV_32F ? 360 : code == CV_HSV2BGR || code == CV_HSV2RGB ||
                code == CV_HLS2BGR || code == CV_HLS2RGB ? 180 : 255;

            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

#if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
            if( depth == CV_8U || depth == CV_16U )
            {
                if( code == CV_HSV2BGR_FULL && dcn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralReorderFunctor(ippiHSV2RGBTab[depth], ippiSwapChannelsC3RTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_HSV2BGR_FULL && dcn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiHSV2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_HSV2RGB_FULL && dcn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiHSV2RGBTab[depth])) )
                        return;
                }
                else if( code == CV_HSV2RGB_FULL && dcn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiHSV2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 0, 1, 2, depth)) )
                        return;
                }
                else if( code == CV_HLS2BGR_FULL && dcn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralReorderFunctor(ippiHLS2RGBTab[depth], ippiSwapChannelsC3RTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_HLS2BGR_FULL && dcn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiHLS2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 2, 1, 0, depth)) )
                        return;
                }
                else if( code == CV_HLS2RGB_FULL && dcn == 3 )
                {
                    if( CvtColorIPPLoopCopy(src, dst, IPPGeneralFunctor(ippiHLS2RGBTab[depth])) )
                        return;
                }
                else if( code == CV_HLS2RGB_FULL && dcn == 4 )
                {
                    if( CvtColorIPPLoop(src, dst, IPPGeneralReorderFunctor(ippiHLS2RGBTab[depth], ippiSwapChannelsC3C4RTab[depth], 0, 1, 2, depth)) )
                        return;
                }
            }
#endif

            if( code == CV_HSV2BGR || code == CV_HSV2RGB ||
                code == CV_HSV2BGR_FULL || code == CV_HSV2RGB_FULL )
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, HSV2RGB_b(dcn, bidx, hrange));
                else
                    CvtColorLoop(src, dst, HSV2RGB_f(dcn, bidx, (float)hrange));
            }
            else
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, HLS2RGB_b(dcn, bidx, hrange));
                else
                    CvtColorLoop(src, dst, HLS2RGB_f(dcn, bidx, (float)hrange));
            }
            }
            break;

        case CV_BGR2Lab: case CV_RGB2Lab: case CV_LBGR2Lab: case CV_LRGB2Lab:
        case CV_BGR2Luv: case CV_RGB2Luv: case CV_LBGR2Luv: case CV_LRGB2Luv:
            {
            CV_Assert( (scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F) );
            bidx = code == CV_BGR2Lab || code == CV_BGR2Luv ||
                   code == CV_LBGR2Lab || code == CV_LBGR2Luv ? 0 : 2;
            bool srgb = code == CV_BGR2Lab || code == CV_RGB2Lab ||
                        code == CV_BGR2Luv || code == CV_RGB2Luv;

            _dst.create(sz, CV_MAKETYPE(depth, 3));
            dst = _dst.getMat();

            if( code == CV_BGR2Lab || code == CV_RGB2Lab ||
                code == CV_LBGR2Lab || code == CV_LRGB2Lab )
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, RGB2Lab_b(scn, bidx, 0, 0, srgb));
                else
                    CvtColorLoop(src, dst, RGB2Lab_f(scn, bidx, 0, 0, srgb));
            }
            else
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, RGB2Luv_b(scn, bidx, 0, 0, srgb));
                else
                    CvtColorLoop(src, dst, RGB2Luv_f(scn, bidx, 0, 0, srgb));
            }
            }
            break;

        case CV_Lab2BGR: case CV_Lab2RGB: case CV_Lab2LBGR: case CV_Lab2LRGB:
        case CV_Luv2BGR: case CV_Luv2RGB: case CV_Luv2LBGR: case CV_Luv2LRGB:
            {
            if( dcn <= 0 ) dcn = 3;
            CV_Assert( scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F) );
            bidx = code == CV_Lab2BGR || code == CV_Luv2BGR ||
                   code == CV_Lab2LBGR || code == CV_Luv2LBGR ? 0 : 2;
            bool srgb = code == CV_Lab2BGR || code == CV_Lab2RGB ||
                    code == CV_Luv2BGR || code == CV_Luv2RGB;

            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();

            if( code == CV_Lab2BGR || code == CV_Lab2RGB ||
                code == CV_Lab2LBGR || code == CV_Lab2LRGB )
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, Lab2RGB_b(dcn, bidx, 0, 0, srgb));
                else
                    CvtColorLoop(src, dst, Lab2RGB_f(dcn, bidx, 0, 0, srgb));
            }
            else
            {
                if( depth == CV_8U )
                    CvtColorLoop(src, dst, Luv2RGB_b(dcn, bidx, 0, 0, srgb));
                else
                    CvtColorLoop(src, dst, Luv2RGB_f(dcn, bidx, 0, 0, srgb));
            }
            }
            break;

        case CV_BayerBG2GRAY: case CV_BayerGB2GRAY: case CV_BayerRG2GRAY: case CV_BayerGR2GRAY:
        case CV_BayerBG2BGR: case CV_BayerGB2BGR: case CV_BayerRG2BGR: case CV_BayerGR2BGR:
        case CV_BayerBG2BGR_VNG: case CV_BayerGB2BGR_VNG: case CV_BayerRG2BGR_VNG: case CV_BayerGR2BGR_VNG:
        case CV_BayerBG2BGR_EA: case CV_BayerGB2BGR_EA: case CV_BayerRG2BGR_EA: case CV_BayerGR2BGR_EA:
            demosaicing(src, _dst, code, dcn);
            break;

        case CV_YUV2BGR_NV21:  case CV_YUV2RGB_NV21:  case CV_YUV2BGR_NV12:  case CV_YUV2RGB_NV12:
        case CV_YUV2BGRA_NV21: case CV_YUV2RGBA_NV21: case CV_YUV2BGRA_NV12: case CV_YUV2RGBA_NV12:
            {
                // http://www.fourcc.org/yuv.php#NV21 == yuv420sp -> a plane of 8 bit Y samples followed by an interleaved V/U plane containing 8 bit 2x2 subsampled chroma samples
                // http://www.fourcc.org/yuv.php#NV12 -> a plane of 8 bit Y samples followed by an interleaved U/V plane containing 8 bit 2x2 subsampled colour difference samples

                if (dcn <= 0) dcn = (code==CV_YUV420sp2BGRA || code==CV_YUV420sp2RGBA || code==CV_YUV2BGRA_NV12 || code==CV_YUV2RGBA_NV12) ? 4 : 3;
                const int bIdx = (code==CV_YUV2BGR_NV21 || code==CV_YUV2BGRA_NV21 || code==CV_YUV2BGR_NV12 || code==CV_YUV2BGRA_NV12) ? 0 : 2;
                const int uIdx = (code==CV_YUV2BGR_NV21 || code==CV_YUV2BGRA_NV21 || code==CV_YUV2RGB_NV21 || code==CV_YUV2RGBA_NV21) ? 1 : 0;

                CV_Assert( dcn == 3 || dcn == 4 );
                CV_Assert( sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U );

                Size dstSz(sz.width, sz.height * 2 / 3);
                _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                int srcstep = (int)src.step;
                const uchar* y = src.ptr();
                const uchar* uv = y + srcstep * dstSz.height;

                switch(dcn*100 + bIdx * 10 + uIdx)
                {
                    case 300: cvtYUV420sp2RGB<0, 0> (dst, srcstep, y, uv); break;
                    case 301: cvtYUV420sp2RGB<0, 1> (dst, srcstep, y, uv); break;
                    case 320: cvtYUV420sp2RGB<2, 0> (dst, srcstep, y, uv); break;
                    case 321: cvtYUV420sp2RGB<2, 1> (dst, srcstep, y, uv); break;
                    case 400: cvtYUV420sp2RGBA<0, 0>(dst, srcstep, y, uv); break;
                    case 401: cvtYUV420sp2RGBA<0, 1>(dst, srcstep, y, uv); break;
                    case 420: cvtYUV420sp2RGBA<2, 0>(dst, srcstep, y, uv); break;
                    case 421: cvtYUV420sp2RGBA<2, 1>(dst, srcstep, y, uv); break;
                    default: CV_Error( CV_StsBadFlag, "Unknown/unsupported color conversion code" ); break;
                };
            }
            break;
        case CV_YUV2BGR_YV12: case CV_YUV2RGB_YV12: case CV_YUV2BGRA_YV12: case CV_YUV2RGBA_YV12:
        case CV_YUV2BGR_IYUV: case CV_YUV2RGB_IYUV: case CV_YUV2BGRA_IYUV: case CV_YUV2RGBA_IYUV:
            {
                //http://www.fourcc.org/yuv.php#YV12 == yuv420p -> It comprises an NxM Y plane followed by (N/2)x(M/2) V and U planes.
                //http://www.fourcc.org/yuv.php#IYUV == I420 -> It comprises an NxN Y plane followed by (N/2)x(N/2) U and V planes

                if (dcn <= 0) dcn = (code==CV_YUV2BGRA_YV12 || code==CV_YUV2RGBA_YV12 || code==CV_YUV2RGBA_IYUV || code==CV_YUV2BGRA_IYUV) ? 4 : 3;
                const int bIdx = (code==CV_YUV2BGR_YV12 || code==CV_YUV2BGRA_YV12 || code==CV_YUV2BGR_IYUV || code==CV_YUV2BGRA_IYUV) ? 0 : 2;
                const int uIdx  = (code==CV_YUV2BGR_YV12 || code==CV_YUV2RGB_YV12 || code==CV_YUV2BGRA_YV12 || code==CV_YUV2RGBA_YV12) ? 1 : 0;

                CV_Assert( dcn == 3 || dcn == 4 );
                CV_Assert( sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U );

                Size dstSz(sz.width, sz.height * 2 / 3);
                _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                int srcstep = (int)src.step;
                const uchar* y = src.ptr();
                const uchar* u = y + srcstep * dstSz.height;
                const uchar* v = y + srcstep * (dstSz.height + dstSz.height/4) + (dstSz.width/2) * ((dstSz.height % 4)/2);

                int ustepIdx = 0;
                int vstepIdx = dstSz.height % 4 == 2 ? 1 : 0;

                if(uIdx == 1) { std::swap(u ,v), std::swap(ustepIdx, vstepIdx); }

                switch(dcn*10 + bIdx)
                {
                    case 30: cvtYUV420p2RGB<0>(dst, srcstep, y, u, v, ustepIdx, vstepIdx); break;
                    case 32: cvtYUV420p2RGB<2>(dst, srcstep, y, u, v, ustepIdx, vstepIdx); break;
                    case 40: cvtYUV420p2RGBA<0>(dst, srcstep, y, u, v, ustepIdx, vstepIdx); break;
                    case 42: cvtYUV420p2RGBA<2>(dst, srcstep, y, u, v, ustepIdx, vstepIdx); break;
                    default: CV_Error( CV_StsBadFlag, "Unknown/unsupported color conversion code" ); break;
                };
            }
            break;
        case CV_YUV2GRAY_420:
            {
                if (dcn <= 0) dcn = 1;

                CV_Assert( dcn == 1 );
                CV_Assert( sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U );

                Size dstSz(sz.width, sz.height * 2 / 3);
                _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                src(Range(0, dstSz.height), Range::all()).copyTo(dst);
            }
            break;
        case CV_RGB2YUV_YV12: case CV_BGR2YUV_YV12: case CV_RGBA2YUV_YV12: case CV_BGRA2YUV_YV12:
        case CV_RGB2YUV_IYUV: case CV_BGR2YUV_IYUV: case CV_RGBA2YUV_IYUV: case CV_BGRA2YUV_IYUV:
            {
                if (dcn <= 0) dcn = 1;
                const int bIdx = (code == CV_BGR2YUV_IYUV || code == CV_BGRA2YUV_IYUV || code == CV_BGR2YUV_YV12 || code == CV_BGRA2YUV_YV12) ? 0 : 2;
                const int uIdx = (code == CV_BGR2YUV_IYUV || code == CV_BGRA2YUV_IYUV || code == CV_RGB2YUV_IYUV || code == CV_RGBA2YUV_IYUV) ? 1 : 2;

                CV_Assert( (scn == 3 || scn == 4) && depth == CV_8U );
                CV_Assert( dcn == 1 );
                CV_Assert( sz.width % 2 == 0 && sz.height % 2 == 0 );

                Size dstSz(sz.width, sz.height / 2 * 3);
                _dst.create(dstSz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                switch(bIdx + uIdx*10)
                {
                    case 10: cvtRGBtoYUV420p<0, 1>(src, dst); break;
                    case 12: cvtRGBtoYUV420p<2, 1>(src, dst); break;
                    case 20: cvtRGBtoYUV420p<0, 2>(src, dst); break;
                    case 22: cvtRGBtoYUV420p<2, 2>(src, dst); break;
                    default: CV_Error( CV_StsBadFlag, "Unknown/unsupported color conversion code" ); break;
                };
            }
            break;
        case CV_YUV2RGB_UYVY: case CV_YUV2BGR_UYVY: case CV_YUV2RGBA_UYVY: case CV_YUV2BGRA_UYVY:
        case CV_YUV2RGB_YUY2: case CV_YUV2BGR_YUY2: case CV_YUV2RGB_YVYU: case CV_YUV2BGR_YVYU:
        case CV_YUV2RGBA_YUY2: case CV_YUV2BGRA_YUY2: case CV_YUV2RGBA_YVYU: case CV_YUV2BGRA_YVYU:
            {
                //http://www.fourcc.org/yuv.php#UYVY
                //http://www.fourcc.org/yuv.php#YUY2
                //http://www.fourcc.org/yuv.php#YVYU

                if (dcn <= 0) dcn = (code==CV_YUV2RGBA_UYVY || code==CV_YUV2BGRA_UYVY || code==CV_YUV2RGBA_YUY2 || code==CV_YUV2BGRA_YUY2 || code==CV_YUV2RGBA_YVYU || code==CV_YUV2BGRA_YVYU) ? 4 : 3;
                const int bIdx = (code==CV_YUV2BGR_UYVY || code==CV_YUV2BGRA_UYVY || code==CV_YUV2BGR_YUY2 || code==CV_YUV2BGRA_YUY2 || code==CV_YUV2BGR_YVYU || code==CV_YUV2BGRA_YVYU) ? 0 : 2;
                const int ycn  = (code==CV_YUV2RGB_UYVY || code==CV_YUV2BGR_UYVY || code==CV_YUV2RGBA_UYVY || code==CV_YUV2BGRA_UYVY) ? 1 : 0;
                const int uIdx = (code==CV_YUV2RGB_YVYU || code==CV_YUV2BGR_YVYU || code==CV_YUV2RGBA_YVYU || code==CV_YUV2BGRA_YVYU) ? 1 : 0;

                CV_Assert( dcn == 3 || dcn == 4 );
                CV_Assert( scn == 2 && depth == CV_8U );

                _dst.create(sz, CV_8UC(dcn));
                dst = _dst.getMat();

                switch(dcn*1000 + bIdx*100 + uIdx*10 + ycn)
                {
                    case 3000: cvtYUV422toRGB<0,0,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3001: cvtYUV422toRGB<0,0,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3010: cvtYUV422toRGB<0,1,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3011: cvtYUV422toRGB<0,1,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3200: cvtYUV422toRGB<2,0,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3201: cvtYUV422toRGB<2,0,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3210: cvtYUV422toRGB<2,1,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 3211: cvtYUV422toRGB<2,1,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4000: cvtYUV422toRGBA<0,0,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4001: cvtYUV422toRGBA<0,0,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4010: cvtYUV422toRGBA<0,1,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4011: cvtYUV422toRGBA<0,1,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4200: cvtYUV422toRGBA<2,0,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4201: cvtYUV422toRGBA<2,0,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4210: cvtYUV422toRGBA<2,1,0>(dst, (int)src.step, src.ptr<uchar>()); break;
                    case 4211: cvtYUV422toRGBA<2,1,1>(dst, (int)src.step, src.ptr<uchar>()); break;
                    default: CV_Error( CV_StsBadFlag, "Unknown/unsupported color conversion code" ); break;
                };
            }
            break;
        case CV_YUV2GRAY_UYVY: case CV_YUV2GRAY_YUY2:
            {
                if (dcn <= 0) dcn = 1;

                CV_Assert( dcn == 1 );
                CV_Assert( scn == 2 && depth == CV_8U );

                extractChannel(_src, _dst, code == CV_YUV2GRAY_UYVY ? 1 : 0);
            }
            break;
        case CV_RGBA2mRGBA:
            {
                if (dcn <= 0) dcn = 4;
                CV_Assert( scn == 4 && dcn == 4 );

                _dst.create(sz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                if( depth == CV_8U )
                {
                    CvtColorLoop(src, dst, RGBA2mRGBA<uchar>());
                } else {
                    CV_Error( CV_StsBadArg, "Unsupported image depth" );
                }
            }
            break;
        case CV_mRGBA2RGBA:
            {
                if (dcn <= 0) dcn = 4;
                CV_Assert( scn == 4 && dcn == 4 );

                _dst.create(sz, CV_MAKETYPE(depth, dcn));
                dst = _dst.getMat();

                if( depth == CV_8U )
                {
                    CvtColorLoop(src, dst, mRGBA2RGBA<uchar>());
                } else {
                    CV_Error( CV_StsBadArg, "Unsupported image depth" );
                }
            }
            break;
/*
        case CV_RGB2Rot:
        {
            if (dcn <= 0) dcn = 3;
            CV_Assert( scn >= 3 && dcn == 3 );
            
            _dst.create(sz, CV_MAKETYPE(depth, dcn));
            dst = _dst.getMat();
            cv::Matx<int, 3, 3> M(0,1,0,1,0,0,0,0,1);
            cv::Vec<int, 3>  TRange(255,255,255);
            cv::Vec<int,3>   TMin(0,0,0);
            if( depth == CV_8U )
            {
                CvtColorLoop(src, dst, RGB2Rot<CV_8UC3,CV_8UC3>(0, M, TRange, TMin));
            } else {
                CV_Error( CV_StsBadArg, "Unsupported image depth" );
            }
        }
            break;
*/
        default:
            CV_Error( CV_StsBadFlag, "Unknown/unsupported color conversion code" );
    }
}

//! converts image from one color space to another
template class cv::colorSpaceConverter<CV_8UC3,CV_8UC3>;
template class cv::colorSpaceConverter<CV_8UC4,CV_8UC3>;

    // The transform to the new color space is (T vec - 255 TMin)/TRange. 255 is the range of 8bit RGB and can be replaced directly with a different range for 16 and 32 bit RGB spaces. The division by TRange is the direct element wise division and can safely be rounded to recast in the required bit depth.
    


// ***************************************************************************************************************************

template<int src_t, int dst_t> void RGB2Rot_int<src_t, dst_t>::setRGBIndices(int srcBlueIdx, int dstBlueIdx){
    cv::Matx<sWrkType, dstInfo::channels, srcInfo::channels> _fR;
    Vec<sWrkType, dstInfo::channels> _RRange, _RMin;
    
    for (int i=0; i < dstInfo::channels; i++) {
        for (int j=0; j < srcInfo::channels; j++) {
            _fR(i,j) = fR(i,j);
        }
        _RRange[i] = RRange[i];
        _RMin[i] = RMin[i];
    }
    
    srcRGBIndices[0] = (srcBlueIdx+2)%4; srcRGBIndices[1] = 1; srcRGBIndices[2] = srcBlueIdx; // (blueIdx+2)%4 = 2 if blueIdx = 0
    dstRGBIndices[0] = (dstBlueIdx+2)%4; dstRGBIndices[1] = 1; dstRGBIndices[2] = dstBlueIdx; //                 0 if blueIdx = 2
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            fR(i,j) = _fR(dstRGBIndices[i], srcRGBIndices[j]);
        }
        RRange[i] = _RRange[dstRGBIndices[i]];
        RMin[i]   = _RMin[  dstRGBIndices[i]];
    }
};
    
    template<int src_t, int dst_t> Vec<typename cv::Signed_Work_Type<src_t, dst_t>::type, 3> cv::RGB2Rot_int<src_t, dst_t>::toWrk(Vec<double, 3> pnt){
        Vec<typename cv::Signed_Work_Type<src_t, dst_t>::type, 3> out;
        out[0] = RRange[0] * pnt(0)+ RMin[0];
        out[1] = RRange[1] * pnt(1)+ RMin[1];
        out[2] = RRange[2] * pnt(2)+ RMin[2];
        return out;
    };
    template<int src_t, int dst_t> Vec<typename cv::Data_Type<src_t>::type, 3> cv::RGB2Rot_int<src_t, dst_t>::toSrc(Vec<double, 3> pnt){
        Vec<typename cv::Data_Type<src_t>::type, 3> out;
        out[0] = srcType((srcInfo::max - srcInfo::min) * pnt(0)+ srcInfo::min);
        out[1] = srcType((srcInfo::max - srcInfo::min) * pnt(1)+ srcInfo::min);
        out[2] = srcType((srcInfo::max - srcInfo::min) * pnt(2)+ srcInfo::min);
        return out;
    };
    template<int src_t, int dst_t> Vec<typename cv::Data_Type<dst_t>::type, 3> cv::RGB2Rot_int<src_t, dst_t>::toDst(Vec<double, 3> pnt){
        Vec<typename cv::Data_Type<dst_t>::type, 3> out;
        out[0] = dstType((dstInfo::max - dstInfo::min) * pnt(0)+ dstInfo::min);
        out[1] = dstType((dstInfo::max - dstInfo::min) * pnt(1)+ dstInfo::min);
        out[2] = dstType((dstInfo::max - dstInfo::min) * pnt(2)+ dstInfo::min);
        return out;
    };
    
    template<int src_t, int dst_t> Vec<double, 3> cv::RGB2Rot_int<src_t, dst_t>::fromRot(Vec<double, 3> pnt){
        Vec<double, 3> out = pnt;
        out[0] +=   uRMin[0]; out[1] +=   uRMin[1]; out[2] +=   uRMin[2];
        out[0] /= nRScale[0]; out[1] /= nRScale[1]; out[2] /= nRScale[2];
        out[0] *= rRScale[0]; out[1] *= rRScale[1]; out[2] *= rRScale[2];// column multiplication is consistent with use of the inverse equal to the transpose
        return rR.t() * out;
    };
    template<int src_t, int dst_t> Vec<double, 3> cv::RGB2Rot_int<src_t, dst_t>::toRot(Vec<double, 3> pnt){
        Vec<double, 3> out = rR * pnt;
        out[0] *= rRScale[0] * nRScale[0]; out[1] *= rRScale[1] * nRScale[1]; out[2] *= rRScale[2] * nRScale[2];
        out[0] -=   uRMin[0];              out[1] -=   uRMin[1];              out[2] -= uRMin[2];
        return out;
    };

template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setTransformFromAngle(double theta )
    {
    // theta is the rotation in radians about the luminocity axis
    // 0 <= theta < 2 Pi and theta should have been adjusted using
    // theta = adjustTheta(theta,nBits);
    
    int nBits = srcInfo::bitDepth -1; // The number of bits in which to store the numeric value of the matrix (-1 to account for the sign bit)
    double rRange = std::pow(2,nBits);
    
    double Cos      = std::cos(theta);    double CosPlus  = std::cos(CV_PI/6. + theta);    double CosMinus = std::cos(CV_PI/6. - theta);
    double Sin      = std::sin(theta);    double SinPlus  = std::sin(CV_PI/6. + theta);    double SinMinus = std::sin(CV_PI/6. - theta);
    
    double Csc   = 1./std::sin(theta);    double CscPlus  = 1./std::sin(CV_PI/6. + theta);    double CscMinus = 1./std::sin(CV_PI/6. - theta);
    double Sec   = 1./std::cos(theta);    double SecPlus  = 1./std::cos(CV_PI/6. + theta);    double SecMinus = 1./std::cos(CV_PI/6. - theta);

    rR = cv::Matx<double, 3, 3>( 1.,       1.,   1., \
                                -SinPlus,  Cos, -SinMinus, \
                                -CosPlus, -Sin,  CosMinus );
    
//  rRScale scales to give the unscaled rotated ranges.
    rRScale = Vec<double, 3>(1./std::sqrt(3), std::sqrt(0.6666666666666666), std::sqrt(0.6666666666666666));
    
//  nRScale is scaled to give ranges 0:1, -0.5:0.5 -0.5:0.5 with a unit RGB cube.
    nRScale = Vec<double, 3>(1/std::sqrt(3), \
                             (std::sqrt(1.5))/(2.*std::cos(CV_PI/6. - std::fmod(theta - CV_PI/6., CV_PI/3.))), \
                             (std::sqrt(1.5))/(2.*std::cos(CV_PI/6. - std::fmod(theta,            CV_PI/3.))));
        
    switch (int(std::floor(6* (std::fmod(theta, CV_PI/2.))/CV_PI)))
    {
        case 0:
            fRScale = Vec<double, 3>(1,(-2*SinPlus)/rRange,(-2*CosPlus)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                          1,1,1,\
                                          sWrkType(rRange/2.), sWrkType(-(rRange*Cos*CscPlus)/2.), sWrkType( (rRange*CscPlus*SinMinus)/2.),\
                                          sWrkType(rRange/2.), sWrkType( (rRange*Sin*SecPlus)/2.), sWrkType(-(rRange*SecPlus*CosMinus)/2.)
                                          );
            RRange[0] =  sWrkType(3 * srcInfo::max);                               RMin[0] = 0;                           RMax[0] = RRange[0];
            RRange[1] =  sWrkType(    srcInfo::max * rRange * CscPlus * Cos);      RMin[1] = sWrkType(-1 * RRange[1]/2);  RMax[1] = RRange[1]/2;
            RRange[2] =  sWrkType(    srcInfo::max * rRange * SecPlus * CosMinus); RMin[2] = sWrkType(-1 * RRange[2]/2);  RMax[2] = RRange[2]/2;
            break;
        case 1:
            fRScale = Vec<double, 3>(1,(2*Cos)/rRange,(-2*Sin)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                          1,1,1,\
                                          sWrkType(-(rRange*Sec*SinPlus)/2.), sWrkType(rRange/2.), sWrkType(-(rRange*Sec*SinMinus)/2.),\
                                          sWrkType( (rRange*Csc*CosPlus)/2.), sWrkType(rRange/2.), sWrkType(-(rRange*Csc*CosMinus)/2.)
                                          );
            RRange[0] = sWrkType( 3 * srcInfo::max);                           RMin[0] = 0;                           RMax[0] = RRange[0];
            RRange[1] = sWrkType(     srcInfo::max * rRange * SinPlus  * Sec); RMin[1] = sWrkType(-1 * RRange[1]/2);  RMax[1] = RRange[1]/2;
            RRange[2] = sWrkType(     srcInfo::max * rRange * CosMinus * Csc); RMin[2] = sWrkType(-1 * RRange[2]/2);  RMax[2] = RRange[2]/2;
            

            break;
        case 2:
            fRScale = Vec<double, 3>(1,(-2*SinMinus)/rRange,(2*CosMinus)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                          1,1,1,\
                                          sWrkType( (rRange*CscMinus*SinPlus)/2.), sWrkType(-(rRange*Cos*CscMinus)/2.), sWrkType(rRange/2.),\
                                          sWrkType(-(rRange*SecMinus*CosPlus)/2.), sWrkType(-(rRange*Sin*SecMinus)/2.), sWrkType(rRange/2.)
                                          );
            
            RRange[0] = sWrkType( 3 * srcInfo::max);                               RMin[0] = 0;                           RMax[0] = RRange[0];
            RRange[1] = sWrkType(-1 * srcInfo::max * rRange * CscMinus * SinPlus); RMin[1] = sWrkType(-1 * RRange[1]/2);  RMax[1] = RRange[1]/2;
            RRange[2] = sWrkType(     srcInfo::max * rRange * SecMinus * Sin);     RMin[2] = sWrkType(-1 * RRange[2]/2);  RMax[2] = RRange[2]/2;

            break;
        default:
            fRScale = Vec<double, 3>();
            fR = cv::Matx<sWrkType, 3, 3>();
            RRange = Vec<sWrkType, 3>();  RMin = Vec<sWrkType, 3>();  RMax = Vec<sWrkType, 3>();
    };
                             
     fScale[0] = rRScale[0] * fRScale[0];     fScale[1] = rRScale[1] * fRScale[1];     fScale[2] = rRScale[2] * fRScale[2];
      scale[0] = rRScale[0] * nRScale[0];      scale[1] = rRScale[1] * nRScale[1];      scale[2] = rRScale[2] * nRScale[2];
        
    uRRange[0] = 1.0; uRMin[0] = 0;    uRMax[0] = 1.0;
    uRRange[1] = 1.0; uRMin[1] = -0.5; uRMax[1] = 0.5;
    uRRange[2] = 1.0; uRMin[2] = -0.5; uRMax[2] = 0.5;
        
    qfR[0][0] = fR(0,0); qfR[0][1] = fR(0,1); qfR[0][2] = fR(0,2);
    qfR[1][0] = fR(1,0); qfR[1][1] = fR(1,1); qfR[1][2] = fR(1,2);
    qfR[2][0] = fR(2,0); qfR[2][1] = fR(2,1); qfR[2][2] = fR(2,2);
    
    };
                             
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setRanges(){
    // Setup internal data
    cv::Matx<sWrkType, 3, 8> RGBBox({
        0, 1, 0, 0, 0, 1, 1, 1,
        0, 0, 1, 0, 1, 0, 1, 1,
        0, 0, 0, 1, 1, 1, 0, 1});
    cv::Matx<sWrkType, 3, 8> RGBBoxInNew = fR * RGBBox;
    cv::Matx<sWrkType, 3, 1> RGBCubeMax = cv::MaxInRow<wrkType, 3, 8>(RGBBoxInNew);
    cv::Matx<sWrkType, 3, 1> RGBCubeMin = cv::MinInRow<wrkType, 3, 8>(RGBBoxInNew);
    cv::Matx<sWrkType, 3, 1> RGBCubeRange = RGBCubeMax - RGBCubeMin;
    
    RMin[0] = RGBCubeMin(0,0); RMax[0] = RGBCubeMax(0,0); RRange[0] = RGBCubeRange(0,0);
    RMin[1] = RGBCubeMin(1,0); RMax[1] = RGBCubeMax(1,0); RRange[1] = RGBCubeRange(1,0);
    RMin[2] = RGBCubeMin(2,0); RMax[2] = RGBCubeMax(2,0); RRange[2] = RGBCubeRange(2,0);
    
};
                             

template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setuCinSrc(Vec<double, 3> newC){
    uC_src = newC; // The center point for the distribution function in the source color space scaled to 0:1
    uC_wrk = toRot(uC_src);
    qC_wrk = toWrk(uC_wrk);
    qC_src = toSrc(uC_src);
};
                             
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setuC(Vec<double, 3> newC){
    Vec<double, 3> shift(0,0.5,0.5);
    Vec<double, 3> newC_src_temp(newC(indxA),newC(indxB),newC(indxC));
    uC_wrk = newC_src_temp; // The center point for the distribution function in the source color space
    uC_src = fromRot(uC_wrk);
    qC_wrk = toWrk(uC_wrk);
    qC_src = toSrc(uC_wrk);
};
                             
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setG(Vec<double, 3> newG){
    uG[0] = newG(indxA); uG[1] = newG(indxB); uG[2] = newG(indxC);
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setRedDistributionErf(){
    setRedDistributionErf(qC_wrk[dstRGBIndices[0]],uG[dstRGBIndices[0]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setRedDistributionErf(  int center, double gradient){
    redScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> (   gradient, center, wrkType((srcInfo::max - srcInfo::min) * RMin[0]), wrkType((srcInfo::max - srcInfo::min) * (RMin[0]+RRange[0])), dstType(dstInfo::min), dstType(dstInfo::max));
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setGreenDistributionErf(){
    setGreenDistributionErf(qC_wrk[dstRGBIndices[1]],uG[dstRGBIndices[1]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setGreenDistributionErf(int center, double gradient){
    greenScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> ( gradient, center, wrkType((srcInfo::max - srcInfo::min) * RMin[1]), wrkType((srcInfo::max - srcInfo::min) * (RMin[1]+RRange[1])), dstType(dstInfo::min), dstType(dstInfo::max));
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setBlueDistributionErf(){
    setBlueDistributionErf(qC_wrk[dstRGBIndices[2]],uG[dstRGBIndices[2]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::setBlueDistributionErf( int center, double gradient){
    blueScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> (  gradient, center, wrkType((srcInfo::max - srcInfo::min) * RMin[2]), wrkType((srcInfo::max - srcInfo::min) * (RMin[2]+RRange[2])), dstType(dstInfo::min), dstType(dstInfo::max));
};

template<int src_t, int dst_t> cv::RGB2Rot_int<src_t, dst_t>::RGB2Rot_int(const int srcBlueIdx, const int dstBlueIdx, const double theta, cv::Vec<double, 3> newG, cv::Vec<double, 3> newC){
    
    init();
    setTransformFromAngle(theta);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    setuC(newC); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(newG);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
};

template<int src_t, int dst_t> cv::RGB2Rot_int<src_t, dst_t>::RGB2Rot_int(const int srcBlueIdx, const int dstBlueIdx, const double theta, std::vector<double>  newG, std::vector<double> newC){
    init();
    setTransformFromAngle(theta);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    cv::Vec<double, 3> c{newC[0],newC[1],newC[2]};
    cv::Vec<double, 3> g{newG[0],newG[1],newG[2]};
    setuC(c); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(g);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
};
                             
template<int src_t, int dst_t> void cv::RGB2Rot_int<src_t, dst_t>::init(){
    indxA = 0; indxB = 1; indxC = 2;
    
    for(int i = 0; i < dstInfo::channels; i++){
        for(int j = 0; j < srcInfo::channels; j++){
            if (j==i) {
                fR(i,j) = 1;
            }else{
                fR(i,j) = 0;// Dont add the alpha channel to the color mix.
            }
        }
    }
    
    RMin[0] = srcInfo::min; RMax[0] = srcInfo::min; RRange[0] = srcInfo::max - srcInfo::min;
    RMin[1] = srcInfo::min; RMax[1] = srcInfo::max; RRange[1] = srcInfo::max - srcInfo::min;
    RMin[2] = srcInfo::min; RMax[2] = srcInfo::max; RRange[2] = srcInfo::max - srcInfo::min;
};
template<int src_t, int dst_t> cv::RGB2Rot_int<src_t, dst_t>::RGB2Rot_int(){
    init();
}

template<int src_t, int dst_t> inline void cv::RGB2Rot_int<src_t, dst_t>::operator()(const typename cv::Data_Type<src_t>::type* src, typename cv::Data_Type<dst_t>::type* dst, int n) const
{
    n *= dstInfo::channels;
    for(int i = 0; i < n; i += dstInfo::channels, src += srcInfo::channels)
    {
        wrkType X = src[0]*qfR[0][0] + src[1]*qfR[0][1] + src[2]*qfR[0][2]; // CV_DESCALE(x,n) = (((x) + (1 << ((n)-1))) >> (n))
        wrkType Y = src[0]*qfR[1][0] + src[1]*qfR[1][1] + src[2]*qfR[1][2]; // could be used in place of * scale
        wrkType Z = src[0]*qfR[2][0] + src[1]*qfR[2][1] + src[2]*qfR[2][2]; // Find shift which fits RRange into the desired bit depth.
        
        (*redScale)(X, dst[i  ]);
        (*greenScale)(Y, dst[i+1]);
        (*blueScale)(Z, dst[i+2]);
    }
}

template class cv::RGB2Rot_int<CV_8UC3,CV_8UC3>;
template class cv::RGB2Rot_int<CV_8UC4,CV_8UC3>;


// ***************************************************************************************************************************

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setRGBIndices(int srcBlueIdx, int dstBlueIdx){
    wrkType _M[dstInfo::channels][srcInfo::channels];
    wrkType _TRange[dstInfo::channels], _TMin[dstInfo::channels];
    
    for (int i=0; i<dstInfo::channels; i++) {
        for (int j=0; j<srcInfo::channels; j++) {
            _M[i][j] = M[i][j];
        }
        _TRange[i] = TRange[i];
        _TMin[i] = TMin[i];
    }
    
    srcRGBIndices[0] = (srcBlueIdx+2)%4; srcRGBIndices[1] = 1; srcRGBIndices[2] = srcBlueIdx; // (blueIdx+2)%4 = 2 if blueIdx = 0
    dstRGBIndices[0] = (dstBlueIdx+2)%4; dstRGBIndices[1] = 1; dstRGBIndices[2] = dstBlueIdx; //                 0 if blueIdx = 2
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            M[i][j] = _M[dstRGBIndices[i]][srcRGBIndices[j]];
        }
        TRange[i] = _TRange[dstRGBIndices[i]];
        TMin[i]   = _TMin[  dstRGBIndices[i]];
    }
};

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setTransformFromVecs(cv::Vec<int, 3> sp0, cv::Vec<int, 3> sp1, cv::Vec<int, 3> sp2){    
    indxA = 0; indxB = 1; indxC = 2;
    
    cv::sVec<int, 3> v1(1.0, sp1 - sp0);
    cv::sVec<int, 3> v2(1.0, sp2 - sp0);
    
    v1.factor(); v1.scale=1.0;
    v2.factor(); v2.scale=1.0;
    
    cv::sVec<int, 1> v1Norm2 = v1 * v1; // v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2];
    cv::sVec<int, 1> v2Norm2 = v2 * v2; // v2[0] * v2[0] + v2[1] * v2[1] + v2[2] * v2[2];
    cv::sVec<int, 1> v2DotV1 = v2 * v1; // v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
    float v1V2Sin = sqrtf(v1Norm2(0) * v2Norm2(0) - v2DotV1(0) * v2DotV1(0));
    
    cv::sVec<int, 3> a1 = v1;
    // cv::sVec<int, 3> a2a = v1Norm2(0) * v2;
    // cv::sVec<int, 3> a2b = v2DotV1(0) * v1;
    cv::sVec<int, 3> a2(1.0 / (v1Norm2(0) * v1V2Sin), v1Norm2(0) * v2 - v2DotV1(0) * v1);
    cv::sVec<int, 3> a3 = v1.cross(v2);
    a3.scale = 1.0/v1V2Sin;
    
    a1.factor(); a2.factor(); a3.factor(); // Remove common factors
    
    // Reorder as a rigt handed coordinate system with a1 in RGB. If a1 is in RGB the all components are positive.
    // a1 x a2 = a3, a2 x a3 = a1, a3 x a1 = a2 Cyclic permitations are allowed.
    if (a1.allPositive()) {     // Then a1.vec is in RGB. Do nothing.
        if (a1.scale < 0.0) { // a1 is pointing in the wrong direction flip the sign and correct the product a1 x a2 = a3.
            a1.scale *= -1.0;
            std::swap(a2, a3);
            std::swap(indxB, indxC);
        }
    } else if (a2.allPositive()){ // Then a2.vec is in RGB. Make a2 -> a1, a1 -> a2 and flip sign of a3 to preserve a1 x a2 = a3.
        if (a2.scale < 0.0) { // a2 is pointing in the wrong direction flip the sign and correct the product a1 x a2 = a3.
            a2.scale *= -1.0;
            std::swap(a1, a2); // Now : a2,a1,a3 As desired.
            std::swap(indxA, indxB);
        } else {
            std::swap(a1, a3);    // Now : a3,a2,a1
            std::swap(indxA, indxC);
            std::swap(a1, a2);    // Now : a2,a3,a1 As desired.
            std::swap(indxA, indxB);
        }
        a3 *= -1; // Flip sign of a3 to preserve a1 x a2 = a3.
        
    }else if (a3.allPositive()){ // Then a3.vec is in RGB. Perform cyclic permutation of the vectors. a3 -> a1, a1 -> a2, a2 -> a3.
        if (a3.scale < 0.0) { // a3 is pointing in the wrong direction flip the sign and correct the product a1 x a2 = a3.
            a3.scale *= -1.0;
            std::swap(a1, a3);    // Now : a3,a2,a1
            std::swap(indxA, indxC);
        } else {
            std::swap(a1, a3);    // Now : a3,a2,a1
            std::swap(indxA, indxC);
            std::swap(a2, a3);    // Now : a3,a1,a2 As desired.
            std::swap(indxB, indxC);
        }
    }
    cv::Matx<int, 3, 3> T(a1[0],a1[1],a1[2],a2[0],a2[1],a2[2],a3[0],a3[1],a3[2]);
    setTransform(T);
    
};

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setTransform(cv::Matx<int, 3, 3>& _T){
    T = _T;
    // Setup internal data
    setRanges();
    // Rescale to avoid bit overflow during transform.
    
    int TitRowSum[3] = {
        static_cast<int>(std::abs(T(0,0))+std::abs(T(0,1))+std::abs(T(0,2))),
        static_cast<int>(std::abs(T(1,0))+std::abs(T(1,1))+std::abs(T(1,2))),
        static_cast<int>(std::abs(T(2,0))+std::abs(T(2,1))+std::abs(T(2,2)))
    };
    // Find left most bit.
    int TitRowLog2Sum[3] = {0,0,0};
    for (int i=0; i<=2; i++) {
        while (TitRowSum[i] >>= 1) ++TitRowLog2Sum[i];
    }
    
    // MWB is the number of bits needed for the Working Type storage.
    // a[0] srcMax + a[1] srcMax + a[2] srcMax  = ( a[0] + a[1] + a[2]) * srcMax
    // MWB = log2(( a[0] + a[1] + a[2]) * srcMax) = log2( a[0] + a[1] + a[2]) + log2( srcMax )
    cv::Matx<int, 3, 1> MWB({
        TitRowLog2Sum[0] + CV_MAT_DEPTH_BITS(src_t),
        TitRowLog2Sum[1] + CV_MAT_DEPTH_BITS(src_t),
        TitRowLog2Sum[2] + CV_MAT_DEPTH_BITS(src_t)
    });
    
    int excessWBFactor[3] = {
        (int) ceil(pow(2, TitRowLog2Sum[0] - CV_MAT_DEPTH_BITS(src_t))),
        (int) ceil(pow(2, TitRowLog2Sum[1] - CV_MAT_DEPTH_BITS(src_t))),
        (int) ceil(pow(2, TitRowLog2Sum[2] - CV_MAT_DEPTH_BITS(src_t)))
    };
    
    M[0][0] = T(0,0)/excessWBFactor[0]; M[0][1] = T(0,1)/excessWBFactor[0]; M[0][2] = T(0,2)/excessWBFactor[0];
    M[1][0] = T(1,0)/excessWBFactor[1]; M[1][1] = T(1,1)/excessWBFactor[1]; M[1][2] = T(1,2)/excessWBFactor[1];
    M[2][0] = T(2,0)/excessWBFactor[2]; M[2][1] = T(2,1)/excessWBFactor[2]; M[2][2] = T(2,2)/excessWBFactor[2];
    
    setRanges();

};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setTransformFromAngle(double theta ){
    // theta is the rotation in radians about the luminocity axis
    // preserve gives ranges where the axis scaling should not reduce information.
    // values outside the preserve range are vulnerable to truncation.
        
    // nT is scaled to give ranges 0:1, -0.5:0.5 -0.5:0.5 with a unit RGB cube.
    uT = cv::Matx<double, 3, 3>(0.3333333333333333,0.3333333333333333,0.3333333333333333, 
            ((-1.0/std::cos(theta - (CV_PI*std::floor(0.5 + (3*theta)/CV_PI))/3.))*(std::cos(theta) + std::sqrt(3)*std::sin(theta)))/4.,\
            (std::cos(theta)*(1.0/std::cos(theta - (CV_PI*std::floor(0.5 + (3*theta)/CV_PI))/3.)))/2.,\
            ((1.0/std::cos(theta - (CV_PI*std::floor(0.5 + (3*theta)/CV_PI))/3.))*(-std::cos(theta) + std::sqrt(3)*std::sin(theta)))/4.,\
            ((1.0/std::cos((CV_PI - 6*std::fmod(theta, CV_PI/3.))/6.))*(-(std::sqrt(3)*std::cos(theta)) + std::sin(theta)))/4.,\
    ((-1.0/std::cos((CV_PI - 6*std::fmod(theta, CV_PI/3.))/6.))*std::sin(theta))/2.,\
    ((1.0/std::cos((CV_PI - 6*std::fmod(theta, CV_PI/3.))/6.))*(std::sqrt(3)*std::cos(theta) + std::sin(theta)))/4.);
    
    int nBits = srcInfo::bitDepth -1; // The number of bits in which to store the numeric value of the matrix (-1 to account for the sign bit)
    double rRange = std::pow(2,nBits);
    double newTheta = adjustTheta(theta,nBits);
    
    double Cos      = std::cos(newTheta);
    double CosPlus  = std::cos(CV_PI/6. + newTheta);
    double CosMinus = std::cos(CV_PI/6. - newTheta);
    
    double Sin      = std::sin(newTheta);
    double SinPlus  = std::sin(CV_PI/6. + newTheta);
    double SinMinus = std::sin(CV_PI/6. - newTheta);
    
    double Csc      = 1./std::sin(newTheta);
    double CscPlus  = 1./std::sin(CV_PI/6. + newTheta);
    double CscMinus = 1./std::sin(CV_PI/6. - newTheta);
    
    double Sec      = 1./std::cos(newTheta);
    double SecPlus  = 1./std::cos(CV_PI/6. + newTheta);
    double SecMinus = 1./std::cos(CV_PI/6. - newTheta);
    
    switch (int(std::floor(6* (std::fmod(theta, CV_PI/2.))/CV_PI)))
    {
        case 0:
            fRScale = Vec<double, 3>(1,(-2*SinPlus)/rRange,(-2*CosPlus)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                        1,1,1,
                                        sWrkType(rRange/2.), sWrkType(-(rRange*Cos*CscPlus)/2.), sWrkType( (rRange*CscPlus*SinMinus)/2.),
                                        sWrkType(rRange/2.), sWrkType( (rRange*Sin*SecPlus)/2.), sWrkType(-(rRange*SecPlus*CosMinus)/2.)
                                        );
            break;
        case 1:
            fRScale = Vec<double, 3>(1,(2*Cos)/rRange,(-2*Sin)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                        1,1,1,
                                        sWrkType(-(rRange*Sec*SinPlus)/2.), sWrkType(rRange/2.), sWrkType(-(rRange*Sec*SinMinus)/2.),
                                        sWrkType( (rRange*Csc*CosPlus)/2.), sWrkType(rRange/2.), sWrkType(-(rRange*Csc*CosMinus)/2.)
                                        );
            break;
        case 2:
            fRScale = Vec<double, 3>(1,(-2*SinMinus)/rRange,(2*CosMinus)/rRange);
            fR = cv::Matx<sWrkType, 3, 3>(
                                        1,1,1,
                                        sWrkType( (rRange*CscMinus*SinPlus)/2.), sWrkType(-(rRange*Cos*CscMinus)/2.), sWrkType(rRange/2.),
                                        sWrkType(-(rRange*SecMinus*CosPlus)/2.), sWrkType(-(rRange*Sin*SecMinus)/2.), sWrkType(rRange/2.)
                                        );
            break;
        default:
            fR = cv::Matx<sWrkType, 3, 3>();
    }
    

    
    
    uiT = cv::Matx<double, 3, 3>(1.,
    (-2.*std::cos(theta - (CV_PI*std::floor(0.5 + (3.*theta)/CV_PI))/3.)*(std::cos(theta) + std::sqrt(3.)*std::sin(theta)))/3.,
    ( 2.*std::cos((CV_PI - 6.*std::fmod(theta, CV_PI/3.))/6.)*(-(std::sqrt(3.)*std::cos(theta)) + std::sin(theta)))/3.,
    1.,
    (4.*std::cos(theta)*std::cos(theta - (CV_PI*std::floor(0.5 + (3.*theta)/CV_PI))/3.))/3.,
    (-4.*std::cos((CV_PI - 6.*std::fmod(theta, CV_PI/3.))/6.)*std::sin(theta))/3.,
    1.,
    (2.*std::cos(theta - (CV_PI*std::floor(0.5 + (3.*theta)/CV_PI))/3.)*(-std::cos(theta) + std::sqrt(3.)*std::sin(theta)))/3.,
    (2.*std::cos((CV_PI - 6.*std::fmod(theta, CV_PI/3.))/6.)*(std::sqrt(3.)*std::cos(theta) + std::sin(theta)))/3.
    );
    
    uTRange[0] = 1.0; uTMin[0] = 0;    uTMax[0] = 1.0;
    uTRange[1] = 1.0; uTMin[1] = -0.5; uTMax[1] = 0.5;
    uTRange[2] = 1.0; uTMin[2] = -0.5; uTMax[2] = 0.5;

        TRange[0] = srcInfo::max; TMin[0] = 0;
        TRange[1] = srcInfo::max/2.0; TMin[1] = -1.0 * srcInfo::max/2.0;
        TRange[2] = srcInfo::max/2.0; TMin[2] = -1.0 * srcInfo::max/2.0;
        
        M[0][0] = uT(0,0) * srcInfo::max; M[0][1] = uT(0,1) * srcInfo::max; M[0][2] = uT(0,2) * srcInfo::max;
        M[1][0] = uT(1,0) * srcInfo::max; M[1][1] = uT(1,1) * srcInfo::max; M[1][2] = uT(1,2) * srcInfo::max;
        M[2][0] = uT(2,0) * srcInfo::max; M[2][1] = uT(2,1) * srcInfo::max; M[2][2] = uT(2,2) * srcInfo::max;
        
    };
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setRanges(){
    // Setup internal data
    cv::Matx<sWrkType, 3, 8> RGBBox({
        0, 1, 0, 0, 0, 1, 1, 1,
        0, 0, 1, 0, 1, 0, 1, 1,
        0, 0, 0, 1, 1, 1, 0, 1});
    cv::Matx<wrkType, 3, 8> RGBBoxInNew = T * RGBBox;
    cv::Matx<wrkType, 3, 1> RGBCubeMax = cv::MaxInRow<wrkType, 3, 8>(RGBBoxInNew);
    cv::Matx<wrkType, 3, 1> RGBCubeMin = cv::MinInRow<wrkType, 3, 8>(RGBBoxInNew);
    cv::Matx<wrkType, 3, 1> RGBCubeRange = RGBCubeMax - RGBCubeMin;
    
    TMin[0] = RGBCubeMin(0,0); TMax[0] = RGBCubeMax(0,0); TRange[0] = RGBCubeRange(0,0);
    TMin[1] = RGBCubeMin(1,0); TMax[1] = RGBCubeMax(1,0); TRange[1] = RGBCubeRange(1,0);
    TMin[2] = RGBCubeMin(2,0); TMax[2] = RGBCubeMax(2,0); TRange[2] = RGBCubeRange(2,0);
    
};

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setuCinSrc(Vec<double, 3> newC){
    int C[3]; // The center point for the distribution function in the rotated color space
    Vec<double, 3> newC_src_temp(newC(indxA),newC(indxB),newC(indxC));
    uC_src = newC_src_temp; // The center point for the distribution function in the source color space scaled to 0:1
    uC_wrk = uT * uC_src - uTMin;
    qC_wrk[0] = TRange[0] * uC_wrk(0); qC_wrk[1] = TRange[1] * uC_wrk(1); qC_wrk[2] = TRange[2] * uC_wrk(2);
    qC_src[0] = (srcInfo::max - srcInfo::min) * uC_src(0); qC_src[1] = (srcInfo::max - srcInfo::min) * uC_src(1); qC_src[2] = (srcInfo::max - srcInfo::min) * uC_src(2);
    C[0] = TRange[0] * uC_wrk(0); C[1] = TRange[1] * uC_wrk(1); C[2] = TRange[2] * uC_wrk(2);
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setCinSrc(Vec<int, 3> newC_src){
    Vec<srcType, 3> newC_src_temp(srcType(newC_src(indxA)),srcType(newC_src(indxB)),srcType(newC_src(indxC)));
    qC_src = newC_src_temp; // The center point for the distribution function in the source color space
    uC_src = qC_src/(srcInfo::max - srcInfo::min);
    uC_wrk = uT * uC_src - uTMin;
    qC_wrk[0] = TRange[0] * uC_wrk(0)+ TMin[0];
    qC_wrk[1] = TRange[1] * uC_wrk(1)+ TMin[1];
    qC_wrk[2] = TRange[2] * uC_wrk(2)+ TMin[2];
    C[0] = TRange[0] * uC_wrk(0) + TMin[0]; C[1] = TRange[1] * uC_wrk(1) + TMin[1]; C[2] = TRange[2] * uC_wrk(2) + TMin[2];
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setuC(Vec<double, 3> newC){
    Vec<double, 3> shift(0,0.5,0.5);
    Vec<double, 3> newC_src_temp(newC(indxA),newC(indxB),newC(indxC));
    uC_wrk = newC_src_temp; // The center point for the distribution function in the source color space
    qC_wrk[0] = (dstInfo::max - dstInfo::min) * uC_wrk[0] + dstInfo::min;
    qC_wrk[1] = (dstInfo::max - dstInfo::min) * uC_wrk[1] + dstInfo::min;
    qC_wrk[2] = (dstInfo::max - dstInfo::min) * uC_wrk[2] + dstInfo::min;
    uC_src = uiT * (uC_wrk - shift);
    qC_src[0] = (srcInfo::max - srcInfo::min) * uC_src[0] + srcInfo::min;
    qC_src[1] = (srcInfo::max - srcInfo::min) * uC_src[1] + srcInfo::min;
    qC_src[2] = (srcInfo::max - srcInfo::min) * uC_src[2] + srcInfo::min;

    C[0] = TRange[0] * uC_wrk(0) + TMin[0]; C[1] = TRange[1] * uC_wrk(1) + TMin[1]; C[2] = TRange[2] * uC_wrk(2) + TMin[2];
    
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setC(Vec<int, 3> newC){
    Vec<double, 3> shift(0,0.5,0.5);
    C[0] = newC(indxA); C[1] = newC(indxB); C[2] = newC(indxC);
    qC_wrk[0] = newC(indxA); qC_wrk[1] = newC(indxB); qC_wrk[2] = newC(indxC);
    uC_wrk[0] = (newC(indxA)- TMin[0])/TRange[0];
    uC_wrk[1] = (newC(indxB)- TMin[1])/TRange[1];
    uC_wrk[2] = (newC(indxC)- TMin[2])/TRange[2];
    uC_src = uiT * (uC_wrk - shift);
    qC_src[0] = (srcInfo::max - srcInfo::min) * uC_src(0) + srcInfo::min;
    qC_src[1] = (srcInfo::max - srcInfo::min) * uC_src(1) + srcInfo::min;
    qC_src[2] = (srcInfo::max - srcInfo::min) * uC_src(2) + srcInfo::min;
};

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setG(Vec<double, 3> newG){
    qG[0] = newG(indxA); qG[1] = newG(indxB); qG[2] = newG(indxC);
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setuG(Vec<double, 3> newG){
    qG[0] = newG(indxA); qG[1] = newG(indxB); qG[2] = newG(indxC);
};

template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setRedDistributionErf(){
    setRedDistributionErf(C[dstRGBIndices[0]],qG[dstRGBIndices[0]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setRedDistributionErf(  int center, double gradient){
    redScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> (   gradient, center, wrkType((srcInfo::max - srcInfo::min) * TMin[0]), wrkType((srcInfo::max - srcInfo::min) * (TMin[0]+TRange[0])), dstType(dstInfo::min), dstType(dstInfo::max));
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setGreenDistributionErf(){
    setGreenDistributionErf(C[dstRGBIndices[1]],qG[dstRGBIndices[1]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setGreenDistributionErf(int center, double gradient){
    greenScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> ( gradient, center, wrkType((srcInfo::max - srcInfo::min) * TMin[1]), wrkType((srcInfo::max - srcInfo::min) * (TMin[1]+TRange[1])), dstType(dstInfo::min), dstType(dstInfo::max));
    };
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setBlueDistributionErf(){
    setBlueDistributionErf(C[dstRGBIndices[2]],qG[dstRGBIndices[2]]);
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::setBlueDistributionErf( int center, double gradient){
    blueScale = new distributeErf<wrkInfo::dataType, dstInfo::dataType> (  gradient, center, wrkType((srcInfo::max - srcInfo::min) * TMin[2]), wrkType((srcInfo::max - srcInfo::min) * (TMin[2]+TRange[2])), dstType(dstInfo::min), dstType(dstInfo::max));
};

template<int src_t, int dst_t> cv::RGB2Rot<src_t, dst_t>::RGB2Rot(const int srcBlueIdx, const int dstBlueIdx, Vec<int, 3> sp0, Vec<int, 3> sp1, Vec<int, 3> sp2, Vec<double, 3> newG, Vec<int, 3> newC){

    init();
    setTransformFromVecs(sp0, sp1, sp2);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    setC(newC); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(newG);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
    
};

template<int src_t, int dst_t> cv::RGB2Rot<src_t, dst_t>::RGB2Rot(const int srcBlueIdx, const int dstBlueIdx, cv::Matx<int, 3, 3>& T, cv::Vec<double, 3> newG, cv::Vec<int, 3> newC){

    init();
    setTransform(T);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    setC(newC); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(newG);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
};

template<int src_t, int dst_t> cv::RGB2Rot<src_t, dst_t>::RGB2Rot(const int srcBlueIdx, const int dstBlueIdx, const double theta, cv::Vec<double, 3> newG, cv::Vec<double, 3> newC){
    
    init();
    setTransformFromAngle(theta);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    setuC(newC); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(newG);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
};
    
template<int src_t, int dst_t> cv::RGB2Rot<src_t, dst_t>::RGB2Rot(const int srcBlueIdx, const int dstBlueIdx, const double theta, std::vector<double>  newG, std::vector<double> newC){
    init();
    setTransformFromAngle(theta);
    setRGBIndices(srcBlueIdx, dstBlueIdx);
    cv::Vec<double, 3> c{newC[0],newC[1],newC[2]};
    cv::Vec<double, 3> g{newG[0],newG[1],newG[2]};
    setuC(c); // asumes that C is in rotated color space and with a dstBlueIdx
    setG(g);
    setRedDistributionErf();
    setGreenDistributionErf();
    setBlueDistributionErf();
};
template<int src_t, int dst_t> void cv::RGB2Rot<src_t, dst_t>::init(){
        indxA = 0; indxB = 1; indxC = 2;
        
        for(int i = 0; i < dstInfo::channels; i++){
            for(int j = 0; j < srcInfo::channels; j++){
                if (j==i) {
                    M[i][j] = 1;
                }else{
                    M[i][j] = 0;// Dont add the alpha channel to the color mix.
                }
            }
        }
        
        TMin[0] = srcInfo::min; TMax[0] = srcInfo::min; TRange[0] = srcInfo::max - srcInfo::min;
        TMin[1] = srcInfo::min; TMax[1] = srcInfo::max; TRange[1] = srcInfo::max - srcInfo::min;
        TMin[2] = srcInfo::min; TMax[2] = srcInfo::max; TRange[2] = srcInfo::max - srcInfo::min;
    };
template<int src_t, int dst_t> cv::RGB2Rot<src_t, dst_t>::RGB2Rot(){
    init();
}

template<int src_t, int dst_t> inline void cv::RGB2Rot<src_t, dst_t>::operator()(const typename cv::Data_Type<src_t>::type* src, typename cv::Data_Type<dst_t>::type* dst, int n) const
{
    n *= dstInfo::channels;
    for(int i = 0; i < n; i += dstInfo::channels, src += srcInfo::channels)
    {
        wrkType X = src[0]*M[0][0] + src[1]*M[0][1] + src[2]*M[0][2]; // CV_DESCALE(x,n) = (((x) + (1 << ((n)-1))) >> (n))
        wrkType Y = src[0]*M[1][0] + src[1]*M[1][1] + src[2]*M[1][2]; // could be used in place of * scale
        wrkType Z = src[0]*M[2][0] + src[1]*M[2][1] + src[2]*M[2][2]; // Find shift which fits TRange into the desired bit depth.
        
        (*redScale)(X, dst[i  ]);
        (*greenScale)(Y, dst[i+1]);
        (*blueScale)(Z, dst[i+2]);
    }
}
    
template class cv::RGB2Rot<CV_8UC3,CV_8UC3>;
template class cv::RGB2Rot<CV_8UC4,CV_8UC3>;
    
// ***************************************************************************************************************************

template<int src_t, int dst_t> cv::ABC2Metric<src_t, dst_t>::ABC2Metric(cv::Matx<int, 3, 3>& T, cv::Vec<int, 3> newC){
    init();
    M[0][0] = T(0,0); M[0][1] = T(0,1); M[0][2] = T(0,2);
    M[1][0] = T(1,0); M[1][1] = T(1,1); M[1][2] = T(1,2);
    M[2][0] = T(2,0); M[2][1] = T(2,1); M[2][2] = T(2,2);
    c[0] = newC[0]; c[1] = newC[1]; c[2] = newC[2];
};

template<int src_t, int dst_t> cv::ABC2Metric<src_t, dst_t>::ABC2Metric()
{
    init();
}


template<int src_t, int dst_t> void cv::ABC2Metric<src_t, dst_t>::init()
{
    using srcInfo = cv::Data_Type<src_t>;
    using srcType = typename cv::Data_Type<src_t>::type;
    
    using dstInfo = cv::Data_Type<dst_t>;
    using dstType = typename cv::Data_Type<dst_t>::type;
    
    for(int i = 0; i < dstInfo::channels; i++){
        for(int j = 0; j < srcInfo::channels; j++){
            if (j==i) {
                M[i][j] = 1;
            }else{
                M[i][j] = 0;// Dont add the alpha channel to the color mix.
            }
        }
    }
    
    c[0] = srcType((srcInfo::max + srcInfo::min)/2);
    c[1] = srcType((srcInfo::max + srcInfo::min)/2);
    c[2] = srcType((srcInfo::max + srcInfo::min)/2);
}



template<int src_t, int dst_t> inline void cv::ABC2Metric<src_t, dst_t>::operator()(const typename cv::Data_Type<src_t>::type* src, typename cv::Data_Type<dst_t>::type* dst, int n) const
{
    using cs = typename cv::colorSpaceConverter<src_t, dst_t>;
    typename cs::wrkType dis[3];
    n *= cs::dstInfo::channels;
    for(int i = 0; i < n; i += cs::dstInfo::channels, src += cs::srcInfo::channels)
    {
        dis[0] = src[0] - c[0]; dis[1] = src[1] - c[1]; dis[2] = src[2] - c[2];
        dst[i  ] = saturate_cast<typename cs::dstType>(std::sqrt(double(dis[0]*dis[0]*M[0][0] + dis[1]*dis[1]*M[0][1] + dis[2]*dis[2]*M[0][2])));
        dst[i+1] = saturate_cast<typename cs::dstType>(std::sqrt(double(dis[0]*dis[0]*M[1][0] + dis[1]*dis[1]*M[1][1] + dis[2]*dis[2]*M[1][2]))); 
        dst[i+2] = saturate_cast<typename cs::dstType>(std::sqrt(double(dis[0]*dis[0]*M[2][0] + dis[1]*dis[1]*M[2][1] + dis[2]*dis[2]*M[2][2]))); 
    }
}

template class cv::ABC2Metric<CV_8UC3,CV_8UC3>;
template class cv::ABC2Metric<CV_8UC4,CV_8UC3>;

template<int src_t, int dst_t> void convertColor(cv::InputArray _src, cv::OutputArray _dst, cv::colorSpaceConverter<src_t, dst_t>& colorConverter)
{
    cv::Mat src = _src.getMat(), dst;
    cv::Size sz = src.size();
    int scn = src.channels(), depth = src.depth();
    int dcn = cv::Data_Type<dst_t>::channels;
    // CV_Assert( colorConverter.srcInfo::channels == src.channels() );
    
    if (dcn <= 0) dcn = 3;
    CV_Assert( scn >= 3 && dcn == 3 );
    
    _dst.create(sz, CV_MAKETYPE(depth, dcn));
    dst = _dst.getMat();
    if( depth == CV_8U )
    {
        CvtColorLoop(src, dst, colorConverter);
    } else {
        CV_Error( CV_StsBadArg, "Unsupported image depth" );
    }
    
}

template void cv::convertColor<CV_8UC3,CV_8UC3>(cv::InputArray _src, cv::OutputArray _dst, cv::colorSpaceConverter<CV_8UC3, CV_8UC3>& colorConverter);
template void cv::convertColor<CV_8UC4,CV_8UC3>(cv::InputArray _src, cv::OutputArray _dst, cv::colorSpaceConverter<CV_8UC4, CV_8UC3>& colorConverter);
    
void  CvtColor( const CvArr* srcarr, CvArr* dstarr, int code )
    {
        cv::Mat src = cv::cvarrToMat(srcarr), dst0 = cv::cvarrToMat(dstarr), dst = dst0;
        CV_Assert( src.depth() == dst.depth() );
        
        cv::cvtColor(src, dst, code, dst.channels());
        CV_Assert( dst.data == dst0.data );
    }
}

CV_IMPL void
cvCvtColor( const CvArr* srcarr, CvArr* dstarr, int code )
{
    cv::Mat src = cv::cvarrToMat(srcarr), dst0 = cv::cvarrToMat(dstarr), dst = dst0;
    CV_Assert( src.depth() == dst.depth() );

    cv::cvtColor(src, dst, code, dst.channels());
    CV_Assert( dst.data == dst0.data );
}

/* End of file. */
